(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[317],{21240:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return T}});var l=t(52322),o=t(45392),r=t(16959),a=t(28165),i=t(67569),s=t(49427),c=t(2784),d=t(24231);function u(){return(u=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}function x(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var l,o,r,a,i=[],s=!0,c=!1;try{if(r=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(l=r.call(t)).done)&&(i.push(l.value),i.length!==n);s=!0);}catch(e){c=!0,o=e}finally{try{if(!s&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return h(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return h(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,l=Array(n);t<n;t++)l[t]=e[t];return l}var m=function(e){var n=x((0,i.useColorMode)(),1)[0],t=x((0,i.useColorStyle)({colorMode:n}),1)[0];return c.createElement(i.Box,u({backgroundColor:t.background.secondary,border:1,borderColor:t.divider,fontFamily:"mono",py:"3x",px:"3x",whiteSpace:"pre"},e))},g=function(e){return c.createElement(i.Box,u({mb:"4x"},e))},p=function(e){var n=x((0,c.useState)(e),2),t=n[0],l=n[1];return[t,function(e){return function(){return l(e)}}]},f="\n// import\nimport { Global } from '@emotion/react';\n\n// example\n<Drawer>\n  <Global\n    styles={css`\n      body {\n        overflow: hidden;\n      }\n    `}\n  />\n  <DrawerOverlay />\n  <DrawerContent>\n    <DrawerHeader />\n    <DrawerBody />\n    <DrawerFooter />\n  </DrawerContent>\n</Drawer>\n".trim(),b={name:"1sy9iaq",styles:"body{overflow:hidden;}"},w=function(){var e=(0,c.useRef)(),n=x((0,i.useColorMode)(),1)[0],t=x((0,i.useColorStyle)({colorMode:n}),1)[0],l=t.color.tertiary,o=x((0,s.useToggle)(!1),2),r=o[0],u=o[1],h=x(p("right"),2),w=h[0],y=h[1],T=x(p("auto"),2),j=T[0],k=T[1],C=x((0,s.useToggle)(!0),2),F=C[0],E=C[1],B=x((0,s.useToggle)(!0),2),v=B[0],S=B[1],D=x((0,s.useToggle)(!0),2),O=D[0],I=D[1],L=x((0,s.useToggle)(!0),2),G=L[0],V=L[1],H=x((0,s.useToggle)(!0),2),z=H[0],A=H[1],N=x((0,s.useToggle)(!0),2),R=N[0],P=N[1],M=x((0,s.useToggle)(!0),2),_=M[0],Z=M[1],U=x((0,s.useToggle)(!0),2),W=U[0],K=U[1],X=x((0,s.useToggle)(!0),2),Y=X[0],q=X[1],$=x((0,s.useToggle)(!0),2),J=$[0],Q=$[1],ee=x((0,s.useToggle)(!0),2),en=ee[0],et=ee[1],el=x((0,s.useToggle)(!0),2),eo=el[0],er=el[1],ea=x((0,s.useToggle)(!0),2),ei=ea[0],es=ea[1];return c.createElement(c.Fragment,null,c.createElement(i.Box,null,c.createElement(i.Tooltip,{label:"Click to launch drawer",openOnFocus:!1},c.createElement(i.Button,{onClick:function(){return u(!0)}},"Launch drawer"))),c.createElement(i.Divider,{my:"4x"}),c.createElement(i.Box,{mb:"4x"},c.createElement(i.Text,{fontSize:"lg",lineHeight:"lg"},"Drawer props")),c.createElement(g,null,c.createElement(i.Box,{mb:"2x"},c.createElement(i.TextLabel,null,"placement")),c.createElement(i.ButtonGroup,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["left","right","top","bottom"].map(function(e){return c.createElement(i.Button,{key:e,selected:e===w,onClick:y(e),minWidth:"15x"},e)}))),c.createElement(g,null,c.createElement(i.Box,{mb:"2x"},c.createElement(i.TextLabel,null,"size")),c.createElement(i.ButtonGroup,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["auto","sm","md","lg","full"].map(function(e){return c.createElement(i.Button,{key:e,selected:e===j,onClick:k(e),minWidth:"15x"},e)}))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:F,disabled:!z,onChange:function(){return E()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"autoFocus"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:v,onChange:function(e){v&&(V(!1),K(!1)),S()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"backdrop"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:O,disabled:!R&&!G,onChange:function(){return I()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"closeOnEsc"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:G,disabled:!R&&!O||!v,onChange:function(){return V()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"closeOnOutsideClick"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:z,onChange:function(){return A()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"ensureFocus"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:R,disabled:!O&&!G,onChange:function(){return P()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"isClosable"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:_,disabled:!z,onChange:function(){return Z()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"returnFocusOnClose"))),c.createElement(i.Divider,{my:"4x"}),c.createElement(i.Box,{mb:"4x"},c.createElement(i.Text,{fontSize:"lg",lineHeight:"lg"},"Drawer composition")),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:W,disabled:!v,onChange:function(){return K()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"DrawerOverlay"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:Y,onChange:function(){return q()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"DrawerHeader"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:J,onChange:function(){return Q()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"DrawerBody"))),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center"},c.createElement(i.Checkbox,{checked:en,onChange:function(){return et()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"DrawerFooter"))),c.createElement(i.Divider,{my:"4x"}),c.createElement(i.Box,{mb:"4x"},c.createElement(i.Text,{fontSize:"lg",lineHeight:"lg"},"Extra drawer setup")),c.createElement(g,null,c.createElement(i.TextLabel,{display:"flex",alignItems:"center",mb:"3x"},c.createElement(i.Checkbox,{checked:ei,onChange:function(){return es()}}),c.createElement(i.Space,{width:"2x"}),c.createElement(i.Text,null,"Enable body scroll locking")),c.createElement(i.Box,{ml:"6x"},c.createElement(i.Box,{mb:"4x"},c.createElement(i.Text,{mb:"2x"},"You can use ",c.createElement("strong",null,"Body Scroll Locking")," to prevent the user from scrolling the page while the drawer is open."),c.createElement(i.Text,{mb:"2x"},c.createElement("strong",null,"Body Scroll Locking")," is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.")),c.createElement(m,null,f))),c.createElement(i.Drawer,{autoFocus:F,backdrop:v,closeOnEsc:O,closeOnOutsideClick:G,ensureFocus:z,initialFocusRef:e,isClosable:R,isOpen:r,onClose:function(){return u(!1)},placement:w,returnFocusOnClose:_,size:j},ei&&c.createElement(a.xB,{styles:b}),W&&c.createElement(i.DrawerOverlay,null),c.createElement(i.DrawerContent,null,Y&&c.createElement(i.DrawerHeader,null,"auto"===j&&c.createElement(i.Text,null,"Auto-sized Drawer"),"sm"===j&&c.createElement(i.Text,null,"Small Drawer"),"md"===j&&c.createElement(i.Text,null,"Medium Drawer"),"lg"===j&&c.createElement(i.Text,null,"Large Drawer"),"full"===j&&c.createElement(i.Text,null,"Full-width Drawer")),J&&c.createElement(i.DrawerBody,null,eo&&c.createElement(i.Alert,{variant:"outline",severity:"info",mb:"4x",isClosable:!0,onClose:function(){return er()}},c.createElement(i.Text,null,"This is an info alert")),c.createElement(i.Tabs,null,c.createElement(i.TabList,{mb:"4x"},c.createElement(i.Tab,null,"Tab 1"),c.createElement(i.Tab,null,"Tab 2")),c.createElement(i.TabPanels,null,c.createElement(i.TabPanel,null,c.createElement(d.Z,{mb:"4x"}),c.createElement(i.Grid,{templateColumns:"auto 1fr",rowGap:"2x",columnGap:"3x",alignItems:"center",mb:"4x"},c.createElement(i.Icon,{icon:"user",color:l}),c.createElement(i.Input,{ref:e,placeholder:"User name"}),c.createElement(i.Icon,{icon:"email",color:l}),c.createElement(i.Input,{placeholder:"Email address"}))),c.createElement(i.TabPanel,null,c.createElement(i.Box,{backgroundColor:t.background.tertiary,minHeight:1e3,px:"3x",py:"2x"},c.createElement(i.Text,null,"This is a very long content that will overflow the drawer")))))),en&&c.createElement(i.DrawerFooter,null,c.createElement(i.Grid,{templateColumns:"1fr 1fr",columnGap:"2x"},c.createElement(i.Button,{variant:"primary",onClick:function(){return u(!1)}},"OK"),c.createElement(i.Button,{onClick:function(){return u(!1)}},"Cancel"))))))};function y(e){var n=Object.assign({div:"div",h1:"h1",p:"p",strong:"strong",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),e.components);return(0,l.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n",(0,l.jsx)(n.h1,{id:"drawer",children:"Drawer"}),"\n",(0,l.jsxs)(n.p,{children:["A drawer dialog is a window overlaid on either the primary window or another dialog\nwindow. Contents behind a drawer dialog are ",(0,l.jsx)(n.strong,{children:"inert"})," meaning that users cannot\ninteract with content behind the dialog."]}),"\n",(0,l.jsxs)(n.h2,{id:"import",children:["Import",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  DrawerCloseButton\n  useDrawer,\n} from '@tonic-ui/react';\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"usage",children:["Usage",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.p,{children:"Click the button below to toggle a drawer. The drawer will show up on either side of the screen."}),"\n",(0,l.jsx)(r.Z,{component:w,file:{data:'import { Global, css } from \'@emotion/react\';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Grid,\n  Icon,\n  Input,\n  Space,\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useToggle,\n} from \'@tonic-ui/react-hooks\';\nimport React, { useRef, useState } from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst bodyScrollLockCode = `\n// import\nimport { Global } from \'@emotion/react\';\n\n// example\n<Drawer>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <DrawerOverlay />\n  <DrawerContent>\n    <DrawerHeader />\n    <DrawerBody />\n    <DrawerFooter />\n  </DrawerContent>\n</Drawer>\n`.trim();\n\nconst App = () => {\n  const initialFocusRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = colorStyle.color.tertiary;\n  const [isOpen, toggleDrawer] = useToggle(false);\n  const [placement, changePlacementBy] = useSelection(\'right\');\n  const [size, changeSizeBy] = useSelection(\'auto\');\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [backdrop, toggleBackdrop] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [isClosable, toggleIsClosable] = useToggle(true);\n  const [returnFocusOnClose, toggleReturnFocusOnClose] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n\n  return (\n    <>\n      <Box>\n        <Tooltip label="Click to launch drawer" openOnFocus={false}>\n          <Button onClick={() => toggleDrawer(true)}>\n            Launch drawer\n          </Button>\n        </Tooltip>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Drawer props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            placement\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'left\', \'right\', \'top\', \'bottom\'].map(value => (\n            <Button\n              key={value}\n              selected={value === placement} \n              onClick={changePlacementBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'sm\', \'md\', \'lg\', \'full\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={() => toggleAutoFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={backdrop}\n            onChange={(e) => {\n              const nextBackdrop = !backdrop;\n              if (!nextBackdrop) {\n                toggleCloseOnOutsideClick(false);\n                toggleIsOverlayVisible(false);\n              }\n\n              toggleBackdrop();\n            }}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">backdrop</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={() => toggleCloseOnEsc()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={(!isClosable && !closeOnEsc) || !backdrop}\n            onChange={() => toggleCloseOnOutsideClick()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={() => toggleEnsureFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={() => toggleIsClosable()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={returnFocusOnClose}\n            disabled={!ensureFocus}\n            onChange={() => toggleReturnFocusOnClose()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">returnFocusOnClose</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Drawer composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isOverlayVisible}\n            disabled={!backdrop}\n            onChange={() => toggleIsOverlayVisible()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={() => toggleIsHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={() => toggleIsBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={() => toggleIsFooterVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra drawer setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              You can use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the drawer is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <CodeBlock>\n            {bodyScrollLockCode}\n          </CodeBlock>\n        </Box>\n      </FormGroup>\n      <Drawer\n        autoFocus={autoFocus}\n        backdrop={backdrop}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        ensureFocus={ensureFocus}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={() => toggleDrawer(false)}\n        placement={placement}\n        returnFocusOnClose={returnFocusOnClose}\n        size={size}\n      >\n        {enableBodyScrollLock && (\n          <Global\n            styles={css`\n              body {\n                overflow: hidden;\n              }\n            `}\n          />\n        )}\n        {isOverlayVisible && (\n          <DrawerOverlay />\n        )}\n        <DrawerContent>\n          {isHeaderVisible && (\n            <DrawerHeader>\n              {size === \'auto\' && <Text>Auto-sized Drawer</Text>}\n              {size === \'sm\' && <Text>Small Drawer</Text>}\n              {size === \'md\' && <Text>Medium Drawer</Text>}\n              {size === \'lg\' && <Text>Large Drawer</Text>}\n              {size === \'full\' && <Text>Full-width Drawer</Text>}\n            </DrawerHeader>\n          )}\n          {isBodyVisible && (\n            <DrawerBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Tabs>\n                <TabList mb="4x">\n                  <Tab>Tab 1</Tab>\n                  <Tab>Tab 2</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <SkeletonBlock mb="4x" />\n                    <Grid\n                      templateColumns="auto 1fr"\n                      rowGap="2x"\n                      columnGap="3x"\n                      alignItems="center"\n                      mb="4x"\n                    >\n                      <Icon icon="user" color={iconColor} />\n                      <Input ref={initialFocusRef} placeholder="User name" />\n                      <Icon icon="email" color={iconColor} />\n                      <Input placeholder="Email address" />\n                    </Grid>\n                  </TabPanel>\n                  <TabPanel>\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the drawer\n                      </Text>\n                    </Box>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </DrawerBody>\n          )}\n          {isFooterVisible && (\n            <DrawerFooter>\n              <Grid\n                templateColumns="1fr 1fr"\n                columnGap="2x"\n              >\n                <Button variant="primary" onClick={() => toggleDrawer(false)}>\n                  OK\n                </Button>\n                <Button onClick={() => toggleDrawer(false)}>\n                  Cancel\n                </Button>\n              </Grid>\n            </DrawerFooter>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/drawer/index.page.mdx"},sandbox:{files:{"src/components/SkeletonBlock.js":'import {\n  Flex,\n  Skeleton,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst SkeletonBlock = (props) => (\n  <Flex {...props}>\n    <Flex flex="none" mr="4x" alignItems="center">\n      <Skeleton variant="circle" width="10x" height="10x" />\n    </Flex>\n    <Flex flex="auto" flexDirection="column" rowGap="2x">\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </Flex>\n  </Flex>\n);\n\nexport default SkeletonBlock;'},raw:'import { Global, css } from \'@emotion/react\';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Grid,\n  Icon,\n  Input,\n  Space,\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useToggle,\n} from \'@tonic-ui/react-hooks\';\nimport React, { useRef, useState } from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst bodyScrollLockCode = `\n// import\nimport { Global } from \'@emotion/react\';\n\n// example\n<Drawer>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <DrawerOverlay />\n  <DrawerContent>\n    <DrawerHeader />\n    <DrawerBody />\n    <DrawerFooter />\n  </DrawerContent>\n</Drawer>\n`.trim();\n\nconst App = () => {\n  const initialFocusRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = colorStyle.color.tertiary;\n  const [isOpen, toggleDrawer] = useToggle(false);\n  const [placement, changePlacementBy] = useSelection(\'right\');\n  const [size, changeSizeBy] = useSelection(\'auto\');\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [backdrop, toggleBackdrop] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [isClosable, toggleIsClosable] = useToggle(true);\n  const [returnFocusOnClose, toggleReturnFocusOnClose] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n\n  return (\n    <>\n      <Box>\n        <Tooltip label="Click to launch drawer" openOnFocus={false}>\n          <Button onClick={() => toggleDrawer(true)}>\n            Launch drawer\n          </Button>\n        </Tooltip>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Drawer props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            placement\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'left\', \'right\', \'top\', \'bottom\'].map(value => (\n            <Button\n              key={value}\n              selected={value === placement} \n              onClick={changePlacementBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'sm\', \'md\', \'lg\', \'full\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={() => toggleAutoFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={backdrop}\n            onChange={(e) => {\n              const nextBackdrop = !backdrop;\n              if (!nextBackdrop) {\n                toggleCloseOnOutsideClick(false);\n                toggleIsOverlayVisible(false);\n              }\n\n              toggleBackdrop();\n            }}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">backdrop</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={() => toggleCloseOnEsc()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={(!isClosable && !closeOnEsc) || !backdrop}\n            onChange={() => toggleCloseOnOutsideClick()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={() => toggleEnsureFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={() => toggleIsClosable()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={returnFocusOnClose}\n            disabled={!ensureFocus}\n            onChange={() => toggleReturnFocusOnClose()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">returnFocusOnClose</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Drawer composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isOverlayVisible}\n            disabled={!backdrop}\n            onChange={() => toggleIsOverlayVisible()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={() => toggleIsHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={() => toggleIsBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={() => toggleIsFooterVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra drawer setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              You can use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the drawer is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <CodeBlock>\n            {bodyScrollLockCode}\n          </CodeBlock>\n        </Box>\n      </FormGroup>\n      <Drawer\n        autoFocus={autoFocus}\n        backdrop={backdrop}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        ensureFocus={ensureFocus}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={() => toggleDrawer(false)}\n        placement={placement}\n        returnFocusOnClose={returnFocusOnClose}\n        size={size}\n      >\n        {enableBodyScrollLock && (\n          <Global\n            styles={css`\n              body {\n                overflow: hidden;\n              }\n            `}\n          />\n        )}\n        {isOverlayVisible && (\n          <DrawerOverlay />\n        )}\n        <DrawerContent>\n          {isHeaderVisible && (\n            <DrawerHeader>\n              {size === \'auto\' && <Text>Auto-sized Drawer</Text>}\n              {size === \'sm\' && <Text>Small Drawer</Text>}\n              {size === \'md\' && <Text>Medium Drawer</Text>}\n              {size === \'lg\' && <Text>Large Drawer</Text>}\n              {size === \'full\' && <Text>Full-width Drawer</Text>}\n            </DrawerHeader>\n          )}\n          {isBodyVisible && (\n            <DrawerBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Tabs>\n                <TabList mb="4x">\n                  <Tab>Tab 1</Tab>\n                  <Tab>Tab 2</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <SkeletonBlock mb="4x" />\n                    <Grid\n                      templateColumns="auto 1fr"\n                      rowGap="2x"\n                      columnGap="3x"\n                      alignItems="center"\n                      mb="4x"\n                    >\n                      <Icon icon="user" color={iconColor} />\n                      <Input ref={initialFocusRef} placeholder="User name" />\n                      <Icon icon="email" color={iconColor} />\n                      <Input placeholder="Email address" />\n                    </Grid>\n                  </TabPanel>\n                  <TabPanel>\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the drawer\n                      </Text>\n                    </Box>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </DrawerBody>\n          )}\n          {isFooterVisible && (\n            <DrawerFooter>\n              <Grid\n                templateColumns="1fr 1fr"\n                columnGap="2x"\n              >\n                <Button variant="primary" onClick={() => toggleDrawer(false)}>\n                  OK\n                </Button>\n                <Button onClick={() => toggleDrawer(false)}>\n                  Cancel\n                </Button>\n              </Grid>\n            </DrawerFooter>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,l.jsxs)(n.h3,{id:"how-to-close-a-drawer",children:["How to close a drawer",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-close-a-drawer",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.h4,{id:"using-the-isclosable-prop-to",children:["Using the ",(0,l.jsx)(n.code,{children:"isClosable"})," prop to",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-the-isclosable-prop-to",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"isClosable"})," prop is used to make a drawer closable by adding a close button to it. By default, the value of ",(0,l.jsx)(n.code,{children:"isClosable"})," is false. To make a drawer closable, set ",(0,l.jsx)(n.code,{children:"isClosable"})," to true."]}),"\n",(0,l.jsx)(n.pre,{disabled:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"<Drawer isOpen={isOpen} isClosable onClose={onClose}>\n  <DrawerOverlay />\n  <DrawerContent>\n    <DrawerHeader />\n    <DrawerBody />\n    <DrawerFooter />\n  </DrawerContent>\n</Drawer>\n"})}),"\n",(0,l.jsxs)(n.h4,{id:"using-the-drawerclosebutton-component",children:["Using the ",(0,l.jsx)(n.code,{children:"DrawerCloseButton"})," component",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-the-drawerclosebutton-component",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"DrawerCloseButton"})," component provides an easy way to add a close button to a drawer. This button is specifically designed to handle closing the drawer, so you don't need to write any additional code to handle it. If you use ",(0,l.jsx)(n.code,{children:"DrawerCloseButton"}),", you can omit the ",(0,l.jsx)(n.code,{children:"isClosable"})," prop in the ",(0,l.jsx)(n.code,{children:"Drawer"})," component."]}),"\n",(0,l.jsxs)(n.p,{children:["Besides the default functionality of the ",(0,l.jsx)(n.code,{children:"DrawerCloseButton"}),", you can also pass additional props, such as ",(0,l.jsx)(n.code,{children:"data-test"})," or ",(0,l.jsx)(n.code,{children:"data-tracking"})," attributes, to the ",(0,l.jsx)(n.code,{children:"DrawerCloseButton"})," component as needed."]}),"\n",(0,l.jsx)(n.pre,{disabled:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Drawer isOpen={isOpen} onClose={onClose}>\n  <DrawerOverlay />\n  <DrawerContent>\n    <DrawerHeader />\n    <DrawerBody />\n    <DrawerFooter />\n    <DrawerCloseButton data-test="drawer-close-button" />\n  </DrawerContent>\n</Drawer>\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"props",children:["Props",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.h3,{id:"drawer-1",children:["Drawer",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#drawer-1",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"autoFocus"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the drawer will automatically set focus on the first focusable element inside the drawer when it is opened.",(0,l.jsx)("br",{}),"⚠️ This only works if ",(0,l.jsx)(n.code,{children:"initialFocusRef"})," is not defined and ",(0,l.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,l.jsx)(n.code,{children:"true"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"backdrop"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", it will wrap components with a backdrop to provide a click area for dismissing when clicking outside the drawer."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,l.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"closeOnEsc"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", close the drawer when the ",(0,l.jsx)(n.code,{children:"esc"})," key is pressed."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"closeOnOutsideClick"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", close the drawer when click outside of the drawer. Note that this value will not have any effect when ",(0,l.jsx)(n.code,{children:"backdrop"})," is set to ",(0,l.jsx)(n.code,{children:"true"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"ensureFocus"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", it ensures that the user's focus remains within the drawer when it is open, preventing them from interacting with elements outside the drawer."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"finalFocusRef"}),(0,l.jsx)(n.td,{align:"left",children:"RefObject"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["The ",(0,l.jsx)(n.code,{children:"ref"})," of the element that should receive focus when the drawer closes.",(0,l.jsx)("br",{}),"⚠️ This only works if ",(0,l.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,l.jsx)(n.code,{children:"true"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"initialFocusRef"}),(0,l.jsx)(n.td,{align:"left",children:"RefObject"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["The ",(0,l.jsx)(n.code,{children:"ref"})," of the element that should receive focus when the drawer opens.",(0,l.jsx)("br",{}),"⚠️ This only works if ",(0,l.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,l.jsx)(n.code,{children:"true"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"isClosable"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", a close button will appear on the right side."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"isOpen"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the drawer is shown."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClose"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback fired when the drawer closes."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"returnFocusOnClose"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the focus will be restored to the element that was focused on when the drawer was initially opened.",(0,l.jsx)("br",{}),"⚠️ This only works if ",(0,l.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,l.jsx)(n.code,{children:"true"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"placement"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'right'"}),(0,l.jsx)(n.td,{align:"left",children:"Change the placement of the drawer. One of: 'left', 'right', 'top', 'bottom'"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"size"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'auto'"}),(0,l.jsx)(n.td,{align:"left",children:"Change the size of the drawer. One of: 'auto', 'sm', 'md', 'lg', 'full'"})]})]})]}),"\n",(0,l.jsxs)(n.h3,{id:"draweroverlay",children:["DrawerOverlay",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#draweroverlay",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left",children:"Fade"}),(0,l.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,l.jsx)(n.td,{align:"left",children:"object"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,l.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,l.jsxs)(n.h3,{id:"drawercontent",children:["DrawerContent",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#drawercontent",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left",children:"Slide"}),(0,l.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,l.jsx)(n.td,{align:"left",children:"object"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,l.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,l.jsxs)(n.h3,{id:"drawerheader",children:["DrawerHeader",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#drawerheader",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"drawerbody",children:["DrawerBody",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#drawerbody",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"drawerfooter",children:["DrawerFooter",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#drawerfooter",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"drawerclosebutton",children:["DrawerCloseButton",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#drawerclosebutton",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]})]})}var T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,o.ah)(),e.components).wrapper;return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(y,e)})):y(e)}},16959:function(e,n,t){"use strict";t.d(n,{Z:function(){return y}});var l=t(67569),o=t(49427),r=t(5632),a=t(2784),i=t(65245),s=t(16245),c=t(76761),d=t(73205),u=t(98107),x=["size"];function h(){return(h=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var m=(0,a.forwardRef)(function(e,n){var t=e.size,o=function(e,n){if(null==e)return{};var t,l,o=function(e,n){if(null==e)return{};var t,l,o={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,x);return a.createElement(l.SVGIcon,h({size:t,viewBox:"0 0 1024 1024"},o),a.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});m.displayName="CodeSandboxIcon";var g=t(44285);function p(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var l,o,r,a,i=[],s=!0,c=!1;try{if(r=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(l=r.call(t)).done)&&(i.push(l.value),i.length!==n);s=!0);}catch(e){c=!0,o=e}finally{try{if(!s&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return f(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return f(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,l=Array(n);t<n;t++)l[t]=e[t];return l}var b={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},w=function(e){var n=e.component,t=e.file,x=e.sandbox,h=(0,r.useRouter)(),f=p((0,a.useReducer)(function(e){return!e},!1),2),w=f[0],y=f[1],T=p((0,l.useColorMode)(),1)[0],j={dark:c.y,light:c.q}[T],k=p((0,o.useToggle)(!1),2),C=k[0],F=k[1],E=(0,s.Z)(null==t?void 0:t.data),B=E.onCopy,v=E.hasCopied,S=(0,a.useCallback)(function(){B()},[B]),D=(0,a.useCallback)(function(){(0,d.b)(x)},[x]),O=(0,a.useCallback)(function(){y(),F(!1)},[y,F]);return a.createElement(i.nu,{code:null==t?void 0:t.data,disabled:!0,language:"jsx",theme:j},a.createElement(l.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[T],p:"4x"},a.createElement(l.Box,{fontSize:"sm",lineHeight:"sm"},a.createElement(a.Fragment,{key:w},a.createElement(n,null)))),a.createElement(l.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},a.createElement(g.Z,{"data-track":C?"CodeBlock|hide_source|".concat((0,u.Z)({path:h.pathname})):"CodeBlock|show_source|".concat((0,u.Z)({path:h.pathname})),onClick:F},a.createElement(l.Tooltip,{label:C?"Hide the source":"Show the source"},a.createElement(l.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),a.createElement(g.Z,{"data-track":"CodeBlock|copy_source|".concat((0,u.Z)({path:h.pathname})),onClick:S},a.createElement(l.Tooltip,{label:v?"Copied":"Copy the source"},a.createElement(l.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),a.createElement(g.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(h.pathname),onClick:D},a.createElement(l.Tooltip,{label:"Edit in CodeSandbox"},a.createElement(m,{size:{sm:"5x",md:"4x"}}))),a.createElement(g.Z,{"data-track":"CodeBlock|reset|".concat(h.pathname),onClick:O},a.createElement(l.Tooltip,{label:"Reset the demo"},a.createElement(l.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),a.createElement(l.Fade,{in:C},a.createElement(l.Collapse,{in:C,unmountOnExit:!0},a.createElement(i.uz,{style:b}))))};w.displayName="Demo";var y=w},24231:function(e,n,t){"use strict";var l=t(67569),o=t(2784);n.Z=function(e){return o.createElement(l.Flex,e,o.createElement(l.Flex,{flex:"none",mr:"4x",alignItems:"center"},o.createElement(l.Skeleton,{variant:"circle",width:"10x",height:"10x"})),o.createElement(l.Flex,{flex:"auto",flexDirection:"column",rowGap:"2x"},o.createElement(l.Skeleton,null),o.createElement(l.Skeleton,null),o.createElement(l.Skeleton,null)))}},77120:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/drawer",function(){return t(21240)}])}},function(e){e.O(0,[2888,9774,179],function(){return e(e.s=77120)}),_N_E=e.O()}]);