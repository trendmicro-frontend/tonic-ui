(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3172],{72998:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return od}});var t,r,l,d,i,a,c,s,u=o(52322),h=o(45392),b=o(96835),p=o(40596),f=o(85017),m=o(73645),g=o(78366),x=o(49857),N=o(743),y=o(10636),v=o(70828),I=o(29970),S=o(5081),T=o(76635),C=o.n(T),w=o(2784),k=o(28846),E=o(52797),j=JSON.parse('[{"id":"1","label":"Node 1","children":[{"id":"1.1","label":"Node 2","children":[{"id":"1.1.1","label":"Node 3","children":[{"id":"1.1.1.1","label":"Node 4"}]},{"id":"1.1.2","label":"Node 5","children":[{"id":"1.1.2.1","label":"Node 6"}]},{"id":"1.1.3","label":"Node 7","children":[{"id":"1.1.3.1","label":"Node 8"},{"id":"1.1.3.2","label":"Node 9"},{"id":"1.1.3.3","label":"Node 10"}]},{"id":"1.1.4","label":"Node 11"},{"id":"1.1.5","label":"Node 12"}]},{"id":"1.2","label":"Node 13","children":[{"id":"1.2.1","label":"Node 14","children":[{"id":"1.2.1.1","label":"Node 15"}]}]},{"id":"1.3","label":"Node 16","children":[{"id":"1.3.1","label":"Node 17"},{"id":"1.3.2","label":"Node 18"},{"id":"1.3.3","label":"Node 19"},{"id":"1.3.4","label":"Node 20","children":[{"id":"1.3.4.1","label":"Node 21"},{"id":"1.3.4.2","label":"Node 22"},{"id":"1.3.4.3","label":"Node 23"}]},{"id":"1.3.5","label":"Node 24"}]},{"id":"1.4","label":"Node 25","children":[{"id":"1.4.1","label":"Node 26"},{"id":"1.4.2","label":"Node 27"},{"id":"1.4.3","label":"Node 28"}]}]},{"id":"2","label":"Node 29","children":[{"id":"2.1","label":"Node 30","children":[{"id":"2.1.1","label":"Node 31"},{"id":"2.1.2","label":"Node 32"},{"id":"2.1.3","label":"Node 33"}]},{"id":"2.2","label":"Node 34"},{"id":"2.3","label":"Node 35","children":[{"id":"2.3.1","label":"Node 36","children":[{"id":"2.3.1.1","label":"Node 37"},{"id":"2.3.1.2","label":"Node 38"}]}]},{"id":"2.4","label":"Node 39"}]},{"id":"3","label":"Node 40","children":[{"id":"3.1","label":"Node 41","children":[{"id":"3.1.1","label":"Node 42"},{"id":"3.1.2","label":"Node 43","children":[{"id":"3.1.2.1","label":"Node 44"},{"id":"3.1.2.2","label":"Node 45"},{"id":"3.1.2.3","label":"Node 46"},{"id":"3.1.2.4","label":"Node 47"}]},{"id":"3.1.3","label":"Node 48"}]},{"id":"3.2","label":"Node 49","children":[{"id":"3.2.1","label":"Node 50"},{"id":"3.2.2","label":"Node 51"}]},{"id":"3.3","label":"Node 52","children":[{"id":"3.3.1","label":"Node 53"},{"id":"3.3.2","label":"Node 54","children":[{"id":"3.3.2.1","label":"Node 55"}]}]},{"id":"3.4","label":"Node 56"},{"id":"3.5","label":"Node 57","children":[{"id":"3.5.1","label":"Node 58"},{"id":"3.5.2","label":"Node 59","children":[{"id":"3.5.2.1","label":"Node 60"},{"id":"3.5.2.2","label":"Node 61"}]}]}]},{"id":"4","label":"Node 62","children":[{"id":"4.1","label":"Node 63","children":[{"id":"4.1.1","label":"Node 64","children":[{"id":"4.1.1.1","label":"Node 65"},{"id":"4.1.1.2","label":"Node 66"}]},{"id":"4.1.2","label":"Node 67"},{"id":"4.1.3","label":"Node 68"},{"id":"4.1.4","label":"Node 69"}]}]},{"id":"5","label":"Node 70","children":[{"id":"5.1","label":"Node 71","children":[{"id":"5.1.1","label":"Node 72"},{"id":"5.1.2","label":"Node 73"},{"id":"5.1.3","label":"Node 74","children":[{"id":"5.1.3.1","label":"Node 75"}]},{"id":"5.1.4","label":"Node 76","children":[{"id":"5.1.4.1","label":"Node 77"},{"id":"5.1.4.2","label":"Node 78"}]}]},{"id":"5.2","label":"Node 79"},{"id":"5.3","label":"Node 80","children":[{"id":"5.3.1","label":"Node 81"}]},{"id":"5.4","label":"Node 82","children":[{"id":"5.4.1","label":"Node 83","children":[{"id":"5.4.1.1","label":"Node 84"}]},{"id":"5.4.2","label":"Node 85"}]},{"id":"5.5","label":"Node 86"}]},{"id":"6","label":"Node 87","children":[{"id":"6.1","label":"Node 88"},{"id":"6.2","label":"Node 89"},{"id":"6.3","label":"Node 90","children":[{"id":"6.3.1","label":"Node 91"},{"id":"6.3.2","label":"Node 92"},{"id":"6.3.3","label":"Node 93"}]},{"id":"6.4","label":"Node 94"}]},{"id":"7","label":"Node 95","children":[{"id":"7.1","label":"Node 96","children":[{"id":"7.1.1","label":"Node 97"},{"id":"7.1.2","label":"Node 98","children":[{"id":"7.1.2.1","label":"Node 99"},{"id":"7.1.2.2","label":"Node 100"}]}]}]}]'),D=function(){return JSON.parse(JSON.stringify(j))},Z=function(n){var e=new Map;return!function n(o){(0,S.rY)(o).forEach(function(o){e.set(o.id,o),n(o.children)})}(n),e},O=function(n){var e=[];return!function n(o){(0,S.rY)(o).forEach(function(o){Array.isArray(o.children)&&o.children.length>0&&(e.push(o.id),n(o.children))})}(n),e},A=o(95412),R=o(73705),P=o(27216),M=o(1847),z=o(53310),F=o(30514),L=o(75715),B=o(58614),W=o(17179),U=o(15345),Y=o(63433),H=o(86851),_=o(31222),G=o(95530),X=o(56818),K=o(6738),$=o(29642),V=function(n){var e=n.children,o=n.condition,t=n.wrapper;return o?t(e):e},Q=o(92843),J=o(84153);function q(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nn=function(n){var e,o=n.canDrag,t=n.children,r=n.item,l=n.type,d=function(n){if(Array.isArray(n))return n}(e=(0,Q.c)({type:void 0===l?"dnd":l,item:r,canDrag:o,collect:function(n){return{isDragging:n.isDragging()}}}))||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{for(l=(o=o.call(n)).next;!(a=(t=l.call(o)).done)&&(i.push(t.value),3!==i.length);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(e,3)||function(n,e){if(n){if("string"==typeof n)return q(n,3);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return q(n,3)}}(e,3)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=d[0],a=d[1],c=d[2];return(0,w.useEffect)(function(){c((0,J.r)(),{captureDraggingState:!0})},[c]),t({dragRef:a,isDragging:i.isDragging})};function ne(){return(ne=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}var no=function(n){return w.createElement("svg",ne({xmlns:"http://www.w3.org/2000/svg",width:8,height:16,fill:"currentColor"},n),t||(t=w.createElement("circle",{cx:2,cy:2,r:1})),r||(r=w.createElement("circle",{cx:2,cy:6,r:1})),l||(l=w.createElement("circle",{cx:2,cy:10,r:1})),d||(d=w.createElement("circle",{cx:2,cy:14,r:1})),i||(i=w.createElement("circle",{cx:6,cy:2,r:1})),a||(a=w.createElement("circle",{cx:6,cy:6,r:1})),c||(c=w.createElement("circle",{cx:6,cy:10,r:1})),s||(s=w.createElement("circle",{cx:6,cy:14,r:1})))};function nt(n){return(nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var nr=["node","data"];function nl(){return(nl=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nd(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),o.push.apply(o,t)}return o}function ni(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?nd(Object(o),!0).forEach(function(e){var t,r;t=e,r=o[e],(t=function(n){var e=function(n,e){if("object"!==nt(n)||null===n)return n;var o=n[Symbol.toPrimitive];if(void 0!==o){var t=o.call(n,e||"default");if("object"!==nt(t))return t;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(n)}(n,"string");return"symbol"===nt(e)?e:String(e)}(t))in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):nd(Object(o)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))})}return n}function na(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||nc(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nc(n,e){if(n){if("string"==typeof n)return ns(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ns(n,e)}}function ns(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nu=function n(e,o){var t=(n.canvas||(n.canvas=document.createElement("canvas"))).getContext("2d");return t.font=o,t.measureText(e).width||0},nh=function(n){var e=n.node,o=n.data,t=function(n,e){if(null==n)return{};var o,t,r=function(n,e){if(null==n)return{};var o,t,r={},l=Object.keys(n);for(t=0;t<l.length;t++)o=l[t],e.indexOf(o)>=0||(r[o]=n[o]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(t=0;t<l.length;t++)o=l[t],!(e.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(n,o)&&(r[o]=n[o])}return r}(n,nr),r=na((0,p.Z)(),1)[0],l=na((0,f.Z)({colorMode:r}),1)[0],d=(0,P.u)(),i={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[r],a={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[r],c=e.label,s=na((0,w.useState)([{id:"endpoint",desc:!1}]),2),u=s[0],h=s[1],b=na((0,w.useState)({}),2),g=b[0],N=b[1],y=(0,w.useMemo)(function(){return[{id:"selection",header:function(n){var e=n.table;return w.createElement(M.Z,{checked:e.getIsAllRowsSelected(),indeterminate:e.getIsSomeRowsSelected(),onChange:e.getToggleAllRowsSelectedHandler()})},cell:function(n){var e=n.row;return w.createElement(M.Z,{checked:e.getIsSelected(),disabled:!e.getCanSelect(),indeterminate:e.getIsSomeSelected(),onChange:e.getToggleSelectedHandler()})},size:40},{header:function(){return w.createElement(z.Z,{label:"Endpoint"},"Endpoint")},accessorKey:"endpoint",cell:function(n){var e=n.getValue;n.row;var o=e();return w.createElement(z.Z,{label:o},o)},size:"auto"},{header:function(){return w.createElement(z.Z,{label:"Detections"},"Detections")},accessorKey:"detections",cell:function(n){var e,o=(function(n){if(Array.isArray(n))return ns(n)}(e=(0,n.getValue)())||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(e)||nc(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length;return w.createElement(z.Z,{label:o},o)},size:"auto"},{header:function(){return w.createElement(z.Z,{label:"Last Seen"},"Last Seen")},accessorKey:"lastSeen",cell:function(n){var e=(0,n.getValue)().toISOString();return w.createElement(z.Z,{label:e},e)},size:"auto"}]},[]),v=(0,A.b7)({data:(0,S.rY)(o),columns:y,defaultColumn:{minSize:40},state:{rowSelection:g,sorting:u},enableRowSelection:!0,enableSorting:!0,enableSortingRemoval:!0,onRowSelectionChange:N,getCoreRowModel:(0,R.sC)(),getPaginationRowModel:(0,R.G_)(),getSortedRowModel:(0,R.tj)(),onSortingChange:function(n){h(n)}}),I=na((0,w.useState)(0),2),T=I[0],k=I[1];(0,w.useEffect)(function(){v.resetRowSelection(),v.resetPagination()},[o,v]),(0,w.useEffect)(function(){if(T){var n=[d.fontWeights.semibold,d.fontSizes.sm,d.fonts.base].join(" "),e=v.getAllColumns().filter(function(n){return"auto"!==n.columnDef.size}).map(function(e){var o=e.id,t=e.columnDef,r=t.minSize,l=t.size;if("number"==typeof l)return{id:o,size:l};if("string"==typeof l&&l.endsWith("%")){var d="string"==typeof t.header?nu(t.header,n):0;return{id:o,size:Math.max(T*parseFloat(l)/100,d+24,r)}}return{id:o,size:r}}),o=v.getAllColumns().filter(function(n){return"auto"===n.columnDef.size}).map(function(e){var o=e.id,t=e.columnDef,r=t.minSize;return{id:o,size:Math.max(("string"==typeof t.header?nu(t.header,n):0)+24,r)}}),t=e.reduce(function(n,e){return n+e.size},0),r=o.reduce(function(n,e){return n+e.size},0),l=T-t-12;if(0===o.length&&l>0){var i=l/e.length;e.forEach(function(n){n.size=n.size+i}),l=0}o.length>0&&l>r&&o.forEach(function(n,e){n.size=Math.max(l/(o.length-e),n.size),l-=n.size});for(var a={},c=0;c<e.length;c++){var s=e[c];a[s.id]=s.size}for(var u=0;u<o.length;u++){var h=o[u];a[h.id]=h.size}v.setColumnSizing(a)}},[y,v,T,d]);var E=v.getCoreRowModel().rows.length;return w.createElement(m.Z,nl({flexDirection:"column"},t),w.createElement(x.Z,{flex:"none",px:"3x",py:"2x"},c),w.createElement(x.Z,{flex:"auto"},w.createElement(K.ZP,{disableHeight:!0,onResize:function(n){var e=n.width;T!==e&&k(e)}},function(n){var o=n.width;return w.createElement(F.Z,{layout:"flexbox",variant:"default",sx:{visibility:C().isEmpty(v.getState().columnSizing)?"hidden":"visible",height:452,width:o}},w.createElement(L.Z,null,v.getHeaderGroups().map(function(n){return w.createElement(B.Z,{key:n.id},w.createElement(W.Z,{sx:{width:"2x",pl:"3x",pr:0}}),n.headers.map(function(n){var e,o=ni({minWidth:n.column.columnDef.minSize,width:n.getSize()},n.column.columnDef.style);return n.column.getCanSort()&&(o=ni(ni({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:i}})),n.column.getIsSorted()&&(o=ni(ni({},o),{},{color:l.color.emphasis})),w.createElement(W.Z,nl({key:n.id,onClick:n.column.getToggleSortingHandler()},o),n.isPlaceholder?null:w.createElement(m.Z,{alignItems:"center"},(0,A.ie)(n.column.columnDef.header,n.getContext()),null!==(e=({asc:w.createElement(H.Z,{size:20,ml:"1x"}),desc:w.createElement(_.Z,{size:20,ml:"1x"})})[n.column.getIsSorted()])&&void 0!==e?e:null))}))})),w.createElement(V,{condition:!0,wrapper:function(n){return w.createElement(U.Z,{height:"100%",overflow:"visible"},n)}},w.createElement(Y.Z,null,v.getRowModel().rows.map(function(n){return w.createElement(nn,{key:n.id,item:function(){return{source:e.id,data:v.getSelectedRowModel().rows.map(function(n){return n.original.id})}}},function(e){var o=e.dragRef;e.isDragging;var t=n.getIsSelected();return w.createElement(B.Z,{"data-selected":(0,X.PB)(n.getIsSelected()),sx:{position:"relative",_hover:{backgroundColor:i},_selected:{backgroundColor:a}}},w.createElement(W.Z,{ref:o,sx:{width:"2x",pl:"3x",pr:0,zIndex:t?1:void 0}},w.createElement(G.Z,{alt:"draggable",as:no,sx:{cursor:"move",visibility:n.getIsSelected()?"visible":"hidden",width:"2x",height:"4x"}})),n.getVisibleCells().map(function(n){var e=ni({minWidth:n.column.columnDef.minSize,width:n.column.getSize()},n.column.columnDef.style);return w.createElement(W.Z,nl({key:n.id},e),(0,A.ie)(n.column.columnDef.cell,n.getContext()))}))})}))),w.createElement($.Z,{count:E,onPageChange:function(n){var e=Math.max((0,S.q9)(n)-1,0);v.setPageIndex(e)},onRowsPerPageChange:function(n){var e=Math.max((0,S.q9)(n),1);v.setPageSize(e)}}))})))},nb=o(53860),np=o(20325),nf=o(98827),nm=function(n){var e=n.isDisabled,o=n.isSelected,t=n.tabIndex,r=(0,p.Z)(),l=(0,nb.ZQ)(r,1)[0];return{backgroundColor:o?({dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"})[l]:void 0,color:e?({dark:"white:disabled",light:"black:disabled"})[l]:({dark:"white:primary",light:"black:primary"})[l],cursor:e?"not-allowed":"pointer",display:"flex",textDecoration:"none",alignItems:"center",outline:t<0?0:void 0,px:"3x",py:"2x",userSelect:"none",width:"100%",_hover:{backgroundColor:e?void 0:({dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"})[l]},_focusVisible:{outlineColor:({dark:"blue:60",light:"blue:60"})[l],outlineOffset:"-1h",outlineStyle:"solid",outlineWidth:"1h"}}},ng=function(n){var e=n.disabled,o=(0,p.Z)(),t=(0,nb.ZQ)(o,1)[0],r={dark:"white:disabled",light:"black:disabled"}[t];return{display:"inline-flex",color:e?r:({dark:"white:secondary",light:"black:secondary"})[t],_hover:{color:e?r:({dark:"white:primary",light:"black:primary"})[t]}}},nx=(0,w.createContext)(),nN=(0,w.createContext)(),ny=function(){if(!w.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,w.useContext)(nx)},nv=function(){if(!w.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,w.useContext)(nN)},nI=o(52903),nS=["onClick","onMouseDown","style"],nT=(0,w.forwardRef)(function(n,e){var o=(0,nf.Z)({props:n,name:"TreeItemContent"}),t=o.onClick,r=o.onMouseDown,l=o.style,d=(0,nb.Kd)(o,nS),i=(0,P.u)().sizes,a=ny().multiSelect,c=nv(),s=(0,nb.Zj)({},c),u=s.contentRef,h=s.isDisabled,b=s.isSelected,p=s.nodeDepth,f=s.select,m=s.selectRange,g=s.toggleSelection,N=(0,np.Z)(u,e),y=(0,w.useCallback)(function(n){var e=n.ctrlKey,o=n.metaKey,t=n.shiftKey;if(a&&t){m();return}if(a&&(e||o)){g();return}f()},[a,f,m,g]),v=(0,w.useCallback)(function(n){var e=n.ctrlKey,o=n.metaKey,t=n.shiftKey;(e||o||t||h)&&n.preventDefault()},[h]),I=(0,nb.Zj)({paddingLeft:"calc(".concat(p," * ").concat(i["6x"]," + ").concat(i["3x"],")")},l),S=nm({isDisabled:h,isSelected:b,tabIndex:-1});return(0,nI.tZ)(x.Z,(0,nb.Zj)((0,nb.Zj)({ref:N,onClick:(0,X.N)(t,y),onMouseDown:(0,X.N)(r,v),style:I,tabIndex:-1},S),d))});nT.displayName="TreeItemContent";var nC=o(83513),nw=["children","disabled","onClick"],nk=(0,w.forwardRef)(function(n,e){var o=(0,nf.Z)({props:n,name:"TreeItemToggle"}),t=o.children,r=o.disabled,l=o.onClick,d=(0,nb.Kd)(o,nw),i=nv(),a=i.isExpanded,c=i.toggleExpansion,s={display:"inline-flex",backgroundColor:"transparent"},u=(0,w.useCallback)(function(n){n.stopPropagation(),c()},[c]),h=function(){return(0,nb.Zj)((0,nb.Zj)({"aria-disabled":(0,X.Qm)(r),"aria-expanded":(0,X.Qm)(a),disabled:r,onClick:(0,X.N)(l,u),ref:e,role:"button",tabIndex:0},s),d)};return"function"==typeof t?t({getTreeItemToggleProps:h}):(0,nI.tZ)(nC.Z,(0,nb.Zj)((0,nb.Zj)({},h()),{},{children:t}))});nk.displayName="TreeItemToggle";var nE=o(45795),nj=o(83377),nD=o(33558),nZ=o(41759),nO=["appear","children","disabled","easing","style","timeout"],nA=function(n,e){var o={entering:function(n){return{transform:"rotate(90deg)"}},entered:function(n){return{transform:"rotate(90deg)"}},exiting:function(n){return{transform:"rotate(0deg)"}},exited:function(n){return{transform:"rotate(0deg)"}}}[n];return"function"==typeof o?o(e):o},nR={enter:nj.YU.easeOut,exit:nj.YU.easeOut},nP={enter:133,exit:Math.floor(93.1)},nM=(0,w.forwardRef)(function(n,e){var o=(0,nf.Z)({props:n,name:"TreeItemToggleIcon"}),t=o.appear,r=o.children,l=o.disabled,d=o.easing,i=void 0===d?nR:d,a=o.style,c=o.timeout,s=void 0===c?nP:c,u=(0,nb.Kd)(o,nO),h=nv(),b=(0,w.useRef)(null),p=(0,np.Z)(b,e),f=(0,S.pr)(null==h?void 0:h.isExpanded),m=ng({disabled:l});return(0,w.useEffect)(function(){if(f){var n=b.current;(0,nD.nq)(n)}},[f]),(0,nI.tZ)(nZ.ZP,(0,nb.Zj)((0,nb.Zj)({appear:void 0!==t&&t,in:f,nodeRef:b,timeout:s},u),{},{children:function(n,e){var o=f?(0,nj.c)({style:a,timeout:s,easing:i}):(0,nj.Zk)({style:a,timeout:s,easing:i}),t=(0,nj.zx)("transform",o),d=nA(n,{}),c=(0,nb.Zj)((0,nb.Zj)((0,nb.Zj)({},m),d),{},{"aria-disabled":(0,X.Qm)(l),transition:t});return"function"==typeof r?r(n,(0,nb.Zj)((0,nb.Zj)({},e),{},{ref:p,style:(0,nb.Zj)((0,nb.Zj)({},c),a)})):(0,nI.tZ)(x.Z,(0,nb.Zj)((0,nb.Zj)((0,nb.Zj)({ref:p},c),e),{},{style:a,children:null!=r?r:(0,nI.tZ)(nE.Z,{size:"4x"})}))}}))});nM.displayName="TreeItemToggleIcon";var nz=o(29088),nF=o(13409),nL=o(92307),nB=o.n(nL),nW=o(14594),nU=(0,w.createContext)(),nY=nB()(function(n){return(0,nb.Zj)({},n)}),nH=function(n,e){for(var o=0,t=n.length-1;o<=t;){var r=Math.floor((o+t)/2);if(n[r].element===e)return r;n[r].element.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_PRECEDING?t=r-1:o=r+1}return o},n_=function(n){var e=n.children,o=n.depth,t=n.id,r=(0,w.useState)([]),l=(0,nb.ZQ)(r,2),d=l[0],i=l[1],a=nY({descendants:d,depth:o,id:t,registerDescendant:(0,w.useCallback)(function(n){return i(function(e){if(0===e.length)return[{element:n,index:0}];var o,t=nH(e,n);return e[t]&&e[t].element===n?o=e:(o=e.slice()).splice(t,0,{element:n,index:t}),o.forEach(function(n,e){n.index=e}),o}),n},[]),unregisterDescendant:(0,w.useCallback)(function(n){i(function(e){return e.filter(function(e){return n!==e.element})})},[])});return(0,nI.tZ)(nU.Provider,{value:a,children:e})};n_.displayName="Descendant";var nG=o(25013),nX=o(68338),nK=function(n){var e=(0,w.useState)(),o=(0,nb.ZQ)(e,2)[1],t=(0,w.useContext)(nU),r=t.descendants,l=void 0===r?[]:r,d=t.depth,i=t.id,a=t.registerDescendant,c=void 0===a?X.ZT:a,s=t.unregisterDescendant,u=void 0===s?X.ZT:s,h=l.findIndex(function(e){return e.element===n}),b=(0,nG.Z)(l),p=l.some(function(n,e){return b&&b[e]&&b[e].element!==n.element});return(0,nX.Z)(function(){if(n)return c(n),function(){u(n)};o({})},[n,c,u,h,p]),{index:h,parentDepth:void 0===d?0:d,parentId:void 0===i?null:i}},n$=["TransitionComponent","TransitionProps","children","disabled","id","nodeId","render"],nV=nB()(function(n){return(0,nb.Zj)({},n)}),nQ=(0,w.forwardRef)(function(n,e){var o=(0,nf.Z)({props:n,name:"TreeItem"}),t=o.TransitionComponent,r=void 0===t?nW.Z:t,l=o.TransitionProps,d=o.children,i=o.disabled,a=o.id,c=o.nodeId,s=o.render,u=(0,nb.Kd)(o,n$),h=ny(),b=h.focusNode,p=h.getIsNodeDisabled,f=h.getIsNodeExpanded,m=h.getIsNodeFocused,g=h.getIsNodeSelected,N=h.registerNode,y=h.selectNode,v=h.selectRange,I=h.toggleSelection,T=h.toggleExpansion,C=h.treeId,k=h.unregisterNode,E=(0,w.useRef)(),j=(0,w.useState)(null),D=(0,nb.ZQ)(j,2),Z=D[0],O=D[1],A=(0,np.Z)(O,e),R=(0,w.useMemo)(function(){return(0,nF.Rw)(a)?C&&c?"".concat(C,"-").concat(c):null:a},[a,C,c]),P=nK(Z),M=P.index,z=P.parentDepth,F=P.parentId,L=(0,S.Nu)(z)+1,B=w.Children.toArray(d).filter(function(n){return(0,w.isValidElement)(n)||"string"==typeof n||"number"==typeof n}).length>0,W=!!p&&p(c),U=!!f&&f(c),Y=!!m&&m(c),H=!!g&&g(c);(0,w.useEffect)(function(){if("function"==typeof N&&"function"==typeof k&&-1!==M)return N({depth:L,focus:function(){requestAnimationFrame(function(){var n=E.current;n&&n.focus()})},id:c,idAttr:R,isDisabled:!!i,isExpandable:B,parentId:F}),function(){k(c)}},[N,k,M,L,c,R,i,B,F]);var _=(0,w.useCallback)(function(){var n=p(c),e=m(c);n||(e||b(c),y(c))},[c,p,m,b,y]),G=(0,w.useCallback)(function(){var n=p(c),e=m(c);n||(e||b(c),v({end:c}))},[c,p,m,b,v]),K=(0,w.useCallback)(function(){p(c)||T(c)},[c,p,T]),$=(0,w.useCallback)(function(){var n=p(c),e=m(c);n||(e||b(c),I(c))},[c,p,m,b,I]),V=nV({contentRef:E,isDisabled:W,isExpandable:B,isExpanded:U,isFocused:Y,isSelected:H,nodeId:c,nodeDepth:L,select:_,selectRange:G,toggleExpansion:K,toggleSelection:$});return(0,nI.tZ)(nN.Provider,{value:V,children:(0,nI.BX)(x.Z,(0,nb.Zj)((0,nb.Zj)((0,nb.Zj)({ref:A,"aria-disabled":(0,X.Qm)(W),"aria-expanded":(0,X.Qm)(U),"aria-selected":(0,X.Qm)(H),id:R,role:"treeitem"},{}),u),{},{children:[(0,X.Pu)(s,V),!!B&&(0,nI.tZ)(n_,{depth:L,id:c,children:(0,nI.tZ)(r,(0,nb.Zj)((0,nb.Zj)({appear:!1,in:U,role:"group",unmountOnExit:!0},l),{},{children:d}))})]}))})});nQ.displayName="TreeItem";var nJ=o(20655),nq=["defaultExpanded","defaultSelected","expanded","id","isSelectable","isUnselectable","multiSelect","onBlur","onFocus","onKeyDown","onNodeFocus","onNodeSelect","onNodeToggle","selected"],n0=nB()(function(n){return(0,nb.Zj)({},n)}),n1=(0,w.forwardRef)(function(n,e){var o=(0,nf.Z)({props:n,name:"Tree"}),t=o.defaultExpanded,r=o.defaultSelected,l=o.expanded,d=o.id,i=o.isSelectable,a=void 0!==i&&i,c=o.isUnselectable,s=void 0!==c&&c,u=o.multiSelect,h=void 0!==u&&u,b=o.onBlur,p=o.onFocus,f=o.onKeyDown,m=o.onNodeFocus,g=o.onNodeSelect,N=o.onNodeToggle,y=o.selected,v=(0,nb.Kd)(o,nq),T=(0,nJ.Z)(d),C=(0,w.useState)(null),k=(0,nb.ZQ)(C,2),E=k[0],j=k[1],D=(0,w.useState)((0,S.rY)(null!=l?l:void 0===t?[]:t)),Z=(0,nb.ZQ)(D,2),O=Z[0],A=Z[1],R=(0,w.useState)((0,S.rY)(null!=y?y:void 0===r?[]:r)),P=(0,nb.ZQ)(R,2),M=P[0],z=P[1],F=(0,I.Z)(function(){return new Map}),L=F.get(E)?F.get(E).idAttr:null,B=(0,w.useRef)(null),W=(0,w.useRef)(!1),U=(0,w.useRef)([]);(0,w.useEffect)(function(){void 0!==l&&A((0,S.rY)(l))},[l]),(0,w.useEffect)(function(){void 0!==y&&z((0,S.rY)(y))},[y]);var Y=(0,w.useCallback)(function(n){var e=F.get(n);if(!e)return!1;if(e.isDisabled)return!0;for(;!(0,nF.Rw)(e.parentId);)if((e=F.get(e.parentId)).isDisabled)return!0;return!1},[F]),H=(0,w.useCallback)(function(n){var e;return!!(null!==(e=F.get(n))&&void 0!==e&&e.isExpandable)},[F]),_=(0,w.useCallback)(function(n){return -1!==O.indexOf(n)},[O]),G=(0,w.useCallback)(function(n){return E===n},[E]),K=(0,w.useCallback)(function(n){return a&&!Y(n)},[Y,a]),$=(0,w.useCallback)(function(n){return -1!==M.indexOf(n)},[M]),V=(0,w.useCallback)(function(n){return Array.from(F.values()).filter(function(e){return e.parentId===n}).sort(function(n,e){return n.index-e.index}).map(function(n){return n.id})},[F]),Q=(0,w.useCallback)(function(n){return V(n).filter(function(n){return!Y(n)})},[V,Y]),J=(0,w.useCallback)(function(n){if(_(n)&&Q(n).length>0)return Q(n)[0];for(var e=F.get(n);!(0,nF.Rw)(e);){var o=Q(e.parentId),t=o[o.indexOf(e.id)+1];if(t)return t;e=F.get(e.parentId)}return null},[_,Q,F]),q=(0,w.useCallback)(function(n){var e=F.get(n),o=Q(e.parentId),t=o.indexOf(n);if(0===t)return e.parentId;for(var r=o[t-1];_(r)&&Q(r).length>0;)r=Q(r).pop();return r},[_,Q,F]),nn=(0,w.useCallback)(function(){return Q(null)[0]},[Q]),ne=(0,w.useCallback)(function(){for(var n=Q(null).pop();_(n);){var e=Q(n);if(0===e.length)break;n=e.pop()}return n},[_,Q]),no=(0,w.useCallback)(function(n){return F.get(n).parentId},[F]),nt=(0,w.useCallback)(function(n,e){if(n===e)return[n,e];var o=F.get(n),t=F.get(e);if(o.parentId===t.id||t.parentId===o.id)return t.parentId===o.id?[o.id,t.id]:[t.id,o.id];for(var r=[o.id],l=[t.id],d=o.parentId,i=t.parentId,a=-1!==l.indexOf(d),c=-1!==r.indexOf(i),s=!0,u=!0;!c&&!a;)s&&(r.push(d),a=-1!==l.indexOf(d),s=null!==d,!a&&s&&(d=F.get(d).parentId)),u&&!a&&(l.push(i),c=-1!==r.indexOf(i),u=null!==i,!c&&u&&(i=F.get(i).parentId));var h=a?d:i,b=V(h),p=r[r.indexOf(h)-1],f=l[l.indexOf(h)-1];return b.indexOf(p)<b.indexOf(f)?[n,e]:[e,n]},[V,F]),nr=(0,w.useCallback)(function(n,e){for(var o=nt(n,e),t=(0,nb.ZQ)(o,2),r=t[0],l=t[1],d=[r],i=r;i!==l;)d.push(i=J(i));return d},[nt,J]),nl=(0,w.useCallback)(function(n){n&&(j(n),F.get(n).focus(),"function"==typeof m&&m(n))},[F,m]),nd=(0,w.useCallback)(function(n){nl(J(n))},[nl,J]),ni=(0,w.useCallback)(function(n){nl(q(n))},[nl,q]),na=(0,w.useCallback)(function(n){nl(nn())},[nl,nn]),nc=(0,w.useCallback)(function(n){nl(ne())},[nl,ne]),ns=(0,w.useCallback)(function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:E,e=arguments.length>1?arguments[1]:void 0;if(!n||!H(n))return!1;var o=("boolean"==typeof e?e:!_(n))?O.concat(n):O.filter(function(e){return e!==n});return"function"==typeof N&&N(o),A(o),!0},[O,E,H,_,N]),nu=(0,w.useCallback)(function(n,e){if(!n||!K(n))return!1;var o=("boolean"==typeof e?e:!$(n))?M.concat(n):M.filter(function(e){return e!==n});return"function"==typeof g&&g(o),z(o),B.current=n,W.current=!1,U.current=[],!0},[K,$,g,M]),nh=(0,w.useCallback)(function(n){if(!n||!K(n))return!1;var e=s&&$(n)&&1===M.length?[]:[n];return"function"==typeof g&&g(e),z(e),B.current=n,W.current=!1,U.current=[],!0},[K,$,s,g,M]),np=(0,w.useCallback)(function(n){var e=n.start,o=void 0===e?B.current:e,t=n.current,r=n.end;if(!a||(0,nF.Rw)(o)||(0,nF.Rw)(r))return!1;if((0,nF.Rw)(t)){var l=W.current?M.filter(function(n){return -1===U.current.indexOf(n)}):M.slice(),d=nr(o,r).filter(function(n){return!Y(n)});U.current=d;var i=l.concat(d);i=i.filter(function(n,e){return i.indexOf(n)===e}),"function"==typeof g&&g(i),z(i)}else{var c=M.slice();-1===U.current.indexOf(t)&&(U.current=[]),W.current?-1!==U.current.indexOf(r)?(c=c.filter(function(n){return n===o||n!==t}),U.current=U.current.filter(function(n){return n===o||n!==t})):(c.push(r),U.current.push(r)):(c.push(r),U.current.push(t,r)),"function"==typeof g&&g(c),z(c)}return W.current=!0,!0},[Y,nr,a,g,M]),nm=(0,w.useCallback)(function(n){B.current||(B.current=n),np({start:W.current?B.current:n,end:nn()})},[nn,np]),ng=(0,w.useCallback)(function(n){B.current||(B.current=n),np({start:W.current?B.current:n,end:ne()})},[ne,np]),nN=(0,w.useCallback)(function(n){var e=J(n);Y(e)||np({start:B.current,current:n,end:e})},[Y,J,np]),ny=(0,w.useCallback)(function(n){var e=q(n);Y(e)||np({start:B.current,current:n,end:e})},[Y,q,np]),nv=(0,w.useCallback)(function(){np({start:nn(),end:ne()})},[nn,ne,np]),nS=(0,w.useCallback)(function(n){var e=n.id;return["focus","id","idAttr","isDisabled","isExpandable","parentId"].every(function(e){return Object.prototype.hasOwnProperty.call(n,e)})||console.error("Error: `nodeProps` is missing some required fields.",n),F.set(e,n),e},[F]),nT=(0,w.useCallback)(function(n){F.delete(n)},[F]),nC=n0({focusNode:nl,getIsNodeDisabled:Y,getIsNodeExpandable:H,getIsNodeExpanded:_,getIsNodeFocused:G,getIsNodeSelectable:K,getIsNodeSelected:$,isSelectable:a,multiSelect:h,nodeMap:F,registerNode:nS,selectNode:nh,selectRange:np,toggleExpansion:ns,toggleSelection:nu,treeId:T,unregisterNode:nT});return(0,nI.tZ)(nx.Provider,{value:nC,children:(0,nI.tZ)(n_,{depth:-1,children:(0,nI.tZ)(x.Z,(0,nb.Zj)((0,nb.Zj)({ref:e,"aria-activedescendant":L,"aria-multiselectable":(0,X.Qm)(h),id:T,role:"tree",onBlur:(0,X.N)(b,function(n){var e=n.relatedTarget;n.currentTarget&&n.currentTarget.contains(e)||j(null)}),onFocus:(0,X.N)(p,function(n){var e=n.target,o=n.relatedTarget;if(!(n.currentTarget!==e||n.currentTarget.contains(o))){var t=M[0];t?nl(t):na()}}),onKeyDown:(0,X.N)(f,function(n){var e=!1,o=n.key;if(!n.altKey&&E){var t=n.ctrlKey||n.metaKey,r=n.shiftKey;switch(o){case" ":Y(E)||(h&&r?(np({start:B.current,end:E}),e=!0):e=h?nu(E):nh(E)),n.stopPropagation();break;case"Enter":Y(E)||(H(E)?(ns(E),e=!0):e=h?nu(E):nh(E)),n.stopPropagation();break;case"ArrowDown":h&&r&&nN(E),nd(E),e=!0;break;case"ArrowUp":h&&r&&ny(E),ni(E),e=!0;break;case"ArrowRight":H(E)&&(_(E)?(nd(E),e=!0):Y(E)||(ns(E),e=!0));break;case"ArrowLeft":if(_(E)&&!Y(E))ns(E),e=!0;else{var l=no(E);l&&(nl(l),e=!0)}break;case"Home":h&&t&&r&&!Y(E)&&nm(E),na(),e=!0;break;case"End":h&&t&&r&&!Y(E)&&ng(E),nc(),e=!0;break;default:h&&t&&"a"===o.toLowerCase()&&(nv(),e=!0)}e&&(n.preventDefault(),n.stopPropagation())}}),tabIndex:0},{outline:0}),v))})})});n1.displayName="Tree";var n2=o(98484),n3=o(99727),n5=o(20103);function n4(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var n6=function(n){var e,o=n.accept,t=n.canDrop,r=n.children,l=n.onDrop,d=function(n){if(Array.isArray(n))return n}(e=(0,n5.L)({accept:void 0===o?"dnd":o,drop:l,canDrop:t,collect:function(n){return{isOver:n.isOver()}}}))||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{for(l=(o=o.call(n)).next;!(a=(t=l.call(o)).done)&&(i.push(t.value),2!==i.length);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(e,2)||function(n,e){if(n){if("string"==typeof n)return n4(n,2);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return n4(n,2)}}(e,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=d[0];return r({dropRef:d[1],isOver:i.isOver})};function n8(n){return(n8="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var n7=["data","onNodeDrop","onNodeSelect"];function n9(){return(n9=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function en(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),o.push.apply(o,t)}return o}function ee(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?en(Object(o),!0).forEach(function(e){var t,r;t=e,r=o[e],(t=function(n){var e=function(n,e){if("object"!==n8(n)||null===n)return n;var o=n[Symbol.toPrimitive];if(void 0!==o){var t=o.call(n,e||"default");if("object"!==n8(t))return t;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(n)}(n,"string");return"symbol"===n8(e)?e:String(e)}(t))in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):en(Object(o)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))})}return n}function eo(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var et=function n(e){var o,t=e.node,r=e.nodeDepth,l=void 0===r?0:r,d=e.onNodeDrop,i=(function(n){if(Array.isArray(n))return n}(o=(0,f.Z)())||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{for(l=(o=o.call(n)).next;!(a=(t=l.call(o)).done)&&(i.push(t.value),1!==i.length);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(o,1)||function(n,e){if(n){if("string"==typeof n)return eo(n,1);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eo(n,1)}}(o,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],a=t.id,c=t.label,s=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,r=o?n2.Z:n3.Z;return w.createElement(n6,{onDrop:function(n,e){"function"==typeof d&&d(ee(ee({},n),{},{target:a}))}},function(n){var o=n.dropRef,d=n.isOver;return w.createElement(nT,{ref:o,sx:{backgroundColor:d?i.background.highlighted:void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:i.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(nz.Z,{as:r,color:"yellow:50",mr:"2x"}),w.createElement(z.Z,{label:c},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,n9({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))})},[i,a,l,c,d]);return w.createElement(nQ,{nodeId:a,render:s},(0,S.rY)(t.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:l+1,onNodeDrop:d})}))},er=function(n){var e,o,t=n.data,r=n.onNodeDrop,l=n.onNodeSelect,d=function(n,e){if(null==n)return{};var o,t,r=function(n,e){if(null==n)return{};var o,t,r={},l=Object.keys(n);for(t=0;t<l.length;t++)o=l[t],e.indexOf(o)>=0||(r[o]=n[o]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(t=0;t<l.length;t++)o=l[t],!(e.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(n,o)&&(r[o]=n[o])}return r}(n,n7),i=null!==(e=null===(o=(0,S.rY)(t)[0])||void 0===o?void 0:o.id)&&void 0!==e?e:null,a=(0,w.useCallback)(function(n){"function"==typeof r&&r(n)},[r]),c=(0,w.useCallback)(function(n){"function"==typeof l&&l(n)},[l]);return w.createElement(n1,n9({"aria-label":"dnd",isSelectable:!0,isUnselectable:!1,defaultSelected:i,onNodeSelect:c},d),(0,S.rY)(t).map(function(n){return w.createElement(et,{key:n.id,node:n,onNodeDrop:a})}))},el=o(98533),ed=function(n){var e=n.children,o=(0,el.f)(function(n){return{isDragging:n.isDragging(),item:n.getItem(),itemType:n.getItemType(),initialSourceClientOffset:n.getInitialSourceClientOffset(),sourceClientOffset:n.getSourceClientOffset()}}),t=o.isDragging,r=o.initialSourceClientOffset,l=o.sourceClientOffset;if(!t||!r||!l)return null;var d=(0,S.Nu)(null==l?void 0:l.x),i=(0,S.Nu)(null==l?void 0:l.y);return w.createElement(x.Z,{sx:{pointerEvents:"none",position:"fixed",inset:0,zIndex:"fixed"}},w.createElement(x.Z,{style:{transform:"translate(".concat(d,"px, ").concat(i,"px)")}},"function"==typeof e?e(o):e))};function ei(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var ea=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,w.useState)())||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{for(l=(o=o.call(n)).next;!(a=(t=l.call(o)).done)&&(i.push(t.value),2!==i.length);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,2)||function(n,e){if(n){if("string"==typeof n)return ei(n,2);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ei(n,2)}}(n,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[1];return(0,w.useCallback)(function(){e({})},[])};function ec(n){return function(n){if(Array.isArray(n))return eh(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||eu(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function es(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||eu(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eu(n,e){if(n){if("string"==typeof n)return eh(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eh(n,e)}}function eh(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var eb=function(){var n=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],e=D();return!function e(o){(0,S.rY)(o).map(function(o){var t;o.parent=null!==(t=o.parent)&&void 0!==t?t:null,o.children=(0,S.rY)(o.children).map(function(n){return n.parent=o,n}),o.data={data:C().range(15).map(function(e){var t=es((0,S.rY)(String(o.label).match(/\d+/)),1)[0],r="Endpoint ".concat(void 0===t?"":t,"_").concat(e+1),l=C().sampleSize(n,C().random(0,n.length)),d=new Date(Date.now()-C().random(0,2592e6));return{id:"".concat(o.id,"_").concat(e+1),endpoint:r,detections:l,lastSeen:d}})},e(o.children)})}(e),e},ep=function(){var n,e,o,t=(0,I.Z)(function(){return eb()}),r=(0,w.useMemo)(function(){return Z(t)},[t]),l=ea(),d=es((0,w.useState)(!1),2),i=d[0],a=d[1],c=es((0,p.Z)(),1)[0],s=es((0,f.Z)(),1)[0],u={dark:"gray:50",light:"gray:50"}[c],h=(0,w.useRef)(),b=(0,w.useRef)(),T=es((0,w.useState)(null===(n=(0,S.rY)(t)[0])||void 0===n?void 0:n.id),2),j=T[0],D=T[1],O=null===(e=r.get(j))||void 0===e?void 0:null===(o=e.data)||void 0===o?void 0:o.data,A=(0,w.useCallback)(function(n){var e=n.source,o=n.target,t=n.data,d=r.get(e),i=r.get(o),a=d.data.data.filter(function(n){return C().includes(t,n.id)});d.data.data=C().differenceBy(d.data.data,a,"id"),i.data.data=C().uniqBy([].concat(ec((0,S.rY)(i.data.data)),ec(a)),"id"),l()},[l,r]),R=(0,w.useCallback)(function(n){D(n[0])},[]);return w.createElement(k.W,{backend:E.PD},w.createElement(ed,null,function(n){var e=n.item,o=(0,S.rY)(e.data).length;return w.createElement(m.Z,{alignItems:"center",columnGap:"1x"},w.createElement(v.Z,null),w.createElement(g.Z,null,o))}),w.createElement(m.Z,{ref:h,sx:{boxShadow:s.shadow.thick,cursor:i?"col-resize":"default"}},w.createElement(x.Z,{ref:b,sx:{flex:"none",width:300}},w.createElement(N.Z,{height:"100%",overflowX:"hidden",overflowY:"auto"},w.createElement(er,{data:t,onNodeDrop:A,onNodeSelect:R}))),w.createElement(m.Z,{sx:{flex:"auto",position:"relative"}},w.createElement(y.Z,{onResizeStart:function(){a(!0)},onResizeEnd:function(){a(!1)},onResize:function(n){var e=n.clientX,o=b.current;if(o){var t=h.current.getBoundingClientRect(),r=t.left,l=t.width;e-r>=160&&e-r<=.4*l&&(o.style.width="".concat(e-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:i?u:({dark:"gray:70",light:"gray:30"})[c],_hover:{borderLeftColor:u},zIndex:1}}),w.createElement(nh,{key:j,node:r.get(j),data:O,width:"100%"}))))},ef=o(42744);function em(){return(em=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function eg(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return ex(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ex(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ex(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var eN=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=eg((0,f.Z)(),1)[0],d=o.id,i=o.label,a=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(nz.Z,{as:d,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,em({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))},[l,r,i]);return w.createElement(nQ,{nodeId:d,render:a},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},ey=function(){var n,e=eg((0,p.Z)(),1)[0],o=eg((0,f.Z)(),1)[0],t=(0,I.Z)(function(){return D()}),r=(0,w.useMemo)(function(){return Z(t)},[t]),l=(0,w.useMemo)(function(){return O(t)},[t]),d=(0,w.useMemo)(function(){return Array.from(r.keys())},[r]),i=eg((0,w.useState)(d[0]),2),a=i[0],c=i[1],s=eg((0,w.useState)(!1),2),u=s[0],h=s[1],b=(0,w.useRef)(),g=(0,w.useRef)(),v={dark:"gray:50",light:"gray:50"}[e],T=(0,w.useCallback)(function(n){c(n[0])},[]);return w.createElement(m.Z,{ref:b,sx:{boxShadow:o.shadow.thick,cursor:u?"col-resize":"default"}},w.createElement(x.Z,{ref:g,sx:{flex:"none",width:300}},w.createElement(N.Z,{height:240,overflowX:"hidden",overflowY:"auto"},w.createElement(n1,{"aria-label":"resizable",defaultExpanded:l,isSelectable:!0,isUnselectable:!1,selected:a,onNodeSelect:T},(0,S.rY)(t).map(function(n){return w.createElement(eN,{key:n.id,node:n})})))),w.createElement(m.Z,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},w.createElement(y.Z,{onResizeStart:function(){h(!0)},onResizeEnd:function(){h(!1)},onResize:function(n){var e=n.clientX,o=g.current;if(o){var t=b.current.getBoundingClientRect(),r=t.left,l=t.width;e-r>=160&&e-r<=.4*l&&(o.style.width="".concat(e-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:u?v:({dark:"gray:70",light:"gray:30"})[e],_hover:{borderLeftColor:v}}}),w.createElement(x.Z,null,null===(n=r.get(a))||void 0===n?void 0:n.label)))},ev=o(35306);function eI(){return(eI=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function eS(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return eT(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eT(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eT(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var eC=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=eS((0,f.Z)(),1)[0],d=ny().getIsNodeExpanded,i=o.id,a=o.label,c=eS((0,w.useState)((0,S.rY)(o.children)),2),s=c[0],u=c[1],h=eS((0,w.useState)(!1),2),b=h[0],p=h[1],g=d(i),N=o.loadOnDemand&&0===s.length,y=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected;n.select;var d=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,b?w.createElement(ev.Z,{size:"xs"}):w.createElement(nM,null))),w.createElement(nz.Z,{as:d,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:a},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,eI({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),a)}))},[l,b,r,a]);return(0,w.useEffect)(function(){var n=null;return g&&N&&(p(!0),n=setTimeout(function(){var n=[{id:"".concat(i,".1"),label:"".concat(a,".1"),loadOnDemand:r<2},{id:"".concat(i,".2"),label:"".concat(a,".2")}];u(n),p(!1),o.children=n,o.loadOnDemand=!1},500)),function(){n&&clearTimeout(n)}},[g,N,o,i,a,r]),w.createElement(nQ,{nodeId:i,render:y},N?w.createElement(x.Z,{key:"stub"}):s.map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},ew=function(){var n=eS((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return Array.from({length:5},function(n,e){var o=e+1;return{id:"".concat(o),label:"Node ".concat(o),children:[],loadOnDemand:!0}})});return w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"load on demand",isSelectable:!0,isUnselectable:!0},(0,S.rY)(e).map(function(n){return w.createElement(eC,{key:n.id,node:n})}))))},ek=o(15192),eE=o(12226),ej=o(87888),eD=o(94829),eZ=o(53284),eO=o(17168);function eA(){return(eA=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function eR(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return eP(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eP(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eP(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var eM=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=eR((0,f.Z)(),1)[0],d=o.id,i=o.label,a=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(nz.Z,{as:d,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,eA({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}),w.createElement(m.Z,{flex:"none",ml:"2x"},w.createElement(ek.Z,null,w.createElement(eE.Z,{onClick:function(n){},sx:{color:l.color.secondary,":hover":{color:l.color.info}}},w.createElement(eZ.Z,null)),w.createElement(ej.Z,{width:"max-content"},w.createElement(eD.Z,null,w.createElement(m.Z,{alignItems:"center",columnGap:"2x"},w.createElement(eO.Z,null)," List item")),w.createElement(eD.Z,null,w.createElement(m.Z,{alignItems:"center",columnGap:"2x"},w.createElement(eO.Z,null)," List item"))))))},[l,r,i]);return w.createElement(nQ,{nodeId:d,render:a},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},ez=function(){var n=eR((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return D()}),o=(0,w.useMemo)(function(){return O(e)},[e]);return w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"dropdown",defaultExpanded:o,isSelectable:!0,isUnselectable:!0},(0,S.rY)(e).map(function(n){return w.createElement(eM,{key:n.id,node:n})}))))},eF=o(39256),eL=o(62080),eB=o(72448),eW=o(61619),eU=o(70758);function eY(){return(eY=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function eH(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return e_(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return e_(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e_(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var eG=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=eH((0,f.Z)(),1)[0],d=o.id,i=o.label,a=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=n.select,a=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{backgroundColor:t?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(m.Z,{onClick:function(n){n.stopPropagation()},mr:"2x"},w.createElement(M.Z,{checked:t,onChange:function(){d()}})),w.createElement(nz.Z,{as:a,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,eY({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))},[l,r,i]);return w.createElement(nQ,{nodeId:d,render:a},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},eX=function(){var n=eH((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return D()}),o=(0,w.useMemo)(function(){return Z(e)},[e]),t=(0,w.useMemo)(function(){return O(e)},[e]),r=(0,w.useMemo)(function(){return Array.from(o.keys())},[o]),l=eH((0,w.useState)([]),2),d=l[0],i=l[1],a=eH((0,w.useState)([]),2),c=a[0],s=a[1],u=(0,w.useCallback)(function(n){i(n)},[]),h=(0,w.useCallback)(function(n){s(n)},[]),b=(0,w.useCallback)(function(n){i(t)},[t]),p=(0,w.useCallback)(function(n){i([])},[]),y=(0,w.useCallback)(function(n){s(r)},[r]),v=(0,w.useCallback)(function(n){s([])},[]);return w.createElement(w.Fragment,null,w.createElement(eF.Z,{variant:"secondary",columnGap:"2x",mb:"4x"},w.createElement(eL.Z,{variant:"secondary",disabled:d.length===t.length,onClick:b},"Expand all"),w.createElement(eL.Z,{variant:"secondary",disabled:0===d.length,onClick:p},"Collapse all"),w.createElement(eL.Z,{variant:"secondary",disabled:c.length===r.length,onClick:y},"Select all"),w.createElement(eL.Z,{variant:"secondary",disabled:0===c.length,onClick:v},"Unselect all")),w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"controlled",isSelectable:!0,isUnselectable:!0,multiSelect:!0,expanded:d,selected:c,onNodeToggle:u,onNodeSelect:h},(0,S.rY)(e).map(function(n){return w.createElement(eG,{key:n.id,node:n})})))),w.createElement(eB.Z,{my:"4x"}),w.createElement(eW.Z,null,w.createElement(m.Z,{alignItems:"flex-start",columnGap:"2x"},w.createElement(eU.Z,{whiteSpace:"nowrap"},"Expanded nodes:"),w.createElement(m.Z,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},d.map(function(n){var e;return w.createElement(g.Z,{key:n,whiteSpace:"nowrap"},null===(e=o.get(n))||void 0===e?void 0:e.label)}))),w.createElement(m.Z,{alignItems:"flex-start",columnGap:"2x"},w.createElement(eU.Z,{whiteSpace:"nowrap"},"Selected nodes:"),w.createElement(m.Z,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},c.map(function(n){var e;return w.createElement(g.Z,{key:n,whiteSpace:"nowrap"},null===(e=o.get(n))||void 0===e?void 0:e.label)})))))};function eK(){return(eK=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function e$(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return eV(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eV(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eV(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var eQ=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=e$((0,f.Z)(),1)[0],d=o.id,i=o.label,a=ny().multiSelect,c=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=n.select,c=n.selectRange,s=n.toggleSelection,u=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{backgroundColor:t?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}},onClick:function(n){n.preventDefault();var e=n.ctrlKey,o=n.metaKey,t=n.shiftKey;if(a&&t){c();return}if(a&&(e||o)){s();return}a?s():d()}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(m.Z,{mr:"2x"},w.createElement(M.Z,{checked:t,onChange:function(n){n.preventDefault(),s()}})),w.createElement(nz.Z,{as:u,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,eK({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))},[l,a,r,i]);return w.createElement(nQ,{nodeId:d,render:c},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},eJ=function(){var n=e$((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return D()}),o=(0,w.useMemo)(function(){return O(e)},[e]);return w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"multi-selection with checkboxes",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,S.rY)(e).map(function(n){return w.createElement(eQ,{key:n.id,node:n})}))))};function eq(){return(eq=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function e0(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return e1(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return e1(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e1(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var e2=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=e0((0,f.Z)(),1)[0],d=o.id,i=o.label,a=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=n.select,a=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{backgroundColor:t?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(m.Z,{onClick:function(n){n.stopPropagation()},mr:"2x"},w.createElement(M.Z,{checked:t,onChange:function(){d()}})),w.createElement(nz.Z,{as:a,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,eq({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))},[l,r,i]);return w.createElement(nQ,{nodeId:d,render:a},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},e3=function(){var n=e0((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return D()}),o=(0,w.useMemo)(function(){return O(e)},[e]);return w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"multi-selection with checkboxes",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,S.rY)(e).map(function(n){return w.createElement(e2,{key:n.id,node:n})}))))};function e5(){return(e5=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function e4(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return e6(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return e6(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e6(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var e8=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=e4((0,f.Z)(),1)[0],d=o.id,i=o.label,a=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(nz.Z,{as:d,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,e5({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))},[l,r,i]);return w.createElement(nQ,{nodeId:d,render:a},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},e7=function(){var n=e4((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return D()}),o=(0,w.useMemo)(function(){return O(e)},[e]);return w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"multi-selection",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,S.rY)(e).map(function(n){return w.createElement(e8,{key:n.id,node:n})}))))};function e9(){return(e9=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function on(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return oe(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return oe(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function oe(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var oo=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=on((0,f.Z)(),1)[0],d=o.id,i=o.label,a=(0,w.useCallback)(function(n){var e=n.isExpandable,o=n.isExpanded,t=n.isSelected,d=e?o?n2.Z:n3.Z:ef.Z;return w.createElement(nT,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:l.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(nz.Z,{as:d,color:e?"yellow:50":"currentColor",mr:"2x"}),w.createElement(z.Z,{label:i},function(n){var e=n.ref,o=n.style;return w.createElement(x.Z,e9({ref:e},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))},[l,r,i]);return w.createElement(nQ,{nodeId:d,render:a},(0,S.rY)(o.children).map(function(e){return w.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},ot=function(){var n=on((0,f.Z)(),1)[0],e=(0,I.Z)(function(){return D()}),o=(0,w.useMemo)(function(){return O(e)},[e]);return w.createElement(x.Z,{sx:{boxShadow:n.shadow.thick}},w.createElement(N.Z,{height:240,overflowY:"auto"},w.createElement(n1,{"aria-label":"basic tree",defaultExpanded:o,isSelectable:!0,isUnselectable:!0},(0,S.rY)(e).map(function(n){return w.createElement(oo,{key:n.id,node:n})}))))},or=function(){return w.createElement(n1,{defaultExpanded:["1"]},w.createElement(nQ,{nodeId:"1",render:function(n){var e=n.isExpandable;return w.createElement(nT,null,w.createElement(m.Z,{flex:"none",width:"6x"},e&&w.createElement(nk,null,w.createElement(nM,null))),w.createElement(eU.Z,null,"Node 1"))}},w.createElement(nQ,{nodeId:"1.1",render:function(){return w.createElement(nT,null,w.createElement(m.Z,{flex:"none",width:"6x"}),w.createElement(eU.Z,null,"Node 1.1"))}})),w.createElement(nQ,{nodeId:"2",render:function(){return w.createElement(nT,null,w.createElement(m.Z,{flex:"none",width:"6x"}),w.createElement(eU.Z,null,"Node 2"))}}))};function ol(n){var e=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,h.ah)(),n.components);return(0,u.jsxs)(e.div,{className:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,u.jsx)(e.h1,{id:"tree",children:"Tree"}),"\n",(0,u.jsxs)(e.p,{children:["The ",(0,u.jsx)(e.code,{children:"Tree"})," component allows you to present information in a hierarchical, nested list format. It is particularly useful for visualizing structures like files and folders in a file system, categories and items in a list, or any other kind of nested arrangement that requires exploration."]}),"\n",(0,u.jsxs)(e.h2,{id:"import",children:["Import",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(e.pre,{children:(0,u.jsx)(e.code,{className:"language-js",children:"import {\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  useTree,\n  useTreeItem,\n} from '@tonic-ui/react';\n"})}),"\n",(0,u.jsxs)(e.h2,{id:"usage",children:["Usage",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.h3,{id:"basic-tree",children:["Basic tree",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.p,{children:["To render a tree, you'll need to use the ",(0,u.jsx)(e.code,{children:"Tree"})," component along with one or more ",(0,u.jsx)(e.code,{children:"TreeItem"})," components as its children. You can nest ",(0,u.jsx)(e.code,{children:"TreeItem"})," components to create a tree structure."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:or,file:{data:'import {\n  Flex,\n  Text,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <Tree defaultExpanded={[\'1\']}>\n      <TreeItem\n        nodeId="1"\n        render={({ isExpandable }) => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x">\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Text>Node 1</Text>\n          </TreeItemContent>\n        )}\n      >\n        <TreeItem\n          nodeId="1.1"\n          render={() => (\n            <TreeItemContent>\n              <Flex flex="none" width="6x" />\n              <Text>Node 1.1</Text>\n            </TreeItemContent>\n          )}\n        />\n      </TreeItem>\n      <TreeItem\n        nodeId="2"\n        render={() => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x" />\n            <Text>Node 2</Text>\n          </TreeItemContent>\n        )}\n      />\n    </Tree>\n  );\n};\n\nexport default App;',path:"pages/components/tree/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Flex,\n  Text,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <Tree defaultExpanded={[\'1\']}>\n      <TreeItem\n        nodeId="1"\n        render={({ isExpandable }) => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x">\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Text>Node 1</Text>\n          </TreeItemContent>\n        )}\n      >\n        <TreeItem\n          nodeId="1.1"\n          render={() => (\n            <TreeItemContent>\n              <Flex flex="none" width="6x" />\n              <Text>Node 1.1</Text>\n            </TreeItemContent>\n          )}\n        />\n      </TreeItem>\n      <TreeItem\n        nodeId="2"\n        render={() => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x" />\n            <Text>Node 2</Text>\n          </TreeItemContent>\n        )}\n      />\n    </Tree>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.p,{children:["The ",(0,u.jsx)(e.code,{children:"TreeItem"})," component requires two props: ",(0,u.jsx)(e.code,{children:"nodeId"})," and ",(0,u.jsx)(e.code,{children:"render"}),"."]}),"\n",(0,u.jsx)(e.pre,{disabled:!0,children:(0,u.jsx)(e.code,{className:"language-jsx",children:"<TreeItem nodeId={nodeId} render={render} />\n"})}),"\n",(0,u.jsxs)(e.ul,{children:["\n",(0,u.jsxs)(e.li,{children:["The ",(0,u.jsx)(e.code,{children:"nodeId"})," prop accepts a string value that uniquely identifies the node. This prop is required for the tree to work properly."]}),"\n",(0,u.jsxs)(e.li,{children:["The ",(0,u.jsx)(e.code,{children:"render"})," prop is a function that returns a React element. It receives an object with properties like ",(0,u.jsx)(e.code,{children:"nodeDepth"}),", ",(0,u.jsx)(e.code,{children:"nodeId"}),", ",(0,u.jsx)(e.code,{children:"isDisabled"}),", ",(0,u.jsx)(e.code,{children:"isExpandable"}),", ",(0,u.jsx)(e.code,{children:"isExpanded"}),", ",(0,u.jsx)(e.code,{children:"isFocused"}),", ",(0,u.jsx)(e.code,{children:"isSelected"}),", and various functions for interacting with the node."]}),"\n"]}),"\n",(0,u.jsxs)(e.p,{children:["In the render function, you can use the provided ",(0,u.jsx)(e.code,{children:"TreeItemContent"}),", ",(0,u.jsx)(e.code,{children:"TreeItemToggle"}),", and ",(0,u.jsx)(e.code,{children:"TreeItemToggleIcon"})," components to structure the content of the tree node."]}),"\n",(0,u.jsx)(e.p,{children:"Here is the recommended structure for rendering a tree node:"}),"\n",(0,u.jsx)(e.pre,{disabled:!0,children:(0,u.jsx)(e.code,{className:"language-jsx",children:'function render({ isExpanded }) {\n  return (\n    <TreeItemContent>\n      <Flex flex="none" width="6x">\n        {isExpandable && (\n          <TreeItemToggle>\n            <TreeItemToggleIcon />\n          </TreeItemToggle>\n        )}\n      </Flex>\n      <OverflowTooltip label="Node label">\n        Node label\n      </OverflowTooltip>\n    </TreeItemContent>\n  );\n}\n'})}),"\n",(0,u.jsxs)(e.h3,{id:"selection",children:["Selection",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#selection",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.p,{children:["You can enable node selection and unselection by setting the ",(0,u.jsx)(e.code,{children:"isSelectable"})," and ",(0,u.jsx)(e.code,{children:"isUnselectable"})," props to ",(0,u.jsx)(e.code,{children:"true"}),"."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:ot,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n          </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"basic tree\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n          </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"basic tree\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h3,{id:"multi-selection",children:["Multi-selection",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.p,{children:["To enable the selection of multiple nodes, use the ",(0,u.jsx)(e.code,{children:"multiSelect"})," prop. You can use keyboard shortcuts for efficient navigation and selection."]}),"\n",(0,u.jsxs)(e.ul,{children:["\n",(0,u.jsx)(e.li,{children:"Use arrow keys to navigate between nodes."}),"\n",(0,u.jsxs)(e.li,{children:["Press the ",(0,u.jsx)(e.code,{children:"Space"})," key to toggle the selection of a node."]}),"\n",(0,u.jsxs)(e.li,{children:["Hold down ",(0,u.jsx)(e.code,{children:"Ctrl"})," and click to select/unselect nodes."]}),"\n",(0,u.jsxs)(e.li,{children:["Hold down ",(0,u.jsx)(e.code,{children:"Shift"})," and click to select a range of nodes."]}),"\n"]}),"\n",(0,u.jsxs)(e.p,{children:["Refer to the ",(0,u.jsx)(e.a,{href:"#accessibility",children:"Accessibility"})," section for more keyboard shortcuts."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:e7,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsx)(e.p,{children:"For checkboxes used in multi-selection, consider enhancing accessibility by adjusting the background color when the checkbox is selected."}),"\n",(0,u.jsx)(e.pre,{disabled:!0,children:(0,u.jsx)(e.code,{className:"language-jsx",children:"const render = ({ isExpanded, isSelected }) => {\n  return (\n    <TreeItemContent\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        backgroundColor: isSelected ? 'transparent' : undefined,\n      }}\n    >\n      {/* ... */}\n    </TreeItemContent>\n  );\n};\n"})}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:e3,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.p,{children:["If you prefer to customize the selection behavior yourself, you can attach an ",(0,u.jsx)(e.code,{children:"onClick"})," event handler to ",(0,u.jsx)(e.code,{children:"TreeItemContent"})," as demonstrated below:"]}),"\n",(0,u.jsx)(e.pre,{children:(0,u.jsx)(e.code,{className:"language-js",children:"onClick={(event) => {\n  // Prevent default event handler to manage tree item selection\n  event.preventDefault();\n\n  const isCtrlPressed = event.ctrlKey;\n  const isMetaPressed = event.metaKey;\n  const isShiftPressed = event.shiftKey;\n\n  if (multiSelect && isShiftPressed) {\n    selectRange();\n    return;\n  }\n\n  if (multiSelect && (isCtrlPressed || isMetaPressed)) {\n    toggleSelection();\n    return;\n  }\n\n  if (multiSelect) {\n    toggleSelection();\n  } else {\n    select();\n  }\n}}\n"})}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:eJ,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const { multiSelect } = useTree();\n\n  const render = useCallback(({\n    isExpandable,\n    isExpanded,\n    isSelected,\n    select,\n    selectRange,\n    toggleSelection,\n  }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n        onClick={(event) => {\n          // Prevent default event handler to manage tree item selection\n          event.preventDefault();\n\n          const isCtrlPressed = event.ctrlKey;\n          const isMetaPressed = event.metaKey;\n          const isShiftPressed = event.shiftKey;\n\n          if (multiSelect && isShiftPressed) {\n            selectRange();\n            return;\n          }\n\n          if (multiSelect && (isCtrlPressed || isMetaPressed)) {\n            toggleSelection();\n            return;\n          }\n\n          if (multiSelect) {\n            toggleSelection();\n          } else {\n            select();\n          }\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={event => {\n              // Prevent default event handler to manage tree item selection\n              event.preventDefault();\n\n              toggleSelection();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, multiSelect, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const { multiSelect } = useTree();\n\n  const render = useCallback(({\n    isExpandable,\n    isExpanded,\n    isSelected,\n    select,\n    selectRange,\n    toggleSelection,\n  }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n        onClick={(event) => {\n          // Prevent default event handler to manage tree item selection\n          event.preventDefault();\n\n          const isCtrlPressed = event.ctrlKey;\n          const isMetaPressed = event.metaKey;\n          const isShiftPressed = event.shiftKey;\n\n          if (multiSelect && isShiftPressed) {\n            selectRange();\n            return;\n          }\n\n          if (multiSelect && (isCtrlPressed || isMetaPressed)) {\n            toggleSelection();\n            return;\n          }\n\n          if (multiSelect) {\n            toggleSelection();\n          } else {\n            select();\n          }\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={event => {\n              // Prevent default event handler to manage tree item selection\n              event.preventDefault();\n\n              toggleSelection();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, multiSelect, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h3,{id:"controlled",children:["Controlled",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:eX,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Icon,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useConst,\n} from \'@tonic-ui/react-hooks\';\nimport { FolderIcon, FolderOpenIcon, ServerIcon } from \'@tonic-ui/react-icons\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? \'transparent\' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          \':hover + [role="group"]\': {\n            position: \'relative\',\n            \'::before\': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: \'""\',\n              position: \'absolute\',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex="none"\n          width="6x"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr="2x"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr="2x" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex="auto"\n              fontWeight={isSelected ? \'semibold\' : \'normal\'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [expandedNodeIds, setExpandedNodeIds] = useState([]);\n  const [selectedNodeIds, setSelectedNodeIds] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodeIds(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodeIds(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodeIds(expandableNodeIds);\n  }, [expandableNodeIds]);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodeIds([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodeIds(allNodes);\n  }, [allNodes]);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodeIds([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          //minWidth: 160,\n          //maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <Tree\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expanded={expandedNodeIds}\n            selected={selectedNodeIds}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Icon,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useConst,\n} from \'@tonic-ui/react-hooks\';\nimport { FolderIcon, FolderOpenIcon, ServerIcon } from \'@tonic-ui/react-icons\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree/utils\';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? \'transparent\' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          \':hover + [role="group"]\': {\n            position: \'relative\',\n            \'::before\': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: \'""\',\n              position: \'absolute\',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex="none"\n          width="6x"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr="2x"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr="2x" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex="auto"\n              fontWeight={isSelected ? \'semibold\' : \'normal\'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [expandedNodeIds, setExpandedNodeIds] = useState([]);\n  const [selectedNodeIds, setSelectedNodeIds] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodeIds(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodeIds(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodeIds(expandableNodeIds);\n  }, [expandableNodeIds]);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodeIds([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodeIds(allNodes);\n  }, [allNodes]);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodeIds([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          //minWidth: 160,\n          //maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <Tree\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expanded={expandedNodeIds}\n            selected={selectedNodeIds}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h3,{id:"dropdown",children:["Dropdown",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#dropdown",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:ez,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  EditIcon,\n  FolderIcon,\n  FolderOpenIcon,\n  MoreIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n        <Flex\n          flex=\"none\"\n          ml=\"2x\"\n        >\n          <Menu>\n            <MenuToggle\n              onClick={(event) => {\n                // Uncomment the following line to prevent the tree node from being selected\n                //event.stopPropagation();\n              }}\n              sx={{\n                color: colorStyle.color.secondary,\n                ':hover': {\n                  color: colorStyle.color.info,\n                },\n              }}\n            >\n              <MoreIcon />\n            </MenuToggle>\n            <MenuList\n              width=\"max-content\"\n            >\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </Flex>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"dropdown\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  EditIcon,\n  FolderIcon,\n  FolderOpenIcon,\n  MoreIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n        <Flex\n          flex=\"none\"\n          ml=\"2x\"\n        >\n          <Menu>\n            <MenuToggle\n              onClick={(event) => {\n                // Uncomment the following line to prevent the tree node from being selected\n                //event.stopPropagation();\n              }}\n              sx={{\n                color: colorStyle.color.secondary,\n                ':hover': {\n                  color: colorStyle.color.info,\n                },\n              }}\n            >\n              <MoreIcon />\n            </MenuToggle>\n            <MenuList\n              width=\"max-content\"\n            >\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </Flex>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"dropdown\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h3,{id:"load-on-demand",children:["Load on demand",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#load-on-demand",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:ew,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst buildLoadOnDemandTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      label: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTree();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, isLoading, nodeDepth, nodeLabel]);\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            label: `${nodeLabel}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            label: `${nodeLabel}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeLabel, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildLoadOnDemandTreeNodes(5));\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst buildLoadOnDemandTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      label: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTree();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, isLoading, nodeDepth, nodeLabel]);\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            label: `${nodeLabel}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            label: `${nodeLabel}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeLabel, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildLoadOnDemandTreeNodes(5));\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h3,{id:"resizable",children:["Resizable",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.p,{children:["You can resize the tree with a minimum width of ",(0,u.jsx)(e.code,{children:"160px"})," and a maximum width of ",(0,u.jsx)(e.code,{children:"40%"})," of the display area to match your design and layout requirements."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:ey,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [selectedNodeId, setSelectedNodeId] = useState(allNodes[0]);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n\n  const handleSelect = useCallback((nodeIds) => {\n    const nodeId = nodeIds[0];\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <Tree\n            aria-label=\"resizable\"\n            defaultExpanded={expandableNodeIds}\n            isSelectable\n            isUnselectable={false}\n            selected={selectedNodeId}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodeId)?.label}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [selectedNodeId, setSelectedNodeId] = useState(allNodes[0]);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n\n  const handleSelect = useCallback((nodeIds) => {\n    const nodeId = nodeIds[0];\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <Tree\n            aria-label=\"resizable\"\n            defaultExpanded={expandableNodeIds}\n            isSelectable\n            isUnselectable={false}\n            selected={selectedNodeId}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodeId)?.label}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h3,{id:"moving-items-via-drag-and-drop-dnd",children:["Moving items via Drag and Drop (DnD)",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#moving-items-via-drag-and-drop-dnd",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(e.p,{children:"Select items and move them to a tree node using drag-and-drop (DnD) interaction."}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:ep,file:{data:"import { Box, Code, Flex, ResizeHandle, Scrollbar, useColorMode, useColorStyle } from '@tonic-ui/react';\nimport { FileArrowOIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n} from '../utils';\nimport TableView from './TableView';\nimport TreeView from './TreeView';\nimport DragLayer from './DragLayer';\nimport useRefresh from './useRefresh';\n\nconst getTreeNodes = () => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.label).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = buildTreeNodes();\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => getTreeNodes());\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, [refresh, treeMap]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DragLayer>\n        {({ item }) => {\n          // Drag layer is not rendered when nothing is being dragged\n          const movedItemCount = ensureArray(item.data).length;\n          return (\n            <Flex alignItems=\"center\" columnGap=\"1x\">\n              <FileArrowOIcon />\n              <Code>{movedItemCount}</Code>\n            </Flex>\n          );\n        }}\n      </DragLayer>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <TreeView\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <TableView\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree/dnd/TableView.js":"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  OverflowTooltip,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { SVGIcon, SortUpIcon, SortDownIcon } from '@tonic-ui/react-icons';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport TablePagination from '@/components/TablePagination';\nimport ConditionalWrapper from '@/pages/components/tree/dnd/ConditionalWrapper';\nimport Draggable from '@/pages/components/tree/dnd/Draggable';\nimport DragIcon from '@/pages/components/tree/dnd/icons/drag.svg';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst Component = ({\n  node,\n  data,\n  ...rest\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const theme = useTheme();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const nodeLabel = node.label;\n\n  const [sorting, setSorting] = useState([\n    { id: 'endpoint', desc: false },\n  ]);\n\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 40,\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Endpoint\">\n          Endpoint\n        </OverflowTooltip>\n      ),\n      accessorKey: 'endpoint',\n      cell: ({ getValue, row }) => {\n        const value = getValue();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Detections\">\n          Detections\n        </OverflowTooltip>\n      ),\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        const value = detections.length;\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Last Seen\">\n          Last Seen\n        </OverflowTooltip>\n      ),\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        const value = getValue().toISOString();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n  ], []);\n\n  const table = useReactTable({\n    data: ensureArray(data),\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      rowSelection,\n      sorting,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval: true, // Enables/Disables the ability to remove sorting for the table\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    table.resetRowSelection();\n    table.resetPagination();\n  }, [data, table]);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n    const resizerWidth = 12; // Width of the resizer element between the tree and the table\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize - resizerWidth;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const isTableScrollingEnabled = layout !== 'table';\n  const totalCount = table.getCoreRowModel().rows.length;\n  const getTableHeight = () => {\n    if (isTableScrollingEnabled) {\n      const headerHeight = 36;\n      const cellHeight = 36;\n      const footerHeight = 56;\n      const rowsToDisplay = 10;\n      return (headerHeight + rowsToDisplay * cellHeight + footerHeight);\n    }\n    return 'auto';\n  };\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      {...rest}\n    >\n      <Box flex=\"none\" px=\"3x\" py=\"2x\">\n        {nodeLabel}\n      </Box>\n      <Box flex=\"auto\">\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              variant={variant}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n                height: getTableHeight(),\n                width,\n              }}\n            >\n              <TableHeader>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableRow\n                    key={headerGroup.id}\n                  >\n                    <TableCell\n                      sx={{\n                        width: '2x',\n                        pl: '3x',\n                        pr: 0,\n                      }}\n                    />\n                   {headerGroup.headers.map(header => {\n                      let styleProps = {\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        ...header.column.columnDef.style,\n                      };\n                      if (header.column.getCanSort()) {\n                        styleProps = {\n                          ...styleProps,\n                          cursor: 'pointer',\n                          userSelect: 'none',\n                          _hover: {\n                            backgroundColor: hoverBackgroundColor,\n                          },\n                        };\n                      }\n                      if (header.column.getIsSorted()) {\n                        styleProps = {\n                          ...styleProps,\n                          color: colorStyle.color.emphasis,\n                        };\n                      }\n\n                      return (\n                        <TableCell\n                          key={header.id}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...styleProps}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Flex alignItems=\"center\">\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                              {{\n                                asc: (<SortUpIcon size={20} ml=\"1x\" />),\n                                desc: (<SortDownIcon size={20} ml=\"1x\" />),\n                              }[header.column.getIsSorted()] ?? null}\n                            </Flex>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableHeader>\n              <ConditionalWrapper\n                condition={isTableScrollingEnabled}\n                wrapper={children => (\n                  <TableScrollbar\n                    height=\"100%\"\n                    overflow=\"visible\" // Make the scrollbar visible\n                  >\n                    {children}\n                  </TableScrollbar>\n                )}\n              >\n                <TableBody>\n                  {table.getRowModel().rows.map(row => {\n                    return (\n                      <Draggable\n                        key={row.id}\n                        item={() => {\n                          const sourceNodeId = node.id;\n                          const selectedRows = table.getSelectedRowModel().rows;\n                          const rowIds = selectedRows.map(row => row.original.id);\n\n                          return {\n                            source: sourceNodeId,\n                            data: rowIds,\n                          };\n                        }}\n                      >\n                        {({ dragRef, isDragging }) => {\n                          const canDrag = row.getIsSelected();\n\n                          return (\n                            <TableRow\n                              data-selected={dataAttr(row.getIsSelected())}\n                              sx={{\n                                position: 'relative',\n                                _hover: {\n                                  backgroundColor: hoverBackgroundColor,\n                                },\n                                _selected: {\n                                  backgroundColor: selectedBackgroundColor,\n                                },\n                              }}\n                            >\n                              <TableCell\n                                ref={dragRef}\n                                sx={{\n                                  width: '2x',\n                                  pl: '3x',\n                                  pr: 0,\n                                  zIndex: canDrag ? 1 : undefined,\n                                }}\n                              >\n                                <SVGIcon\n                                  alt=\"draggable\"\n                                  as={DragIcon}\n                                  sx={{\n                                    cursor: 'move',\n                                    visibility: row.getIsSelected() ? 'visible' : 'hidden',\n                                    width: '2x',\n                                    height: '4x',\n                                  }}\n                                />\n                              </TableCell>\n                              {row.getVisibleCells().map(cell => {\n                                const styleProps = {\n                                  minWidth: cell.column.columnDef.minSize,\n                                  width: cell.column.getSize(),\n                                  ...cell.column.columnDef.style,\n                                };\n                                return (\n                                  <TableCell\n                                    key={cell.id}\n                                    {...styleProps}\n                                  >\n                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                                  </TableCell>\n                                );\n                              })}\n                            </TableRow>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n                </TableBody>\n              </ConditionalWrapper>\n              <TablePagination\n                count={totalCount}\n                onPageChange={(nextPage) => {\n                  const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n                  table.setPageIndex(pageIndex);\n                }}\n                onRowsPerPageChange={(nextRowsPerPage) => {\n                  const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n                  table.setPageSize(pageSize);\n                }}\n              />\n            </Table>\n          )}\n        </AutoSizer>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Component;","src/components/TablePagination.js":'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  AngleLeftIcon,\n  AngleRightIcon,\n} from \'@tonic-ui/react-icons\';\nimport { ensureArray, ensureFiniteNumber } from \'ensure-type\';\nimport React, { useCallback, useEffect, useState } from \'react\';\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === \'function\') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === \'function\') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureFiniteNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureFiniteNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems="center"\n      justifyContent="flex-end"\n      backgroundColor={colorStyle.background.secondary}\n      px="6x"\n      py="3x"\n    >\n      <Text mr="2x">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Menu>\n        <MenuButton variant="ghost">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width="100%"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Space width="2x" />\n      <Input\n        width="10x"\n        px={0}\n        textAlign="center"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width="2x" />\n      <Text>/</Text>\n      <Space width="2x" />\n      <Text>{totalPages}</Text>\n      <Space width="2x" />\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width="8x"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <AngleLeftIcon />\n        </Button>\n        <Button\n          width="8x"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nexport default TablePagination;',"src/pages/components/tree/dnd/ConditionalWrapper.js":"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default ConditionalWrapper;","src/pages/components/tree/dnd/Draggable.js":"import { useEffect } from 'react';\nimport { useDrag } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nconst Draggable = ({\n  canDrag: canDragProp,\n  children,\n  item: itemProp,\n  type: typeProp = 'dnd',\n}) => {\n  const [collectedProps, dragRef, dragPreviewRef] = useDrag({\n    type: typeProp,\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  });\n\n  useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: true });\n  }, [dragPreviewRef]);\n\n  return children({\n    dragRef,\n    isDragging: collectedProps.isDragging,\n  });\n};\n\nexport default Draggable;","src/pages/components/tree/dnd/icons/drag.svg":'<svg width="8" height="16" viewBox="0 0 8 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">\n  <circle cx="2" cy="2" r="1" />\n  <circle cx="2" cy="6" r="1" />\n  <circle cx="2" cy="10" r="1" />\n  <circle cx="2" cy="14" r="1" />\n  <circle cx="6" cy="2" r="1" />\n  <circle cx="6" cy="6" r="1" />\n  <circle cx="6" cy="10" r="1" />\n  <circle cx="6" cy="14" r="1" />\n</svg>',"src/pages/components/tree/dnd/TreeView.js":"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback } from 'react';\nimport Droppable from '@/pages/components/tree/dnd/Droppable';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n  onNodeDrop: onNodeDropProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = isExpanded ? FolderOpenIcon : FolderIcon;\n    const iconColor = 'yellow:50';\n\n    return (\n      <Droppable\n        onDrop={(item, monitor) => {\n          if (typeof onNodeDropProp === 'function') {\n            onNodeDropProp({\n              ...item,\n              target: nodeId,\n            });\n          }\n        }}\n      >\n        {({ dropRef, isOver }) => (\n          <TreeItemContent\n            ref={dropRef}\n            sx={{\n              backgroundColor: isOver ? colorStyle.background.highlighted : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon as={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={nodeLabel}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {nodeLabel}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        )}\n      </Droppable>\n    );\n  }, [colorStyle, nodeId, nodeDepth, nodeLabel, onNodeDropProp]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n          onNodeDrop={onNodeDropProp}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst TreeView = ({\n  data,\n  onNodeDrop: onNodeDropProp,\n  onNodeSelect: onNodeSelectProp,\n  ...rest\n}) => {\n  const defaultSelectedNodeId = ensureArray(data)[0]?.id ?? null;\n  const handleNodeDrop = useCallback((item) => {\n    if (typeof onNodeDropProp === 'function') {\n      onNodeDropProp(item);\n    }\n  }, [onNodeDropProp]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    if (typeof onNodeSelectProp === 'function') {\n      onNodeSelectProp(nodeIds);\n    }\n  }, [onNodeSelectProp]);\n\n  return (\n    <Tree\n      aria-label=\"dnd\"\n      isSelectable\n      isUnselectable={false}\n      defaultSelected={defaultSelectedNodeId}\n      onNodeSelect={handleNodeSelect}\n      {...rest}\n    >\n      {ensureArray(data).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          onNodeDrop={handleNodeDrop}\n        />\n      ))}\n    </Tree>\n  );\n};\n\nexport default TreeView;","src/pages/components/tree/dnd/Droppable.js":"import { useDrop } from 'react-dnd';\n\nconst Droppable = ({\n  accept: acceptProp = 'dnd',\n  canDrop: canDropProp,\n  children,\n  onDrop: onDropProp,\n}) => {\n  const [collectedProps, dropRef] = useDrop({\n    accept: acceptProp,\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    },\n  });\n\n  return children({\n    dropRef,\n    isOver: collectedProps.isOver,\n  });\n};\n\nexport default Droppable;","src/pages/components/tree/dnd/DragLayer.js":"import {\n  Box,\n} from '@tonic-ui/react';\nimport { ensureFiniteNumber } from 'ensure-type';\nimport React from 'react';\nimport { useDragLayer } from 'react-dnd';\n\nconst DragLayer = ({\n  children,\n}) => {\n  const context = useDragLayer((monitor) => ({\n    isDragging: monitor.isDragging(),\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialSourceClientOffset: monitor.getInitialSourceClientOffset(),\n    sourceClientOffset: monitor.getSourceClientOffset(),\n  }));\n\n  const { isDragging, initialSourceClientOffset, sourceClientOffset } = context;\n\n  if (!isDragging || !initialSourceClientOffset || !sourceClientOffset) {\n    return null;\n  }\n\n  const offsetX = ensureFiniteNumber(sourceClientOffset?.x);\n  const offsetY = ensureFiniteNumber(sourceClientOffset?.y);\n\n  return (\n    <Box\n      sx={{\n        pointerEvents: 'none',\n        position: 'fixed',\n        inset: 0,\n        zIndex: 'fixed',\n      }}\n    >\n      <Box\n        style={{\n          transform: `translate(${offsetX}px, ${offsetY}px)`,\n        }}\n      >\n        {typeof children === 'function' ? children(context) : children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default DragLayer;","src/pages/components/tree/dnd/useRefresh.js":"import { useCallback, useState } from 'react';\n\nconst useRefresh = () => {\n  const [, rerender] = useState();\n  return useCallback(() => {\n    rerender({});\n  }, []);\n};\n\nexport default useRefresh;"},raw:"import { Box, Code, Flex, ResizeHandle, Scrollbar, useColorMode, useColorStyle } from '@tonic-ui/react';\nimport { FileArrowOIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n} from '@/pages/components/tree/utils';\nimport TableView from '@/pages/components/tree/dnd/TableView';\nimport TreeView from '@/pages/components/tree/dnd/TreeView';\nimport DragLayer from '@/pages/components/tree/dnd/DragLayer';\nimport useRefresh from '@/pages/components/tree/dnd/useRefresh';\n\nconst getTreeNodes = () => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.label).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = buildTreeNodes();\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => getTreeNodes());\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, [refresh, treeMap]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DragLayer>\n        {({ item }) => {\n          // Drag layer is not rendered when nothing is being dragged\n          const movedItemCount = ensureArray(item.data).length;\n          return (\n            <Flex alignItems=\"center\" columnGap=\"1x\">\n              <FileArrowOIcon />\n              <Code>{movedItemCount}</Code>\n            </Flex>\n          );\n        }}\n      </DragLayer>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <TreeView\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <TableView\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(e.h2,{id:"accessibility",children:["Accessibility",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#accessibility",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.p,{children:["The ",(0,u.jsx)(e.code,{children:"Tree"})," component supports both keyboard and mouse navigation and selection."]}),"\n",(0,u.jsx)(e.p,{children:"Keyboard shortcuts include:"}),"\n",(0,u.jsxs)(e.ul,{children:["\n",(0,u.jsx)(e.li,{children:"Use arrow keys to navigate."}),"\n",(0,u.jsxs)(e.li,{children:["Use ",(0,u.jsx)(e.code,{children:"Enter"})," to toggle expansion or selection."]}),"\n",(0,u.jsxs)(e.li,{children:["Use ",(0,u.jsx)(e.code,{children:"Space"})," to toggle selection."]}),"\n",(0,u.jsxs)(e.li,{children:["Use ",(0,u.jsx)(e.code,{children:"Home"})," and ",(0,u.jsx)(e.code,{children:"End"})," to quickly navigate to the first or last node."]}),"\n",(0,u.jsxs)(e.li,{children:["Hold down ",(0,u.jsx)(e.code,{children:"Ctrl"})," and click to select/unselect nodes."]}),"\n",(0,u.jsxs)(e.li,{children:["Hold down ",(0,u.jsx)(e.code,{children:"Shift"})," and click to select a range of nodes."]}),"\n",(0,u.jsxs)(e.li,{children:["Use ",(0,u.jsx)(e.code,{children:"Ctrl"})," + ",(0,u.jsx)(e.code,{children:"Shift"}),"+",(0,u.jsx)(e.code,{children:"Home"})," to select a range of nodes from the current node to the first node."]}),"\n",(0,u.jsxs)(e.li,{children:["Use ",(0,u.jsx)(e.code,{children:"Ctrl"})," + ",(0,u.jsx)(e.code,{children:"Shift"}),"+",(0,u.jsx)(e.code,{children:"End"})," to select a range of nodes from the current node to the last node."]}),"\n",(0,u.jsxs)(e.li,{children:["Use ",(0,u.jsx)(e.code,{children:"Ctrl"})," + ",(0,u.jsx)(e.code,{children:"a"})," to select all nodes."]}),"\n"]}),"\n",(0,u.jsxs)(e.h2,{id:"props",children:["Props",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.h3,{id:"tree-1",children:["Tree",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tree-1",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.table,{children:[(0,u.jsx)(e.thead,{children:(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.th,{align:"left",children:"Name"}),(0,u.jsx)(e.th,{align:"left",children:"Type"}),(0,u.jsx)(e.th,{align:"left",children:"Default"}),(0,u.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,u.jsxs)(e.tbody,{children:[(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"defaultExpanded"}),(0,u.jsx)(e.td,{align:"left",children:"array"}),(0,u.jsx)(e.td,{align:"left",children:"[]"}),(0,u.jsx)(e.td,{align:"left",children:"An array of expanded node ids for initial state (uncontrolled)."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"defaultSelected"}),(0,u.jsx)(e.td,{align:"left",children:"array"}),(0,u.jsx)(e.td,{align:"left",children:"[]"}),(0,u.jsx)(e.td,{align:"left",children:"An array of selected node ids for initial state (uncontrolled)."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"expanded"}),(0,u.jsx)(e.td,{align:"left",children:"array"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsx)(e.td,{align:"left",children:"An array of expanded node ids for controlled state."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"id"}),(0,u.jsx)(e.td,{align:"left",children:"string"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:["The ",(0,u.jsx)(e.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"isSelectable"}),(0,u.jsx)(e.td,{align:"left",children:"bool"}),(0,u.jsx)(e.td,{align:"left",children:"false"}),(0,u.jsx)(e.td,{align:"left",children:"Determines if the tree allows node selection."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"isUnselectable"}),(0,u.jsx)(e.td,{align:"left",children:"bool"}),(0,u.jsx)(e.td,{align:"left",children:"false"}),(0,u.jsx)(e.td,{align:"left",children:"Determines if the tree allows node unselection."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"multiSelect"}),(0,u.jsx)(e.td,{align:"left",children:"bool"}),(0,u.jsx)(e.td,{align:"left",children:"false"}),(0,u.jsxs)(e.td,{align:"left",children:["If true, ",(0,u.jsx)(e.code,{children:"ctrl"})," and ",(0,u.jsx)(e.code,{children:"shift"})," will trigger multiselect."]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"onNodeFocus"}),(0,u.jsx)(e.td,{align:"left",children:"function"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,u.jsxs)("pre",{children:[(0,u.jsx)(e.code,{children:"function(nodeId: string) => void"}),(0,u.jsx)("br",{})," • ",(0,u.jsx)(e.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"onNodeSelect"}),(0,u.jsx)(e.td,{align:"left",children:"function"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,u.jsxs)("pre",{children:[(0,u.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,u.jsx)("br",{})," • ",(0,u.jsx)(e.code,{children:"nodeIds"})," An array of selected node ids."]})]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"onNodeToggle"}),(0,u.jsx)(e.td,{align:"left",children:"function"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,u.jsxs)("pre",{children:[(0,u.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,u.jsx)("br",{})," • ",(0,u.jsx)(e.code,{children:"nodeIds"})," An array of expanded node ids."]})]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"selected"}),(0,u.jsx)(e.td,{align:"left",children:"array"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsx)(e.td,{align:"left",children:"An array of selected node ids for controlled state."})]})]})]}),"\n",(0,u.jsxs)(e.h3,{id:"treeitem",children:["TreeItem",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitem",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.table,{children:[(0,u.jsx)(e.thead,{children:(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.th,{align:"left",children:"Name"}),(0,u.jsx)(e.th,{align:"left",children:"Type"}),(0,u.jsx)(e.th,{align:"left",children:"Default"}),(0,u.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,u.jsxs)(e.tbody,{children:[(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,u.jsx)(e.td,{align:"left",children:"ElementType"}),(0,u.jsx)(e.td,{align:"left",children:"Collapse"}),(0,u.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,u.jsx)(e.td,{align:"left",children:"object"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,u.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"children"}),(0,u.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsx)(e.td,{align:"left",children:"The children of the tree item."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"disabled"}),(0,u.jsx)(e.td,{align:"left",children:"bool"}),(0,u.jsx)(e.td,{align:"left",children:"false"}),(0,u.jsx)(e.td,{align:"left",children:"Determines if the tree item is disabled."})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"nodeId"}),(0,u.jsx)(e.td,{align:"left",children:"string"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:[(0,u.jsx)(e.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"render"}),(0,u.jsx)(e.td,{align:"left",children:(0,u.jsx)(e.code,{children:"(context: TreeItemContext) => ReactNode"})}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsxs)(e.td,{align:"left",children:[(0,u.jsx)(e.code,{children:"REQUIRED"})," A function to render the tree item content.",(0,u.jsx)("br",{}),(0,u.jsxs)("pre",{children:["type TreeItemContext = ","{",(0,u.jsx)("br",{}),"  nodeDepth: number;",(0,u.jsx)("br",{}),"  nodeId: string;",(0,u.jsx)("br",{}),"  isDisabled: boolean;",(0,u.jsx)("br",{}),"  isExpandable: boolean;",(0,u.jsx)("br",{}),"  isExpanded: boolean;",(0,u.jsx)("br",{}),"  isFocused: boolean;",(0,u.jsx)("br",{}),"  isSelected: boolean;",(0,u.jsx)("br",{}),"  select: () => void;",(0,u.jsx)("br",{}),"  selectRange: () => void;",(0,u.jsx)("br",{}),"  toggleExpansion: () => void;",(0,u.jsx)("br",{}),"  toggleSelection: () => void;",(0,u.jsx)("br",{}),"};"]})]})]})]})]}),"\n",(0,u.jsxs)(e.h3,{id:"treeitemcontent",children:["TreeItemContent",(0,u.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitemcontent",children:(0,u.jsx)(e.svg,{children:(0,u.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(e.table,{children:[(0,u.jsx)(e.thead,{children:(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.th,{align:"left",children:"Name"}),(0,u.jsx)(e.th,{align:"left",children:"Type"}),(0,u.jsx)(e.th,{align:"left",children:"Default"}),(0,u.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,u.jsx)(e.tbody,{children:(0,u.jsxs)(e.tr,{children:[(0,u.jsx)(e.td,{align:"left",children:"children"}),(0,u.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,u.jsx)(e.td,{align:"left"}),(0,u.jsx)(e.td,{align:"left",children:"Content of the tree item."})]})})]})]})}var od=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,h.ah)(),n.components).wrapper;return e?(0,u.jsx)(e,Object.assign({},n,{children:(0,u.jsx)(ol,n)})):ol(n)}},29642:function(n,e,o){"use strict";var t=o(40596),r=o(85017),l=o(73645),d=o(70758),i=o(72448),a=o(15192),c=o(66785),s=o(87888),u=o(94829),h=o(99293),b=o(3398),p=o(39256),f=o(62080),m=o(40809),g=o(45795),x=o(5081),N=o(2784);function y(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var t,r,l,d,i=[],a=!0,c=!1;try{if(l=(o=o.call(n)).next,0===e){if(Object(o)!==o)return;a=!1}else for(;!(a=(t=l.call(o)).done)&&(i.push(t.value),i.length!==e);a=!0);}catch(n){c=!0,r=n}finally{try{if(!a&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return v(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return v(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}e.Z=function(n){var e=n.count,o=n.defaultPage,v=n.defaultRowsPerPage,I=n.onPageChange,S=n.onRowsPerPageChange,T=n.page,C=n.rowsPerPage,w=n.rowsPerPageOptions,k=void 0===w?[10,25,50,100]:w;n.showFirstButton,n.showLastButton;var E=y((0,t.Z)(),1)[0],j=y((0,r.Z)({colorMode:E}),1)[0],D=null!=v?v:(0,x.rY)(k)[0],Z=y((0,N.useState)(null!=T?T:void 0===o?1:o),2),O=Z[0],A=Z[1],R=y((0,N.useState)(null!=C?C:D),2),P=R[0],M=R[1];(0,N.useEffect)(function(){void 0!==T&&A(T)},[T]),(0,N.useEffect)(function(){void 0!==C&&M(C)},[C]);var z=(0,N.useCallback)(function(n){void 0!==T||A(n),"function"==typeof I&&I(n)},[T,I]),F=(0,N.useCallback)(function(n){void 0!==C||M(n),"function"==typeof S&&S(n)},[C,S]),L=Math.ceil(e/P),B=O>1,W=O<L;return N.createElement(l.Z,{alignItems:"center",justifyContent:"flex-end",backgroundColor:j.background.secondary,px:"6x",py:"3x"},N.createElement(d.Z,{mr:"2x"},"Total: ",e),N.createElement(i.Z,{orientation:"vertical",height:"6x"}),N.createElement(a.Z,null,N.createElement(c.Z,{variant:"ghost"},P," per page"),N.createElement(s.Z,{onClick:function(n){var e=(0,x.Nu)(n.target.value);e>0&&(z(1),F(e))},width:"100%"},k.map(function(n){return N.createElement(u.Z,{key:n,value:n},n)}))),N.createElement(i.Z,{orientation:"vertical",height:"6x"}),N.createElement(h.Z,{width:"2x"}),N.createElement(b.Z,{width:"10x",px:0,textAlign:"center",onChange:function(n){var e=(0,x.Nu)(n.target.value);e<=1?z(1):e>=L?z(L):z(e)},value:O}),N.createElement(h.Z,{width:"2x"}),N.createElement(d.Z,null,"/"),N.createElement(h.Z,{width:"2x"}),N.createElement(d.Z,null,L),N.createElement(h.Z,{width:"2x"}),N.createElement(p.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},N.createElement(f.Z,{width:"8x",disabled:!B,onClick:function(n){z(O-1)}},N.createElement(m.Z,null)),N.createElement(f.Z,{width:"8x",disabled:!W,onClick:function(n){z(O+1)}},N.createElement(g.Z,null))))}},63546:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree",function(){return o(72998)}])},94581:function(n,e,o){"use strict";o.d(e,{Z:function(){return r}});var t=o(2784),r=function(n,e){var o=(0,t.useRef)(!1),r=(0,t.useRef)(n);r.current=n,(0,t.useEffect)(function(){e&&!o.current&&("function"==typeof r.current&&r.current(),o.current=!0)},[e])}},17168:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.BX)(r.HY,{children:[(0,r.tZ)("path",{d:"M2.050 11.12l-1.050 3.88 3.88-1.050 8.42-8.42-2.83-2.83zM4.22 13.29l-2.22 0.71 0.72-2.23z"}),(0,r.tZ)("path",{d:"M11.89 1.28l-0.71 0.72 2.82 2.82 0.71-0.71c0.18-0.181 0.291-0.43 0.291-0.705s-0.111-0.524-0.291-0.705l-1.41-1.42c-0.181-0.18-0.43-0.291-0.705-0.291s-0.524 0.111-0.705 0.291l0-0z"})]}),"EditIcon")},70828:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M2 1h8v4h4v3h1v-4l-4-4h-9c-0.5 0-1 0.5-1 1v14c0 0.5 0.5 1 1 1h9v-1h-9v-14zM11 1.4l2.6 2.6h-2.6v-2.6zM12 16v-3h-4v-2h4v-3l4 4-4 4z"}),"FileArrowOIcon")},99727:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M0 6h16v7.93c0 0.003 0 0.008 0 0.012 0 0.564-0.441 1.026-0.997 1.058l-0.003 0h-14c-0.559-0.033-1-0.494-1-1.058 0-0.004 0-0.008 0-0.012v0.001-7.93zM15 3h-7l-1-2h-6c-0.018-0.001-0.039-0.002-0.060-0.002-0.516 0-0.935 0.416-0.94 0.931v3.070h16v-1.070c-0.005-0.516-0.424-0.932-0.94-0.932-0.021 0-0.042 0.001-0.063 0.002l0.003-0z"}),"FolderIcon")},98484:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M16 8l-2.1 6.43c-0.164 0.339-0.505 0.569-0.9 0.57h-12c-0.552 0-1-0.448-1-1v0-12c0-0.552 0.448-1 1-1v0h4l1 2h7c0.552 0 1 0.448 1 1v0 3h-10.64l-2.36 7h1l2-6h12z"}),"FolderOpenIcon")},53284:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M9 4h-3v-3h3zM9 6h-3v3h3zM9 11h-3v3h3z"}),"MoreIcon")},42744:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.BX)(r.HY,{children:[(0,r.tZ)("path",{d:"M0 1v4h16v-4zM7 3h-5v-1h5zM14 3h-1v-1h1z"}),(0,r.tZ)("path",{d:"M0 10h16v-4h-16zM13 7h1v1h-1zM2 7h5v1h-5z"}),(0,r.tZ)("path",{d:"M0 15h16v-4h-16zM13 12h1v1h-1zM2 12h5v1h-5z"})]}),"ServerIcon")},31222:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M11 8.667l-3.5 3.333-3.5-3.333 0.7-0.667 2.3 2.19v-6.19h1v6.19l2.3-2.19z"}),"SortDownIcon")},86851:function(n,e,o){"use strict";o.d(e,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M10.3 8l-2.3-2.19v6.19h-1v-6.19l-2.3 2.19-0.7-0.667 3.5-3.333 3.5 3.333z"}),"SortUpIcon")},1847:function(n,e,o){"use strict";o.d(e,{Z:function(){return w}});var t=o(53860),r=o(20325),l=o(94581),d=o(13409),i=o(56818),a=o(5081),c=o(2784),s=o(98827),u=o(35353),h=o(40596),b=o(27216),p="blue",f=o(52903),m=o(95530),g=function(n){return(0,f.tZ)(m.Z,(0,t.Zj)((0,t.Zj)({viewBox:"0 0 16 16"},n),{},{children:(0,f.tZ)("g",{fill:"currentColor",children:(0,f.tZ)("path",{d:"M6 11.060l-3-3-1 1 4 4 9-9-1-1z"})})}))};g.displayName="IconChecked";var x=function(n){return(0,f.tZ)(m.Z,(0,t.Zj)((0,t.Zj)({viewBox:"0 0 24 24"},n),{},{children:(0,f.tZ)("g",{fill:"currentColor",children:(0,f.tZ)("rect",{height:"18",width:"18",x:"3",y:"3"})})}))};x.displayName="IconIndeterminate";var N=o(49857),y=["indeterminate","size","variantColor","sx"],v=(0,c.forwardRef)(function(n,e){var o,r,l,d,c,s,u,m,v,I,S,T,C=n.indeterminate,w=n.size,k=void 0===w?"md":w,E=n.variantColor,j=void 0===E?p:E,D=n.sx,Z=(0,t.Kd)(n,y),O=(0,b.u)().sizes,A=(0,h.Z)(),R=(0,t.ZQ)(A,1)[0],P={lg:O["6x"],md:O["4x"],sm:O["3x"]}[k],M=function(n){return'input[type="'.concat("checkbox",'"]')+(0,a.Zs)(n)+" + &"},z=(0,t.Zj)((0,t._x)((0,t._x)((0,t._x)({position:"relative",border:1,width:{lg:"6x",md:"4x",sm:"3x"}[k],height:{lg:"6x",md:"4x",sm:"3x"}[k],zIndex:0},M()+"> *",{opacity:0}),M(":checked")+"> *",{opacity:1}),M("[data-indeterminate]")+"> *",{opacity:1}),C?(o=({dark:"".concat(j,":60"),light:"".concat(j,":60")})[R],r=({dark:"".concat(j,":50"),light:"".concat(j,":50")})[R],l=({dark:"".concat(j,":50"),light:"".concat(j,":50")})[R],d=({dark:"".concat(j,":60"),light:"".concat(j,":60")})[R],(0,t._x)((0,t._x)((0,t._x)((0,t._x)({},M("[data-indeterminate]"),{borderColor:{dark:"gray:50",light:"gray:40"}[R],color:o}),M("[data-indeterminate]:hover:not(:disabled)"),{borderColor:l,color:r}),M("[data-indeterminate]:focus-visible"),{outlineColor:d,outlineStyle:"solid",outlineWidth:"1h"}),M("[data-indeterminate]:disabled"),{borderColor:{dark:"gray:60",light:"gray:40"}[R],color:{dark:"gray:60",light:"gray:40"}[R],opacity:.28})):(c=({dark:"white:emphasis",light:"white:emphasis"})[R],s="transparent",u=({dark:"".concat(j,":60"),light:"".concat(j,":60")})[R],m=({dark:"".concat(j,":50"),light:"".concat(j,":50")})[R],v=({dark:"".concat(j,":50"),light:"".concat(j,":50")})[R],I=({dark:"gray:60",light:"gray:40"})[R],S=({dark:"".concat(j,":60"),light:"".concat(j,":60")})[R],T=({dark:"".concat(j,":60"),light:"".concat(j,":60")})[R],(0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)({backgroundColor:s,borderColor:{dark:"gray:50",light:"gray:40"}[R],color:c},M(":hover"),{backgroundColor:s,borderColor:v,color:c}),M(":disabled"),{backgroundColor:s,borderColor:I,color:c,opacity:.28}),M(":focus-visible"),{outlineColor:T,outlineStyle:"solid",outlineWidth:"1h"}),M(":checked"),{backgroundColor:u,borderColor:S,color:c}),M(":checked:hover:not(:disabled)"),{backgroundColor:m,borderColor:v,color:c}),M(":checked:focus-visible"),{backgroundColor:"inherit",borderColor:"transparent",color:c}),M(":checked:focus-visible")+"> div:first-of-type",{backgroundColor:u}),M(":checked:disabled"),{backgroundColor:{dark:"gray:60",light:"gray:40"}[R],borderColor:I,color:{dark:"white:emphasis",light:"black:primary"}[R],opacity:.28})));return(0,f.tZ)(N.Z,(0,t.Zj)((0,t.Zj)((0,t.Zj)({"aria-hidden":(0,i.Qm)(!0),role:"checkbox",sx:[z].concat((0,t.u)((0,a.rY)(D)))},{display:"inline-flex",alignItems:"center",justifyContent:"center",flexShrink:0,userSelect:"none"}),Z),{},{children:C?(0,f.tZ)(x,{size:P}):(0,f.tZ)(g,{size:P})}))});v.displayName="CheckboxControlBox";var I=o(16301),S=function(){if(!c.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,c.useContext)(I.w)},T=["checked","children","defaultChecked","disabled","id","indeterminate","inputProps","inputRef","name","onBlur","onChange","onClick","onFocus","size","value","variantColor"],C=(0,c.forwardRef)(function(n,e){var o,h,b=(0,s.Z)({props:n,name:"Checkbox"}),m=b.checked,g=b.children,x=b.defaultChecked,y=b.disabled,I=b.id,C=b.indeterminate,w=b.inputProps,k=b.inputRef,E=b.name,j=b.onBlur,D=b.onChange,Z=b.onClick,O=b.onFocus,A=b.size,R=b.value,P=b.variantColor,M=(0,t.Kd)(b,T),z=m,F=y,L=E,B=D,W=A,U=P,Y=(0,c.useRef)(),H=(0,r.Z)(k,Y),_=S(),G="";if(_){var X,K,$,V,Q,J,q=(0,t.Zj)({},_),nn=q.disabled,ne=q.name,no=q.size,nt=q.value,nr=q.variantColor,nl=q.onChange;void 0!==nt&&(z=(0,a.rY)(nt).includes(R)),F=null!==(X=F)&&void 0!==X?X:nn,(0,d.Rw)(L)||(0,d.Rw)(ne)||L===ne||(G='Warning: The `Checkbox` has a `name` prop ("'.concat(L,'") that conflicts with the `CheckboxGroup`\'s `name` prop ("').concat(ne,'")')),L=null!==(K=L)&&void 0!==K?K:ne,B=(0,i.PP)(B,nl),W=null!==($=null!==(V=W)&&void 0!==V?V:no)&&void 0!==$?$:"md",U=null!==(Q=null!==(J=U)&&void 0!==J?J:nr)&&void 0!==Q?Q:p}else W=null!==(o=W)&&void 0!==o?o:"md",U=null!==(h=U)&&void 0!==h?h:p;(0,l.Z)(function(){},[!!G]);var nd={display:"inline-flex",verticalAlign:"top",alignItems:"center",cursor:F?"not-allowed":"pointer"};return(0,f.BX)(N.Z,(0,t.Zj)((0,t.Zj)((0,t.Zj)({as:"label",ref:e},nd),M),{},{children:[(0,f.tZ)(u.Z,(0,t.Zj)({as:"input",checked:z,"data-indeterminate":(0,i.PB)(C),defaultChecked:x,disabled:F,id:I,name:L,onBlur:j,onChange:B,onClick:Z,onFocus:O,ref:H,type:"checkbox",value:R},w)),(0,f.tZ)(v,{indeterminate:C,size:W,variantColor:U}),!(0,d.Rw)(g)&&(0,f.tZ)(N.Z,{ml:"2x",userSelect:"none",opacity:F?.28:1,children:g})]}))});C.displayName="Checkbox";var w=C},16301:function(n,e,o){"use strict";o.d(e,{w:function(){return t}});var t=(0,o(2784).createContext)()},29088:function(n,e,o){"use strict";o.d(e,{Z:function(){return x}});var t,r,l=o(53860),d=o(95530),i=o(5081),a=o(2784),c=o(98827),s=o(28165),u=(0,s.F4)(t||(t=(0,l.AI)(["\n  0% {\n      transform: rotate(0deg)\n  }\n  to {\n      transform: rotate(1turn)\n  }\n"]))),h=(0,s.F4)(r||(r=(0,l.AI)(["\n  0% {\n      transform: rotate(0deg)\n  }\n  to {\n      transform: rotate(-1turn)\n  }\n"]))),b=function(n){var e,o=n.spin;return"ccw"===o?e="".concat(h," 2s linear infinite"):("cw"===o||!0===o)&&(e="".concat(u," 2s linear infinite")),{animation:e}},p=o(27216),f=o(52903),m=["children","icon","spin"],g=(0,a.forwardRef)(function(n,e){var o=(0,c.Z)({props:n,name:"Icon"}),t=o.children,r=o.icon,s=o.spin,u=(0,l.Kd)(o,m),h=(0,p.u)(),g=(0,a.useRef)([null,null]),x="string"==typeof r&&r.length>0&&function(n){var e,o=(0,l.ZQ)(g.current,2),t=o[0],r=o[1];if(t===n)return r;var d=null===(e=(0,i.rY)(null==h?void 0:h.icons).find(function(e){return(0,l.ZQ)(e,1)[0]===n}))||void 0===e?void 0:e[1];return d&&(g.current=[n,d]),d}(r)||t,N=b({spin:void 0!==s&&s});return(0,f.tZ)(d.Z,(0,l.Zj)((0,l.Zj)((0,l.Zj)({ref:e},N),u),{},{children:x}))});g.displayName="Icon";var x=g},10636:function(n,e,o){"use strict";o.d(e,{Z:function(){return p}});var t=o(53860),r=o(56818),l=o(2784),d=o(98827),i=o(40596),a=function(n){var e=n.isResizing,o=(0,i.Z)(),r=(0,t.ZQ)(o,1)[0];return{backgroundColor:e?({dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"})[r]:"transparent",boxSizing:e?"content-box":"border-box",cursor:"col-resize",touchAction:"none",userSelect:"none",width:e?"1x":"2x"}},c=function(){var n=null;return function(){if("boolean"==typeof n)return n;try{var e=function(){};window.addEventListener("test",e,{get passive(){return n=!0,!1}}),window.removeEventListener("test",e)}catch(e){n=!1}return n}},s=o(52903),u=o(49857),h=["onMouseDown","onResize","onResizeEnd","onResizeStart","onTouchStart"],b=(0,l.forwardRef)(function(n,e){var o=(0,d.Z)({props:n,name:"ResizeHandle"}),i=o.onMouseDown,b=o.onResize,p=o.onResizeEnd,f=o.onResizeStart,m=o.onTouchStart,g=(0,t.Kd)(o,h),x=(0,l.useState)(!1),N=(0,t.ZQ)(x,2),y=N[0],v=N[1],I=a({isResizing:y}),S=(0,l.useCallback)(function(n){var e=n.clientX,o=n.clientY;null==f||f({clientX:e,clientY:o}),v(!0);var r="mousemove",l="mouseup",d=(0,t._x)((0,t._x)({},r,function(n){var e=n.clientX,o=n.clientY;null==b||b({clientX:e,clientY:o})}),l,function(n){document.removeEventListener("mousemove",d[r]),document.removeEventListener("mouseup",d[l]),v(!1);var e=n.clientX,o=n.clientY;null==p||p({clientX:e,clientY:o})}),i=!!c()&&{passive:!1};document.addEventListener("mousemove",d[r],i),document.addEventListener("mouseup",d[l],i)},[b,p,f]),T=(0,l.useCallback)(function(n){if(!("touchstart"===n.type&&Array.isArray(n.touches)&&n.touches.length>1)){var e,o,r=Array.isArray(n.touches)?null===(e=n.touches[0])||void 0===e?void 0:e.clientX:void 0,l=Array.isArray(n.touches)?null===(o=n.touches[0])||void 0===o?void 0:o.clientY:void 0;null==f||f({clientX:r,clientY:l}),v(!0);var d="touchmove",i="touchend",a=(0,t._x)((0,t._x)({},d,function(n){n.cancelable&&(n.preventDefault(),n.stopPropagation());var e,o,t=Array.isArray(n.touches)?null===(e=n.touches[0])||void 0===e?void 0:e.clientX:void 0,r=Array.isArray(n.touches)?null===(o=n.touches[0])||void 0===o?void 0:o.clientY:void 0;return null==b||b({clientX:t,clientY:r}),!1}),i,function(n){document.removeEventListener("touchmove",a[d]),document.removeEventListener("touchend",a[i]),n.cancelable&&(n.preventDefault(),n.stopPropagation()),v(!1);var e,o,t=Array.isArray(n.touches)?null===(e=n.touches[0])||void 0===e?void 0:e.clientX:void 0,r=Array.isArray(n.touches)?null===(o=n.touches[0])||void 0===o?void 0:o.clientY:void 0;null==p||p({clientX:t,clientY:r})}),s=!!c()&&{passive:!1};document.addEventListener("touchmove",a[d],s),document.addEventListener("touchend",a[i],s)}},[b,p,f]);return(0,s.tZ)(u.Z,(0,t.Zj)((0,t.Zj)({ref:e,onMouseDown:(0,r.N)(i,S),onTouchStart:(0,r.N)(m,T)},I),g))});b.displayName="ResizeHandle";var p=b},53310:function(n,e,o){"use strict";o.d(e,{Z:function(){return h}});var t=o(53860),r=o(32502),l=o(2784),d=o(39108),i=o(59804),a=o(99870),c=o(52903),s=["children","disabled","nextToCursor","offset","placement"],u=(0,l.forwardRef)(function(n,e){var o=n.children,u=n.disabled,h=n.nextToCursor,b=n.offset,p=n.placement,f=(0,t.Kd)(n,s),m=(0,l.useRef)(),g=(0,l.useState)(),x=(0,t.ZQ)(g,2),N=x[0],y=x[1],v=(0,i.k)(),I=(0,l.useCallback)(function(n,e){if("width"!==e&&"height"!==e)return console.error("Invalid size property: ".concat(e,". Use 'width' or 'height'.")),!1;var o,t,r,l,d=n.style[e],i=null===(o=n.getClientRects())||void 0===o?void 0:null===(t=o[0])||void 0===t?void 0:t[e];n.style[e]="max-content";var a=null===(r=n.getClientRects())||void 0===r?void 0:null===(l=r[0])||void 0===l?void 0:l[e];return(n.style[e]=d,"width"===e)?i<a||n.scrollWidth>n.clientWidth:"height"===e&&(i<a||n.scrollHeight>n.clientHeight)},[]),S=(0,l.useCallback)(function(){return m.current},[]),T=(0,l.useCallback)(function(n){var e=n.currentTarget,o=I(e,"width"),t=I(e,"height");y(o||t)},[I]),C=(0,l.useCallback)(function(n){y(!1)},[]);return(0,r.Z)(S,"mouseenter",T),(0,r.Z)(S,"mouseleave",C),(0,c.tZ)(a.Z,(0,t.Zj)((0,t.Zj)((0,t.Zj)({ref:e},{disabled:!N||void 0!==u&&u,nextToCursor:void 0===h||h,offset:void 0===b?[8,12]:b,placement:void 0===p?"bottom-end":p}),f),{},{children:"function"==typeof o?o({ref:m,style:v}):(0,c.tZ)(d.Z,{ref:m,children:o})}))});u.displayName="OverflowTooltip";var h=u},35353:function(n,e,o){"use strict";o.d(e,{Z:function(){return c}});var t=o(53860),r=o(2784),l=o(98827),d=o(52903),i=o(49857),a=(0,r.forwardRef)(function(n,e){var o=(0,l.Z)({props:n,name:"VisuallyHidden"});return(0,d.tZ)(i.Z,(0,t.Zj)((0,t.Zj)({ref:e},{position:"absolute",width:1,height:1,padding:0,border:0,overflow:"hidden",clipPath:"inset(50%)",whiteSpace:"nowrap"}),o))});a.displayName="VisuallyHidden";var c=a}},function(n){n.O(0,[5220,8726,9293,978,6120,2888,9774,179],function(){return n(n.s=63546)}),_N_E=n.O()}]);