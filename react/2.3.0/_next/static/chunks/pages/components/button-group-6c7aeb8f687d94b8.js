(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6689],{91029:function(n,t,e){"use strict";e.r(t),e.d(t,{default:function(){return M}});var o=e(52322),r=e(45392),i=e(96835),a=e(40596),l=e(73645),c=e(49857),u=e(67622),s=e(39256),d=e(62080),h=e(29088),m=e(72448),v=e(81947),p=e(9537),f=e(59437),B=e(63860),g=e(2784);function x(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{if(i=(e=e.call(n)).next,0===t){if(Object(e)!==e)return;c=!1}else for(;!(c=(o=i.call(e)).done)&&(l.push(o.value),l.length!==t);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(n,t)||function(n,t){if(n){if("string"==typeof n)return y(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return y(n,t)}}(n,t)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var b=function(){var n=x((0,a.Z)(),1)[0],t={dark:"red:80",light:"red:80"}[n],e={dark:"blue:80",light:"blue:80"}[n],o={dark:"gray:70",light:"gray:30"}[n],r={dark:"gray:60",light:"gray:20"}[n],i=[["chart-pie",v.Z],["chart-line",p.Z],["chart-table",f.Z],["chart-bar",B.Z]],y=i.length-1,b=x((0,g.useState)("chart-pie"),2),k=b[0],Z=b[1],E=x((0,g.useState)("chart-pie"),2),C=E[0],D=E[1],j=x((0,g.useState)("chart-pie"),2),T=j[0],I=j[1],G=x((0,g.useState)("chart-pie"),2),w=G[0],M=G[1],S=x((0,g.useState)("chart-pie"),2),L=S[0],A=S[1],O=x((0,g.useState)("chart-pie"),2),z=O[0],R=O[1];return g.createElement(l.Z,{direction:"column",rowGap:"4x"},g.createElement(c.Z,null,g.createElement(c.Z,{mb:"2x"},g.createElement(u.Z,null,"Emphasis")),g.createElement(s.Z,{variant:"emphasis"},i.map(function(n,e){var o=x(n,2),r=o[0],i=o[1];return g.createElement(g.Fragment,{key:r},g.createElement(d.Z,{disabled:e===y,selected:k===r,onClick:function(n){Z(r),n.currentTarget.blur()},width:"8x"},g.createElement(h.Z,{as:i})),e!==y&&g.createElement(m.Z,{orientation:"vertical",color:t}))}))),g.createElement(c.Z,null,g.createElement(c.Z,{mb:"2x"},g.createElement(u.Z,null,"Primary")),g.createElement(s.Z,{variant:"primary"},i.map(function(n,t){var o=x(n,2),r=o[0],i=o[1];return g.createElement(g.Fragment,{key:r},g.createElement(d.Z,{disabled:t===y,selected:C===r,onClick:function(n){D(r),n.currentTarget.blur()},width:"8x"},g.createElement(h.Z,{as:i})),t!==y&&g.createElement(m.Z,{orientation:"vertical",color:e}))}))),g.createElement(c.Z,null,g.createElement(c.Z,{mb:"2x"},g.createElement(u.Z,null,"Default")),g.createElement(s.Z,{variant:"default"},i.map(function(n,t){var e=x(n,2),r=e[0],i=e[1];return g.createElement(g.Fragment,{key:r},g.createElement(d.Z,{disabled:t===y,selected:T===r,onClick:function(n){I(r),n.currentTarget.blur()},width:"8x"},g.createElement(h.Z,{as:i})),t!==y&&g.createElement(m.Z,{orientation:"vertical",color:o}))}))),g.createElement(c.Z,null,g.createElement(c.Z,{mb:"2x"},g.createElement(u.Z,null,"Secondary")),g.createElement(s.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},i.map(function(n,t){var e=x(n,2),o=e[0],r=e[1];return g.createElement(g.Fragment,{key:o},g.createElement(d.Z,{disabled:t===y,selected:w===o,onClick:function(n){M(o),n.currentTarget.blur()},width:"8x"},g.createElement(h.Z,{as:r})))}))),g.createElement(c.Z,null,g.createElement(c.Z,{mb:"2x"},g.createElement(u.Z,null,"Ghost")),g.createElement(s.Z,{variant:"ghost"},i.map(function(n,t){var e=x(n,2),o=e[0],i=e[1];return g.createElement(g.Fragment,{key:o},g.createElement(d.Z,{disabled:t===y,selected:L===o,onClick:function(n){A(o),n.currentTarget.blur()},width:"8x"},g.createElement(h.Z,{as:i})),t!==y&&g.createElement(m.Z,{orientation:"vertical",color:r}))}))),g.createElement(c.Z,null,g.createElement(c.Z,{mb:"2x"},g.createElement(u.Z,null,"Ghost (w/o ButtonGroup)")),g.createElement(l.Z,null,i.map(function(n,t){var e=x(n,2),o=e[0],r=e[1];return g.createElement(g.Fragment,{key:o},g.createElement(d.Z,{disabled:t===y,selected:z===o,onClick:function(n){R(o),n.currentTarget.blur()},variant:"ghost",width:"8x"},g.createElement(h.Z,{as:r})))}))))},k=e(61619);function Z(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var E=function(){var n,t=(function(n){if(Array.isArray(n))return n}(n=(0,a.Z)())||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{for(i=(e=e.call(n)).next;!(c=(o=i.call(e)).done)&&(l.push(o.value),1!==l.length);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(n,1)||function(n,t){if(n){if("string"==typeof n)return Z(n,1);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return Z(n,1)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"gray:70",light:"gray:30"}[t],o={dark:"gray:60",light:"gray:20"}[t];return g.createElement(k.Z,{direction:"row",spacing:"4x"},g.createElement(k.Z,{spacing:"4x",alignItems:"center"},g.createElement(s.Z,null,g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{orientation:"vertical"},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{color:e}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{color:e}),g.createElement(d.Z,null,"Three"))),g.createElement(k.Z,{spacing:"4x",alignItems:"center"},g.createElement(s.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"One"),g.createElement(d.Z,null,"Two"),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{orientation:"vertical",variant:"secondary",sx:{"> *:not(:first-of-type)":{marginTop:-1}}},g.createElement(d.Z,null,"One"),g.createElement(d.Z,null,"Two"),g.createElement(d.Z,null,"Three"))),g.createElement(k.Z,{spacing:"4x",alignItems:"center"},g.createElement(s.Z,{variant:"ghost",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{orientation:"vertical",variant:"ghost",sx:{"> *:not(:first-of-type)":{marginTop:-1}}},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{color:o}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{color:o}),g.createElement(d.Z,null,"Three"))))};function C(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var D=function(){var n,t=(function(n){if(Array.isArray(n))return n}(n=(0,a.Z)())||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{for(i=(e=e.call(n)).next;!(c=(o=i.call(e)).done)&&(l.push(o.value),1!==l.length);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(n,1)||function(n,t){if(n){if("string"==typeof n)return C(n,1);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return C(n,1)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"gray:70",light:"gray:30"}[t],o={dark:"gray:60",light:"gray:20"}[t];return g.createElement(k.Z,{direction:"row",spacing:"4x"},g.createElement(k.Z,{spacing:"4x",alignItems:"flex-start"},g.createElement(s.Z,{size:"sm"},g.createElement(d.Z,null,"Left"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Middle"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Right")),g.createElement(s.Z,{size:"md"},g.createElement(d.Z,null,"Left"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Middle"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Right")),g.createElement(s.Z,{size:"lg"},g.createElement(d.Z,null,"Left"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Middle"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Right"))),g.createElement(k.Z,{spacing:"4x",alignItems:"flex-start"},g.createElement(s.Z,{size:"sm",variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"Left"),g.createElement(d.Z,null,"Middle"),g.createElement(d.Z,null,"Right")),g.createElement(s.Z,{size:"md",variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"Left"),g.createElement(d.Z,null,"Middle"),g.createElement(d.Z,null,"Right")),g.createElement(s.Z,{size:"lg",variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"Left"),g.createElement(d.Z,null,"Middle"),g.createElement(d.Z,null,"Right"))),g.createElement(k.Z,{spacing:"4x",alignItems:"flex-start"},g.createElement(s.Z,{size:"sm",variant:"ghost",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"Left"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Middle"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Right")),g.createElement(s.Z,{size:"md",variant:"ghost",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"Left"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Middle"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Right")),g.createElement(s.Z,{size:"lg",variant:"ghost",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"Left"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Middle"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Right"))))};function j(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var T=function(){var n,t=(function(n){if(Array.isArray(n))return n}(n=(0,a.Z)())||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{for(i=(e=e.call(n)).next;!(c=(o=i.call(e)).done)&&(l.push(o.value),1!==l.length);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(n,1)||function(n,t){if(n){if("string"==typeof n)return j(n,1);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return j(n,1)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"red:80",light:"red:80"}[t],o={dark:"blue:80",light:"blue:80"}[t],r={dark:"gray:70",light:"gray:30"}[t],i={dark:"gray:60",light:"gray:20"}[t];return g.createElement(k.Z,{direction:"column",spacing:"3x"},g.createElement(s.Z,{variant:"emphasis"},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:e}),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{variant:"primary"},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:o}),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{variant:"default"},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:r}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:r}),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"One"),g.createElement(d.Z,null,"Two"),g.createElement(d.Z,null,"Three")),g.createElement(s.Z,{variant:"ghost",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:i}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:i}),g.createElement(d.Z,null,"Three")))};function I(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var G=function(){var n,t={dark:"gray:70",light:"gray:30"}[(function(n){if(Array.isArray(n))return n}(n=(0,a.Z)())||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{for(i=(e=e.call(n)).next;!(c=(o=i.call(e)).done)&&(l.push(o.value),1!==l.length);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(n,1)||function(n,t){if(n){if("string"==typeof n)return I(n,1);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return I(n,1)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]];return g.createElement(s.Z,null,g.createElement(d.Z,null,"One"),g.createElement(m.Z,{orientation:"vertical",color:t}),g.createElement(d.Z,null,"Two"),g.createElement(m.Z,{orientation:"vertical",color:t}),g.createElement(d.Z,null,"Three"))};function w(n){var t=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),n.components);return(0,o.jsxs)(t.div,{className:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,o.jsx)(t.h1,{id:"buttongroup",children:"ButtonGroup"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"ButtonGroup"})," is used to group related buttons."]}),"\n",(0,o.jsxs)(t.h2,{id:"import",children:["Import",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { ButtonGroup } from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"usage",children:["Usage",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.h3,{id:"basic-button-group",children:["Basic button group",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-button-group",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(i.Z,Object.assign({},{component:G,file:{data:"import {\n  Button,\n  ButtonGroup,\n  Divider,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n};\n\nexport default App;",path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Button,\n  ButtonGroup,\n  Divider,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(t.h3,{id:"group-variants",children:["Group variants",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-variants",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"variant"})," prop to change the visual style of every button in a group. You can set the value to ",(0,o.jsx)(t.code,{children:"emphasis"}),", ",(0,o.jsx)(t.code,{children:"primary"}),", ",(0,o.jsx)(t.code,{children:"default"}),", ",(0,o.jsx)(t.code,{children:"secondary"})," and ",(0,o.jsx)(t.code,{children:"ghost"}),"."]}),"\n",(0,o.jsx)(i.Z,Object.assign({},{component:T,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(t.h3,{id:"group-sizes",children:["Group sizes",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-sizes",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"size"})," prop to change the size of the ",(0,o.jsx)(t.code,{children:"ButtonGroup"}),". You can set the value to ",(0,o.jsx)(t.code,{children:"sm"}),", ",(0,o.jsx)(t.code,{children:"md"}),", or ",(0,o.jsx)(t.code,{children:"lg"}),"."]}),"\n",(0,o.jsx)(i.Z,Object.assign({},{component:D,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(t.h3,{id:"group-orientation",children:["Group orientation",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-orientation",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Make a set of buttons appear vertically stacked rather than horizontally, by adding ",(0,o.jsx)(t.code,{children:'orientation="vertical"'})," to the ",(0,o.jsx)(t.code,{children:"ButtonGroup"})," component."]}),"\n",(0,o.jsx)(i.Z,Object.assign({},{component:E,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(t.h3,{id:"group-states",children:["Group states",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-states",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(t.p,{children:"The following example shows different states (i.e. normal, disabled, and selected states) when composing a group of buttons."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Use the ",(0,o.jsx)(t.code,{children:"disabled"})," prop to make the ",(0,o.jsx)(t.code,{children:"Button"})," appear disabled."]}),"\n",(0,o.jsxs)(t.li,{children:["Use the ",(0,o.jsx)(t.code,{children:"selected"})," prop to make the ",(0,o.jsx)(t.code,{children:"Button"})," appear selected."]}),"\n"]}),"\n",(0,o.jsx)(i.Z,Object.assign({},{component:b,file:{data:'import { Box, Button, ButtonGroup, Divider, Flex, Icon, TextLabel, useColorMode } from \'@tonic-ui/react\';\nimport { ChartBarIcon, ChartLineIcon, ChartPieIcon, ChartTableIcon } from \'@tonic-ui/react-icons\';\nimport React, { Fragment, useState } from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\n    [\'chart-pie\', ChartPieIcon],\n    [\'chart-line\', ChartLineIcon],\n    [\'chart-table\', ChartTableIcon],\n    [\'chart-bar\', ChartBarIcon],\n  ];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Emphasis\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="emphasis">\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Primary\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="primary">\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Default\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="default">\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Secondary\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost (w/o ButtonGroup)\n          </TextLabel>\n        </Box>\n        <Flex>\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n            </Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import { Box, Button, ButtonGroup, Divider, Flex, Icon, TextLabel, useColorMode } from \'@tonic-ui/react\';\nimport { ChartBarIcon, ChartLineIcon, ChartPieIcon, ChartTableIcon } from \'@tonic-ui/react-icons\';\nimport React, { Fragment, useState } from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\n    [\'chart-pie\', ChartPieIcon],\n    [\'chart-line\', ChartLineIcon],\n    [\'chart-table\', ChartTableIcon],\n    [\'chart-bar\', ChartBarIcon],\n  ];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Emphasis\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="emphasis">\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Primary\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="primary">\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Default\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="default">\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Secondary\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          sx={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost (w/o ButtonGroup)\n          </TextLabel>\n        </Box>\n        <Flex>\n          {icons.map(([key, icon], index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon as={icon} />\n              </Button>\n            </Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(t.h2,{id:"props",children:["Props",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.h3,{id:"buttongroup-1",children:["ButtonGroup",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#buttongroup-1",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{align:"left",children:"Name"}),(0,o.jsx)(t.th,{align:"left",children:"Type"}),(0,o.jsx)(t.th,{align:"left",children:"Default"}),(0,o.jsx)(t.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"children"}),(0,o.jsxs)(t.td,{align:"left",children:["ReactNode | ",(0,o.jsx)(t.code,{children:"(context) => ReactNode"})]}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsx)(t.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"disabled"}),(0,o.jsx)(t.td,{align:"left",children:"boolean"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsxs)(t.td,{align:"left",children:["If ",(0,o.jsx)(t.code,{children:"true"}),", all buttons will be disabled."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"orientation"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'horizontal'"}),(0,o.jsx)(t.td,{align:"left",children:"The orientation of the button group. One of: 'horizontal', 'vertical'"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"size"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'md'"}),(0,o.jsx)(t.td,{align:"left",children:"The size of the button group. One of: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"variant"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'default'"}),(0,o.jsx)(t.td,{align:"left",children:"The variant of the button group. One of: 'emphasis', 'primary', 'default', 'secondary', 'ghost'"})]})]})]})]})}var M=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,r.ah)(),n.components).wrapper;return t?(0,o.jsx)(t,Object.assign({},n,{children:(0,o.jsx)(w,n)})):w(n)}},96835:function(n,t,e){"use strict";e.d(t,{Z:function(){return I}});var o=e(27216),r=e(40596),i=e(49857),a=e(73645),l=e(99870),c=e(62272),u=e(14594),s=e(65019),d=e(37384),h=e(99554),m=e(69111),v=e(5632),p=e(2784),f=e(65245);function B(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var g=function(n){var t=document.createElement("textarea");t.value=n,t.setAttribute("readonly",""),t.style.position="absolute",t.style.left="-9999px",document.body.appendChild(t);var e=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);t.select(),document.execCommand("copy"),document.body.removeChild(t),e&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(e))},x=function(n){var t,e=function(n){if(Array.isArray(n))return n}(t=(0,p.useState)(!1))||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{for(i=(e=e.call(n)).next;!(c=(o=i.call(e)).done)&&(l.push(o.value),2!==l.length);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(t,2)||function(n,t){if(n){if("string"==typeof n)return B(n,2);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return B(n,2)}}(t,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),o=e[0],r=e[1];return{value:n,onCopy:function(){g(n),r(!0),setTimeout(function(){return r(!1)},1500)},hasCopied:o}},y=e(63768),b=e(76761),k=e(73205),Z=e(98107),E=e(44285),C=["component","defaultExpanded","expanded","file","sandbox"];function D(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i,a,l=[],c=!0,u=!1;try{if(i=(e=e.call(n)).next,0===t){if(Object(e)!==e)return;c=!1}else for(;!(c=(o=i.call(e)).done)&&(l.push(o.value),l.length!==t);c=!0);}catch(n){u=!0,r=n}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(u)throw r}}return l}}(n,t)||function(n,t){if(n){if("string"==typeof n)return j(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return j(n,t)}}(n,t)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var T=function(n){var t,e=n.component,B=n.defaultExpanded,g=n.expanded,j=n.file,T=n.sandbox;!function(n,t){if(null!=n){var e,o,r=function(n,t){if(null==n)return{};var e,o,r={},i=Object.keys(n);for(o=0;o<i.length;o++)e=i[o],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)e=i[o],!(t.indexOf(e)>=0)&&Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}}}(n,C);var I=(0,v.useRouter)(),G=D((0,p.useReducer)(function(n){return!n},!1),2),w=G[0],M=G[1],S=(0,o.u)(),L=D((0,r.Z)(),1)[0],A={dark:b.y,light:b.q}[L],O=D((0,s.Z)(null!=g?g:void 0!==B&&B),2),z=O[0],R=O[1],F=x(null==j?void 0:j.data),N=F.onCopy,U=F.hasCopied,_=(0,p.useCallback)(function(){N()},[N]),P=(0,p.useCallback)(function(){(0,k.b)(T)},[T]),H=(0,p.useCallback)(function(){M(),R(!1)},[M,R]);return((0,p.useEffect)(function(){void 0!==g&&g!==z&&R(g)},[g,z,R]),e)?p.createElement(f.nu,{code:null==j?void 0:j.data,disabled:!0,language:"jsx",theme:A},p.createElement(i.Z,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[L],p:"4x"},p.createElement(i.Z,{fontSize:"sm",lineHeight:"sm"},p.createElement(p.Fragment,{key:w},p.createElement(e,null)))),p.createElement(a.Z,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},p.createElement(E.Z,{"data-track":z?"CodeBlock|hide_source|".concat((0,Z.Z)({path:I.pathname})):"CodeBlock|show_source|".concat((0,Z.Z)({path:I.pathname})),onClick:R},p.createElement(l.Z,{label:z?"Hide the source":"Show the source"},p.createElement(d.Z,null))),p.createElement(E.Z,{"data-track":"CodeBlock|copy_source|".concat((0,Z.Z)({path:I.pathname})),onClick:_},p.createElement(l.Z,{label:U?"Copied":"Copy the source"},p.createElement(h.Z,null))),p.createElement(E.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(I.pathname),onClick:P},p.createElement(l.Z,{label:"Edit in CodeSandbox"},p.createElement(y.Z,null))),p.createElement(E.Z,{"data-track":"CodeBlock|reset|".concat(I.pathname),onClick:H},p.createElement(l.Z,{label:"Reset the demo"},p.createElement(m.Z,null)))),p.createElement(c.Z,{in:z},p.createElement(u.Z,{in:z,unmountOnExit:!0},p.createElement(i.Z,{as:f.uz,sx:{fontFamily:"mono",fontSize:"md",lineHeight:"md",mb:"4x","& > .prism-code":{padding:"".concat(null==S?void 0:null===(t=S.space)||void 0===t?void 0:t["4x"]," !important"),overflowX:"auto"}}})))):p.createElement(f.nu,{code:null==j?void 0:j.data,disabled:!0,language:"jsx",theme:A},p.createElement(i.Z,{as:f.uz,sx:{fontFamily:"mono",fontSize:"sm","& > .prism-code":{overflowX:"auto"}}}))};T.displayName="Demo";var I=T},69388:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/button-group",function(){return e(91029)}])},63860:function(n,t,e){"use strict";e.d(t,{Z:function(){return i}}),e(2784);var o=e(75928),r=e(52903),i=(0,o.Z)((0,r.tZ)("path",{d:"M16 14v1h-16v-14h1v13zM5 9h-2v4h2zM8 5h-2v8h2zM11 7h-2v6h2zM14 3h-2v10h2z"}),"ChartBarIcon")},9537:function(n,t,e){"use strict";e.d(t,{Z:function(){return i}}),e(2784);var o=e(75928),r=e(52903),i=(0,o.Z)((0,r.tZ)("path",{d:"M16 14v1h-16v-14h1v13zM3.404 11.377l3.336-3.285 2.993 2.993 5.681-5.639-1.414-1.414-4.246 4.246-3.016-3.016-1.414 1.414 0.003 0.003-3.325 3.273z"}),"ChartLineIcon")},81947:function(n,t,e){"use strict";e.d(t,{Z:function(){return i}}),e(2784);var o=e(75928),r=e(52903),i=(0,o.Z)((0,r.tZ)("path",{d:"M7 8l5.067 5.125c-1.173 1.159-2.787 1.875-4.567 1.875-3.59 0-6.5-2.91-6.5-6.5v0c0-3.59 2.41-6.5 6-6.5zM9.036 8l4.398 4.398c0.975-1.187 1.567-2.722 1.567-4.394 0-0.001 0-0.003 0-0.004v0zM8 1v6h6.922c-0.766-3.267-3.522-5.71-6.893-5.998l-0.029-0.002z"}),"ChartPieIcon")},59437:function(n,t,e){"use strict";e.d(t,{Z:function(){return i}}),e(2784);var o=e(75928),r=e(52903),i=(0,o.Z)((0,r.tZ)("path",{d:"M15 1h-14c-0.552 0.002-0.998 0.448-1 1v12c0.002 0.552 0.448 0.998 1 1h14c0.552-0.002 0.998-0.448 1-1v-12c-0.002-0.552-0.448-0.998-1-1h-0zM10 3v3h-4v-3zM10 7v3h-4v-3zM1 3h4v3h-4zM1 7h4v3h-4zM1 14v-3h4v3zM6 14v-3h4v3zM15 14h-4v-3h4zM15 10h-4v-3h4zM15 6h-4v-3h4z"}),"ChartTableIcon")},99554:function(n,t,e){"use strict";e.d(t,{Z:function(){return i}}),e(2784);var o=e(75928),r=e(52903),i=(0,o.Z)((0,r.tZ)("path",{d:"M12 0h-6c-0.5 0-1 0.5-1 1v3h-3c-0.5 0-1 0.5-1 1v10c0 0.5 0.5 1 1 1h8c0.5 0 1-0.5 1-1v-3h3c0.5 0 1-0.5 1-1v-8l-3-3zM12 1.4l1.6 1.6h-1.6v-1.6zM10 15h-8v-10h5v3h3v7zM8 7v-1.6l1.6 1.6h-1.6zM14 11h-3v-4l-3-3h-2v-3h5v3h3v7z"}),"FileCopyOIcon")},69111:function(n,t,e){"use strict";e.d(t,{Z:function(){return i}}),e(2784);var o=e(75928),r=e(52903),i=(0,o.Z)((0,r.tZ)("path",{d:"M10 7l1.995-1.995c-0.921-1.215-2.365-1.992-3.99-1.992-2.758 0-4.993 2.235-4.993 4.993s2.235 4.993 4.993 4.993c1.839 0 3.446-0.995 4.313-2.475l0.013-0.024 1.732 1c-1.233 2.111-3.487 3.507-6.068 3.507-3.867 0-7.003-3.135-7.003-7.003s3.135-7.003 7.003-7.003c2.183 0 4.133 0.999 5.417 2.565l0.010 0.012 1.579-1.579v5z"}),"RedoIcon")},39256:function(n,t,e){"use strict";e.d(t,{Z:function(){return f}});var o=e(53860),r=e(56818),i=e(92307),a=e.n(i),l=e(2784),c=e(98827),u=e(12711),s=e(34730),d=e(52903),h=e(49857),m=["children","disabled","orientation","size","variant"],v=a()(function(n){return(0,o.Zj)({},n)}),p=(0,l.forwardRef)(function(n,t){var e=(0,c.Z)({props:n,name:"ButtonGroup"}),i=e.children,a=e.disabled,l=e.orientation,p=void 0===l?"horizontal":l,f=e.size,B=e.variant,g=(0,o.Kd)(e,m),x=(0,s.K7)({orientation:p}),y=v({disabled:a,orientation:p,size:void 0===f?"md":f,variant:void 0===B?"default":B});return(0,d.tZ)(u.u.Provider,{value:y,children:(0,d.tZ)(h.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({ref:t},x),g),{},{children:(0,r.Pu)(i,y)}))})});p.displayName="ButtonGroup";var f=p},29088:function(n,t,e){"use strict";e.d(t,{Z:function(){return g}});var o,r,i=e(53860),a=e(95530),l=e(5081),c=e(2784),u=e(98827),s=e(28165),d=(0,s.F4)(o||(o=(0,i.AI)(["\n  0% {\n      transform: rotate(0deg)\n  }\n  to {\n      transform: rotate(1turn)\n  }\n"]))),h=(0,s.F4)(r||(r=(0,i.AI)(["\n  0% {\n      transform: rotate(0deg)\n  }\n  to {\n      transform: rotate(-1turn)\n  }\n"]))),m=function(n){var t,e=n.spin;return"ccw"===e?t="".concat(h," 2s linear infinite"):("cw"===e||!0===e)&&(t="".concat(d," 2s linear infinite")),{animation:t}},v=e(27216),p=e(52903),f=["children","icon","spin"],B=(0,c.forwardRef)(function(n,t){var e=(0,u.Z)({props:n,name:"Icon"}),o=e.children,r=e.icon,s=e.spin,d=(0,i.Kd)(e,f),h=(0,v.u)(),B=(0,c.useRef)([null,null]),g="string"==typeof r&&r.length>0&&function(n){var t,e=(0,i.ZQ)(B.current,2),o=e[0],r=e[1];if(o===n)return r;var a=null===(t=(0,l.rY)(null==h?void 0:h.icons).find(function(t){return(0,i.ZQ)(t,1)[0]===n}))||void 0===t?void 0:t[1];return a&&(B.current=[n,a]),a}(r)||o,x=m({spin:void 0!==s&&s});return(0,p.tZ)(a.Z,(0,i.Zj)((0,i.Zj)((0,i.Zj)({ref:t},x),d),{},{children:g}))});B.displayName="Icon";var g=B},67622:function(n,t,e){"use strict";e.d(t,{Z:function(){return d}});var o=e(53860),r=e(2784),i=e(98827),a=e(70758),l=e(91334),c=e(52903),u=["size"],s=(0,r.forwardRef)(function(n,t){var e=(0,i.Z)({props:n,name:"TextLabel"}),r=e.size,s=(0,o.Kd)(e,u),d=(0,l.w)({size:r});return(0,c.tZ)(a.Z,(0,o.Zj)((0,o.Zj)({as:"label",ref:t},d),s))});s.displayName="TextLabel";var d=s}},function(n){n.O(0,[2888,9774,179],function(){return n(n.s=69388)}),_N_E=n.O()}]);