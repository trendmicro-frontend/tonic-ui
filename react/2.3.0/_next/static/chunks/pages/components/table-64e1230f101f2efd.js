(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7807],{41859:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return tB}});var o=t(52322),r=t(45392),l=t(96835),i=t(95412),a=t(73705),c=t(12225),s=t(85017),d=t(49857),u=t(70758),m=t(30514),f=t(75715),p=t(58614),h=t(17179),g=t(39108),b=t(15345),y=t(63433),x=t(76635),v=t.n(x),w=t(2784);function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(){return(C=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function S(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function R(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?S(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==T(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==T(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===T(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):S(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function z(e,n){if(e){if("string"==typeof e)return D(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return D(e,n)}}function D(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var k=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],P=v().range(360).map(function(e){var n=v().sampleSize(k,v().random(0,k.length)),t=new Date(Date.now()-v().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),E=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,s.Z)())||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{for(l=(t=t.call(e)).next;!(c=(o=l.call(t)).done)&&(a.push(o.value),1!==a.length);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,1)||z(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t=(0,w.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return D(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||z(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:100},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),o=(0,i.b7)({data:P,columns:t,defaultColumn:{minSize:80},getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),r=(0,w.useRef)(),l=(0,c.MG)({count:o.getRowModel().rows.length,getScrollElement:function(){var e;return null===(e=r.current)||void 0===e?void 0:e.firstChild},estimateSize:function(e){return 36},overscan:10});return w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(u.Z,null,"Total: ",o.getRowModel().rows.length)),w.createElement(m.Z,C({layout:"flexbox"},{height:396}),w.createElement(f.Z,null,o.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=R({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,C({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(b.Z,{ref:r,height:"100%",overflow:"visible"},w.createElement(d.Z,{position:"relative",width:"100%",style:{height:l.getTotalSize()}},w.createElement(y.Z,null,l.getVirtualItems().map(function(e){var t=o.getRowModel().rows[e.index];return w.createElement(d.Z,{key:e.key,position:"absolute",top:0,left:0,width:"100%",style:{height:"".concat(e.size,"px"),transform:"translateY(".concat(e.start,"px)")}},t&&w.createElement(p.Z,{_hover:{backgroundColor:n.background.highlighted}},t.getVisibleCells().map(function(e){var n=R({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,C({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))})))}))))))},j=t(40596),I=t(78366),O=t(1847),B=t(73645),M=t(99293),Z=t(99870),A=t(69821),H=t(34925),V=t(41965),F=t(86851),W=t(31222),G=t(65019);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(){return(N=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function K(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function _(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?K(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==L(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==L(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===L(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):K(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function U(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return X(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return X(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var Y=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],$=function(){var e=U((0,j.Z)(),1)[0],n=U((0,s.Z)(),1)[0],t=U((0,w.useState)([{id:"eventType",desc:!1}]),2),o=t[0],r=t[1],l=U((0,G.Z)(!1),2),c=l[0],b=l[1];(0,w.useEffect)(function(){c&&r([])},[c]);var x=(0,w.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),v=(0,i.b7)({data:Y,columns:x,defaultColumn:{minSize:80},state:{sorting:o},enableSorting:!0,enableSortingRemoval:c,getCoreRowModel:(0,a.sC)(),getSortedRowModel:(0,a.tj)(),onSortingChange:function(e){r(e)},getRowId:function(e,n){return e.id}}),T=w.createElement(d.Z,{p:"1x"},w.createElement(u.Z,null,"If ",w.createElement(I.Z,null,"true")," then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ..."),w.createElement(u.Z,null,"If ",w.createElement(I.Z,null,"false")," then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ..."));return w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(O.Z,{checked:c,onChange:function(){b()}},w.createElement(B.Z,{alignItems:"center"},"Enable the ability to remove sorting for the table",w.createElement(M.Z,{width:"2x"}),w.createElement(Z.Z,{label:"dark"===e?w.createElement(A.Z,null,T):w.createElement(H.Z,null,T)},w.createElement(V.Z,null))))),w.createElement(m.Z,{layout:"flexbox"},w.createElement(f.Z,null,v.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var t,o=_({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return e.column.getCanSort()&&(o=_(_({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:n.background.highlighted}})),e.column.getIsSorted()&&(o=_(_({},o),{},{color:n.color.emphasis})),w.createElement(h.Z,N({key:e.id,onClick:e.column.getToggleSortingHandler()},o),e.isPlaceholder?null:w.createElement(B.Z,{alignItems:"center"},w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())),null!==(t=({asc:w.createElement(F.Z,{size:"5x",ml:"1x"}),desc:w.createElement(W.Z,{size:"5x",ml:"1x"})})[e.column.getIsSorted()])&&void 0!==t?t:null))}))})),w.createElement(y.Z,null,v.getRowModel().rows.map(function(e){return w.createElement(p.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=_({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,N({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},q=t(23094),Q=t(66548),J=t(82851),ee=t(56818),en=t(13409),et=t(95530);function eo(){return(eo=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var er=function(e){return w.createElement(et.Z,eo({width:"2x",height:"4x",viewBox:"0 0 8 16"},e),w.createElement("circle",{cx:"2",cy:"2",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"2",cy:"6",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"2",cy:"10",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"2",cy:"14",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"6",cy:"2",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"6",cy:"6",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"6",cy:"10",r:"1",fill:"#5E5E5E"}),w.createElement("circle",{cx:"6",cy:"14",r:"1",fill:"#5E5E5E"}))};function el(e){return(el="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var ei=["sx"];function ea(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function ec(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ea(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==el(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==el(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===el(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ea(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function es(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||eu(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ed(){return(ed=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function eu(e,n){if(e){if("string"==typeof e)return em(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return em(e,n)}}function em(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var ef=(0,w.forwardRef)(function(e,n){var t,o=e.sx,r=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,ei);return w.createElement(B.Z,ed({sx:[{'[role="row"]:hover > [role="cell"] &':{opacity:1},opacity:0,cursor:"move",px:"1x",width:"4x",position:"absolute",left:0}].concat(function(e){if(Array.isArray(e))return em(e)}(t=Array.isArray(o)?o:[o])||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||eu(t)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())},r))});ef.displayName="DragHandle";var ep=function(e){var n=e.children,t=e.id,o=(0,Q.nB)({id:t});return n({attributes:o.attributes,isDragging:o.isDragging,listeners:o.listeners,setActivatorNodeRef:o.setActivatorNodeRef,setNodeRef:o.setNodeRef,transform:o.transform,transition:o.transition})},eh=function(e){var n=e.children,t=(0,w.useMemo)(function(){return{sideEffects:(0,q.Ai)({styles:{active:{opacity:"0.4"}}})}},[]);return w.createElement(q.y9,{dropAnimation:t},n)},eg=function(){var e=es((0,s.Z)(),1)[0],n=es((0,w.useState)([{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}]),2),t=n[0],o=n[1],r=es((0,w.useState)({}),2),l=r[0],c=r[1],b=(0,w.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return w.createElement(O.Z,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return w.createElement(O.Z,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},minSize:48,size:48,style:{px:"4x"}},{accessorKey:"eventType",header:function(){return w.createElement(g.Z,null,"Event Type")},cell:function(e){var n=e.getValue;return w.createElement(g.Z,null,n())},size:240},{accessorKey:"affectedDevices",header:function(){return w.createElement(g.Z,null,"Affected Devices")},cell:function(e){var n=e.getValue;return w.createElement(g.Z,null,n())},size:150,style:{textAlign:"right"}},{accessorKey:"detections",header:function(){return w.createElement(g.Z,null,"Detections")},cell:function(e){var n=e.getValue;return w.createElement(g.Z,null,n())},size:150,style:{textAlign:"right"}}]},[]),x=(0,i.b7)({data:t,columns:b,defaultColumn:{minSize:80},state:{rowSelection:l},enableRowSelection:!0,onRowSelectionChange:c,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),v=Object.keys(l).length,T=x.getRowModel().rows,C=es((0,w.useState)(null),2),S=C[0],R=C[1],z=(0,q.Dy)((0,q.VT)(q.MA),(0,q.VT)(q.we),(0,q.VT)(q.Lg,{coordinateGetter:Q.is})),D=(0,w.useCallback)(function(e){R(e.active.id)},[]),k=(0,w.useCallback)(function(e){var n=e.over,r=e.active;if(n&&r.id!==(null==n?void 0:n.id)){var l=T.findIndex(function(e){return e.id===r.id}),i=T.findIndex(function(e){return e.id===n.id});o((0,Q.Rp)(t,l,i))}R(null)},[t,T]),P=(0,w.useCallback)(function(e){R(null)},[]),E=(0,w.useCallback)(function(n){return n?w.createElement(ep,{id:n.id},function(t){var o=t.attributes,r=t.isDragging,l=t.listeners,a=t.setActivatorNodeRef,c=t.setNodeRef,s=t.transform,d=t.transition,u={cursor:r?"move":void 0,_hover:{backgroundColor:r?"gray:70":e.background.highlighted},_selected:{backgroundColor:r?"gray:70":e.background.selected},opacity:r?.4:void 0,transform:J.ux.Translate.toString(s),transition:d,zIndex:r?1:0};return w.createElement(p.Z,{ref:c,"data-selected":(0,ee.PB)(n.getIsSelected()),sx:u},n.getVisibleCells().map(function(e){var n=ec({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return"selection"===e.column.id?w.createElement(h.Z,{key:e.id,sx:ec(ec({},n),{},{position:"relative"})},w.createElement(B.Z,{alignItems:"center"},w.createElement(ef,ed({ref:a},o,l),w.createElement(er,null)),(0,i.ie)(e.column.columnDef.cell,e.getContext()))):w.createElement(h.Z,{key:e.id,sx:ec({},n)},(0,i.ie)(e.column.columnDef.cell,e.getContext()))}))}):null},[e]);return w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(u.Z,null,v," selected")),w.createElement(q.LB,{sensors:z,onDragStart:D,onDragEnd:k,onDragCancel:P},w.createElement(Q.Fo,{items:T},w.createElement(m.Z,{layout:"flexbox"},w.createElement(f.Z,null,x.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=ec({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,ed({key:e.id},n),e.isPlaceholder?null:(0,i.ie)(e.column.columnDef.header,e.getContext()))}))})),w.createElement(y.Z,null,T.map(function(e){return w.createElement(w.Fragment,{key:e.id},E(e))}),w.createElement(eh,null,(0,en.Rw)(S)?null:E(T.find(function(e){return e.id===S}))))))))};function eb(e){return(eb="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ey(){return(ey=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function ex(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function ev(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ex(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==eb(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==eb(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===eb(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ex(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function ew(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eT(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return eT(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eT(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var eC=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],eS=function(){var e=ew((0,s.Z)(),1)[0],n=ew((0,w.useState)({}),2),t=n[0],o=n[1],r=(0,w.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return w.createElement(O.Z,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return w.createElement(O.Z,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},minSize:48,size:48,style:{px:"4x"}},{accessorKey:"eventType",header:function(){return w.createElement(g.Z,null,"Event Type")},cell:function(e){var n=e.getValue;return w.createElement(g.Z,null,n())},size:240},{accessorKey:"affectedDevices",header:function(){return w.createElement(g.Z,null,"Affected Devices")},cell:function(e){var n=e.getValue;return w.createElement(g.Z,null,n())},size:150,style:{textAlign:"right"}},{accessorKey:"detections",header:function(){return w.createElement(g.Z,null,"Detections")},cell:function(e){var n=e.getValue;return w.createElement(g.Z,null,n())},size:150,style:{textAlign:"right"}}]},[]),l=(0,i.b7)({data:eC,columns:r,defaultColumn:{minSize:80},state:{rowSelection:t},enableRowSelection:!0,onRowSelectionChange:o,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),c=Object.keys(t).length;return w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(u.Z,null,c," selected")),w.createElement(m.Z,{layout:"flexbox"},w.createElement(f.Z,null,l.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=ev({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,ey({key:e.id},n),e.isPlaceholder?null:(0,i.ie)(e.column.columnDef.header,e.getContext()))}))})),w.createElement(y.Z,null,l.getRowModel().rows.map(function(n){return w.createElement(p.Z,{key:n.id,"data-selected":(0,ee.PB)(n.getIsSelected()),_hover:{backgroundColor:e.background.highlighted},_selected:{backgroundColor:e.background.selected}},n.getVisibleCells().map(function(e){var n=ev({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,ey({key:e.id},n),(0,i.ie)(e.column.columnDef.cell,e.getContext()))}))}))))},eR=t(6194),ez=t(67622),eD=t(14594),ek=t(83513),eP=t(45795),eE=t(83377);function ej(e){return(ej="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var eI=["isExpanded"];function eO(){return(eO=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function eB(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function eM(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?eB(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==ej(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==ej(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===ej(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):eB(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function eZ(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eA(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return eA(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eA(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var eH=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],eV=(0,w.forwardRef)(function(e,n){var t=e.isExpanded,o=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,eI),r=t?Math.floor(93.1):133,l=eE.YU.easeOut,i=t?(0,eE.c)({timeout:r,easing:l}):(0,eE.Zk)({timeout:r,easing:l}),a={transform:t?"rotate(90deg)":"rotate(0deg)",transition:(0,eE.zx)("transform",i)};return w.createElement(ek.Z,o,w.createElement(eP.Z,eO({size:"4x"},a)))});eV.displayName="TableRowToggleIcon";var eF=function(){var e=eZ((0,j.Z)(),1)[0],n=eZ((0,s.Z)(),1)[0],t=function(n){var t=Object.entries(n.row.original);return w.createElement(B.Z,{borderBottom:1,borderBottomColor:{dark:"gray:70",light:"gray:30"}[e]},w.createElement(d.Z,{width:"12x",borderRight:2,borderRightColor:{dark:"gray:60",light:"gray:30"}[e]}),w.createElement(d.Z,{as:"pre",fontFamily:"mono",m:0,px:"3x",py:"2x"},w.createElement(eR.Z,{templateColumns:"auto auto",columnGap:"10x",rowGap:"1x"},t.map(function(e){var n=eZ(e,2),t=n[0],o=n[1];return w.createElement(w.Fragment,{key:t},w.createElement(ez.Z,null,t),w.createElement(u.Z,null,Array.isArray(o)?o.map(function(e){return w.createElement(u.Z,{key:e},e)}):"boolean"==typeof o?o.toString():o))}))))},o=(0,w.useMemo)(function(){return[{id:"expand",header:function(){return null},cell:function(e){var n=e.row,t=n.getCanExpand(),o=n.getIsExpanded();return t?w.createElement(eV,{isExpanded:o,onClick:n.getToggleExpandedHandler()}):null},minSize:48,size:48},{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),r=(0,i.b7)({data:eH,columns:o,defaultColumn:{minSize:80},getRowCanExpand:function(){return!0},getCoreRowModel:(0,a.sC)(),getExpandedRowModel:(0,a.rV)(),getRowId:function(e,n){return e.id}});return w.createElement(m.Z,{layout:"flexbox"},w.createElement(f.Z,null,r.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=eM({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,eO({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(y.Z,null,r.getRowModel().rows.map(function(e){return w.createElement(w.Fragment,{key:e.id},w.createElement(p.Z,{"data-selected":(0,ee.PB)(e.getIsExpanded()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},e.getVisibleCells().map(function(e){var n=eM({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,eO({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))})),e.getCanExpand()&&w.createElement(eD.Z,{in:e.getIsExpanded()},t({row:e})),e.getCanExpand()&&!1)})))},eW=t(72448),eG=t(15192),eL=t(66785),eN=t(87888),eK=t(94829),e_=t(3398),eU=t(39256),eX=t(62080),eY=t(40809),e$=t(5081);function eq(e){return(eq="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function eQ(){return(eQ=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function eJ(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function e0(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?eJ(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==eq(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==eq(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===eq(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):eJ(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function e1(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||e5(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e5(e,n){if(e){if("string"==typeof e)return e2(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return e2(e,n)}}function e2(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var e4=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],e3=v().range(360).map(function(e){var n=v().sampleSize(e4,v().random(0,e4.length)),t=new Date(Date.now()-v().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),e6=function(e){var n=e.count,t=e.defaultPage,o=e.defaultRowsPerPage,r=e.onPageChange,l=e.onRowsPerPageChange,i=e.page,a=e.rowsPerPage,c=e.rowsPerPageOptions,d=void 0===c?[10,25,50,100]:c;e.showFirstButton,e.showLastButton;var m=e1((0,s.Z)(),1)[0],f=null!=o?o:(0,e$.rY)(d)[0],p=e1((0,w.useState)(null!=i?i:void 0===t?1:t),2),h=p[0],g=p[1],b=e1((0,w.useState)(null!=a?a:f),2),y=b[0],x=b[1];(0,w.useEffect)(function(){void 0!==i&&g(i)},[i]),(0,w.useEffect)(function(){void 0!==a&&x(a)},[a]);var v=(0,w.useCallback)(function(e){void 0!==i||g(e),"function"==typeof r&&r(e)},[i,r]),T=(0,w.useCallback)(function(e){void 0!==a||x(e),"function"==typeof l&&l(e)},[a,l]),C=Math.ceil(n/y),S=h>1,R=h<C;return w.createElement(B.Z,{alignItems:"center",justifyContent:"flex-end",backgroundColor:m.background.secondary,px:"6x",py:"3x"},w.createElement(u.Z,{mr:"2x"},"Total: ",n),w.createElement(eW.Z,{orientation:"vertical",height:"6x"}),w.createElement(eG.Z,null,w.createElement(eL.Z,{variant:"ghost"},y," per page"),w.createElement(eN.Z,{onClick:function(e){var n=(0,e$.q9)(e.target.value);n>0&&(v(1),T(n))},width:"100%"},d.map(function(e){return w.createElement(eK.Z,{key:e,value:e},e)}))),w.createElement(eW.Z,{orientation:"vertical",height:"6x"}),w.createElement(M.Z,{width:"2x"}),w.createElement(e_.Z,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,e$.q9)(e.target.value);n<=1?v(1):n>=C?v(C):v(n)},value:h}),w.createElement(M.Z,{width:"2x"}),w.createElement(u.Z,null,"/"),w.createElement(M.Z,{width:"2x"}),w.createElement(u.Z,null,C),w.createElement(M.Z,{width:"2x"}),w.createElement(eU.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},w.createElement(eX.Z,{width:"8x",disabled:!S,onClick:function(e){v(h-1)}},w.createElement(eY.Z,null)),w.createElement(eX.Z,{width:"8x",disabled:!R,onClick:function(e){v(h+1)}},w.createElement(eP.Z,null))))},e8=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},e9=function(){var e=e1((0,s.Z)(),1)[0],n=(0,w.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return e2(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||e5(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:150},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),t=(0,i.b7)({data:e3,columns:n,defaultColumn:{minSize:80},getCoreRowModel:(0,a.sC)(),getPaginationRowModel:(0,a.G_)(),getRowId:function(e,n){return e.id}}),o=t.getState().pagination.pageIndex+1,r=t.getCoreRowModel().rows.length,l={};return l={height:452},w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(u.Z,null,"Current page: ",o)),w.createElement(m.Z,eQ({layout:"flexbox"},l),w.createElement(f.Z,null,t.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=e0({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,eQ({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(e8,{condition:!0,wrapper:function(e){return w.createElement(b.Z,{height:"100%",overflow:"visible"},e)}},w.createElement(y.Z,null,t.getRowModel().rows.map(function(n){return w.createElement(p.Z,{key:n.id,_hover:{backgroundColor:e.background.highlighted}},n.getVisibleCells().map(function(e){var n=e0({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,eQ({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))),w.createElement(e6,{count:r,onPageChange:function(e){var n=Math.max((0,e$.q9)(e)-1,0);t.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,e$.q9)(e),1);t.setPageSize(n)}})))},e7=t(27216),ne=t(23638),nn=t(29970),nt=t(6738),no=t(82412),nr=t(6192),nl=t(2501),ni=t(95346),na=t(61481),nc=t(17025),ns=t(42309),nd=t(18149),nu=t.n(nd),nm=t(34498),nf=t.n(nm);function np(e){return(np="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nh(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||ng(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ng(e,n){if(e){if("string"==typeof e)return nb(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return nb(e,n)}}function nb(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}function ny(){return(ny=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function nx(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function nv(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?nx(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==np(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==np(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===np(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):nx(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}var nw="UPDATE_COLUMNS",nT=function(e,n){return n.type===nw?nv(nv({},e),{},{columns:(0,e$.rY)(n.payload)}):e},nC=(0,w.forwardRef)(function(e,n){return w.createElement(B.Z,ny({role:"presentation",sx:{alignItems:"center",cursor:"move"}},e))});nC.displayName="DragHandle";var nS=function(e){var n=e.children,t=(0,w.useMemo)(function(){return{sideEffects:(0,q.Ai)({styles:{active:{opacity:"0.4"}}})}},[]);return w.createElement(q.y9,{dropAnimation:t},n)},nR=function(e){var n=e.children,t=e.id,o=(0,Q.nB)({id:t});return n({attributes:o.attributes,isDragging:o.isDragging,listeners:o.listeners,setActivatorNodeRef:o.setActivatorNodeRef,setNodeRef:o.setNodeRef,transform:o.transform,transition:o.transition})},nz=function(e){var n=e.columns,t=e.defaultColumnOrder,o=e.onUpdateColumns,r=e.isOpen,l=e.onClose,i=nh((0,s.Z)(),1)[0],a=nh((0,w.useReducer)(nT,{columns:(0,e$.rY)(n)}),2),c=a[0],m=a[1],f=c.columns.every(function(e){return!1!==e.isVisible}),p=(0,w.useCallback)(function(){var e=!f;m({type:nw,payload:c.columns.map(function(n){return n.isPinned?n:nv(nv({},n),{},{isVisible:e})})})},[f,c.columns]);(0,w.useEffect)(function(){m({type:nw,payload:n})},[n]);var h=(0,w.useCallback)(function(){m({type:nw,payload:nf()(c.columns,function(e){return t.indexOf(e.id)},["asc"]).map(function(e){var n=t.indexOf(e.id)>=0;return e.isVisible=n,e})})},[t,c.columns]),g=(0,w.useCallback)(function(){(0,e$.zU)(o)(c.columns),(0,e$.zU)(l)()},[l,o,c.columns]),b=nh((0,w.useState)(null),2),y=b[0],x=b[1],v=(0,q.Dy)((0,q.VT)(q.MA),(0,q.VT)(q.we),(0,q.VT)(q.Lg,{coordinateGetter:Q.is})),T=function(e){return w.createElement(nR,{id:e.id},function(n){var t=n.attributes,o=n.isDragging,r=n.listeners,l=n.setNodeRef,a=n.setActivatorNodeRef,s=n.transform,u=n.transition,f={};return e.isPinned||(f={_hover:{backgroundColor:o?"gray:70":i.background.highlighted},opacity:o?.4:void 0,transform:J.ux.Translate.toString(s),transition:u,zIndex:o?"modal":void 0}),w.createElement(d.Z,{ref:l,sx:f},w.createElement(B.Z,{alignItems:"center",py:"2x"},w.createElement(B.Z,{sx:{"*:hover > &":{opacity:1},opacity:0,minWidth:"4x",px:"1x"}},!e.isPinned&&w.createElement(nC,ny({ref:a},t,r),w.createElement(er,null))),w.createElement(O.Z,{disabled:e.isPinned,checked:e.isVisible,onChange:function(n){var t=n.target.checked;m({type:nw,payload:c.columns.map(function(n){return n.id!==e.id?n:nv(nv({},n),{},{isVisible:t})})})},sx:{width:"100%"}},e.label)))})},C=nu()(c.columns,n);return w.createElement(no.Z,{autoFocus:!0,backdrop:!0,closeOnEsc:!0,closeOnOutsideClick:!0,returnFocusOnClose:!1,ensureFocus:!0,isClosable:!0,isOpen:r,onClose:l,size:"sm"},w.createElement(nr.Z,null),w.createElement(nl.Z,null,w.createElement(ni.Z,null,"Customize Columns"),w.createElement(na.Z,null,w.createElement(B.Z,{mb:"4x",alignItems:"center",justifyContent:"space-between"},w.createElement(u.Z,{color:i.color.secondary},"Shown in table"),w.createElement(nc.Z,{onClick:p},f?"Clear all":"Select all")),w.createElement(q.LB,{sensors:v,onDragStart:function(e){x(e.active.id)},onDragEnd:function(e){var n=e.active,t=e.over;if(t&&n.id!==(null==t?void 0:t.id)){var o,r=function(e){if(Array.isArray(e))return nb(e)}(o=c.columns)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||ng(o)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),l=r.findIndex(function(e){return e.id===n.id}),i=r.findIndex(function(e){return e.id===t.id});m({type:nw,payload:(0,Q.Rp)(r,l,i)})}x(null)},onDragCancel:function(){x(null)}},w.createElement(Q.Fo,{items:c.columns},w.createElement(B.Z,{sx:{flexDirection:"column",rowGap:"1x"}},c.columns.map(function(e){return w.createElement(w.Fragment,{key:e.id},T(e))}))),w.createElement(nS,null,(0,en.Rw)(y)?null:T(c.columns.find(function(e){return e.id===y}))))),w.createElement(ns.Z,{justifyContent:"space-between"},w.createElement(B.Z,{alignItems:"center",columnGap:"2x"},w.createElement(eX.Z,{disabled:C,variant:"default",onClick:g},"Save"),w.createElement(eX.Z,{variant:"default",onClick:l},"Cancel")),w.createElement(eX.Z,{variant:"secondary",onClick:h},"Reset to Default"))))};function nD(e){return(nD="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nk(){return(nk=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function nP(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function nE(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?nP(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==nD(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==nD(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===nD(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):nP(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function nj(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return nI(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return nI(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nI(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var nO=function e(n,t){var o=(e.canvas||(e.canvas=document.createElement("canvas"))).getContext("2d");return o.font=t,o.measureText(n).width||0},nB=function(){var e=(0,e7.u)(),n=nj((0,s.Z)(),1)[0],t=["priority","policy","modifiedTime","modifiedBy"],o=nj((0,w.useState)(t),2),r=o[0],l=o[1],c=nj((0,w.useState)({priority:!0,policy:!0,modifiedTime:!0,modifiedBy:!0}),2),u=c[0],b=c[1],x=(0,nn.Z)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]}),T=(0,nn.Z)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:80,isPinned:!0},{id:"policy",header:"Policy",accessorKey:"policy",size:"auto",isPinned:!1},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=new Date((0,e.getValue)());return"Invalid Date"===n.toString()?"-":w.createElement(g.Z,null,n.toLocaleString())},size:"auto",isPinned:!1},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:"auto",isPinned:!1}]}),C=(0,i.b7)({data:x,columns:T,defaultColumn:{minSize:80},state:{columnOrder:r,columnVisibility:u},onColumnVisibilityChange:b,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),S=nj((0,w.useState)(0),2),R=S[0],z=S[1];(0,w.useEffect)(function(){if(R){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=C.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var i="string"==typeof o.header?nO(o.header,n):0;return{id:t,size:Math.max(R*parseFloat(l)/100,i+24,r)}}return{id:t,size:r}}),o=C.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?nO(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),l=o.reduce(function(e,n){return e+n.size},0),i=R-r;if(0===o.length&&i>0){var a=i/t.length;t.forEach(function(e){e.size=e.size+a}),i=0}o.length>0&&i>l&&o.forEach(function(e,n){e.size=Math.max(i/(o.length-n),e.size),i-=e.size});for(var c={},s=0;s<t.length;s++){var d=t[s];c[d.id]=d.size}for(var u=0;u<o.length;u++){var m=o[u];c[m.id]=m.size}C.setColumnSizing(c)}},[T,C,R,e]);var D=nj((0,w.useState)(!1),2),k=D[0],P=D[1],E=C.getState().columnOrder.map(function(e){var n=C.getColumn(e);return{id:e,label:n.columnDef.header,isPinned:n.columnDef.isPinned,isVisible:C.getState().columnVisibility[e]}}),j=(0,w.useCallback)(function(e){var n=e.map(function(e){return e.id}),t=e.reduce(function(e,n){return e[n.id]=n.isVisible,e},{});l(n),b(t)},[l]);return w.createElement(w.Fragment,null,w.createElement(nz,{columns:E,defaultColumnOrder:t,onUpdateColumns:j,isOpen:k,onClose:function(){return P(!1)}}),w.createElement(B.Z,{justifyContent:"flex-end",mb:"4x"},w.createElement(eX.Z,{variant:"secondary",onClick:function(){return P(!0)}},w.createElement(ne.Z,null),w.createElement(M.Z,{width:"2x"}),"Customize Columns")),w.createElement(d.Z,null,w.createElement(nt.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;R!==n&&z(n)}},function(e){var t=e.width;return w.createElement(m.Z,{layout:"flexbox",sx:{visibility:v().isEmpty(C.getState().columnSizing)?"hidden":"visible",width:t}},w.createElement(f.Z,null,C.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=nE({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,nk({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(y.Z,null,C.getRowModel().rows.map(function(e){return w.createElement(p.Z,{key:e.id,"data-selected":(0,ee.PB)(e.getIsSelected()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},e.getVisibleCells().map(function(e){var n=nE({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,nk({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))})))})))},nM=t(61619);function nZ(e){return(nZ="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nA(){return(nA=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function nH(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function nV(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?nH(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==nZ(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==nZ(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===nZ(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):nH(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function nF(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return nW(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return nW(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nW(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var nG=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],nL=function(){var e=nF((0,s.Z)(),1)[0],n=nF((0,w.useState)({}),2),t=n[0],o=n[1],r=(0,w.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),l=(0,i.b7)({data:nG,columns:r,defaultColumn:{minSize:80},state:{columnVisibility:t},onColumnVisibilityChange:o,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}});return w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(B.Z,{display:"inline-flex",flexDirection:"column"},w.createElement(O.Z,{checked:l.getIsAllColumnsVisible(),indeterminate:l.getIsSomeColumnsVisible()&&!l.getIsAllColumnsVisible(),onChange:l.getToggleAllColumnsVisibilityHandler()},"Toggle All"),w.createElement(eW.Z,{my:"2x"}),w.createElement(nM.Z,{spacing:"1x"},l.getAllLeafColumns().map(function(e){return w.createElement(w.Fragment,{key:e.id},w.createElement(O.Z,{checked:e.getIsVisible(),onChange:e.getToggleVisibilityHandler()},e.columnDef.header))})))),w.createElement(m.Z,{layout:"flexbox"},w.createElement(f.Z,null,l.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=nV({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,nA({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(y.Z,null,l.getRowModel().rows.map(function(n){return w.createElement(p.Z,{key:n.id,"data-selected":(0,ee.PB)(n.getIsSelected()),_hover:{backgroundColor:e.background.highlighted},_selected:{backgroundColor:e.background.selected}},n.getVisibleCells().map(function(e){var n=nV({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,nA({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},nN=t(10636);function nK(e){return(nK="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n_(){return(n_=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function nU(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function nX(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?nU(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==nK(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==nK(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===nK(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):nU(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function nY(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return n$(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return n$(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n$(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var nq=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],nQ=function(){var e=nY((0,j.Z)(),1)[0],n=nY((0,s.Z)(),1)[0],t=nY((0,w.useState)("onChange"),2),o=t[0],r=t[1],l=(0,w.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",enableResizing:!0,size:240},{header:"Affected Devices",accessorKey:"affectedDevices",enableResizing:!0,size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",enableResizing:!0,size:150,style:{textAlign:"right"}}]},[]),c=(0,w.useRef)(),u=(0,i.b7)({data:nq,columns:l,defaultColumn:{minSize:80},columnResizeMode:o,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}});return w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x",px:"3x"},w.createElement(eG.Z,null,w.createElement(eL.Z,{variant:"secondary"},"Resize: ",o),w.createElement(eN.Z,{onClick:function(e){r(e.target.value)},width:"max-content"},w.createElement(eK.Z,{value:"onChange"},"Resize: onChange"),w.createElement(eK.Z,{value:"onEnd"},"Resize: onEnd")))),w.createElement(m.Z,{ref:c,layout:"flexbox",variant:"default"},w.createElement(f.Z,null,u.getHeaderGroups().map(function(n){return w.createElement(p.Z,{key:n.id},n.headers.map(function(n){var t,r,l,a=nX({position:"relative",minWidth:n.column.columnDef.minSize,width:n.getSize()},n.column.columnDef.style),s=u.getState().columnSizingInfo,d=s.isResizingColumn===n.column.id,m=null!==(r=null===(l=c.current)||void 0===l?void 0:l.clientHeight)&&void 0!==r?r:"100%",f=(t=({dark:"gray:50",light:"gray:50"})[e],{position:"absolute",top:0,right:-1*(d?5:8),height:d?m:"9x",zIndex:1,borderLeft:1,borderLeftColor:d?t:({dark:"gray:50",light:"gray:50"})[e],opacity:d?1:0,_hover:{height:m,opacity:1,borderLeftColor:t},transform:"onEnd"===o&&d?"translateX(".concat(s.deltaOffset,"px)"):void 0});return w.createElement(h.Z,n_({key:n.id},a),n.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(n.column.columnDef.header,n.getContext())),!1!==n.column.columnDef.enableResizing&&w.createElement(nN.Z,{sx:f,onMouseDown:n.getResizeHandler(),onTouchStart:n.getResizeHandler(),onResize:function(e){e.clientX,e.clientY},onResizeStart:function(e){e.clientX,e.clientY},onResizeEnd:function(e){e.clientX,e.clientY}}))}))})),w.createElement(y.Z,null,u.getRowModel().rows.map(function(e){return w.createElement(p.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=nX({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,n_({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},nJ=t(88366),n0=t(47497),n1=t(71107);function n5(e){return(n5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n2(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function n4(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?n2(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==n5(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==n5(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===n5(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n2(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function n3(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return n6(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return n6(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n6(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}function n8(){return(n8=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var n9=function e(n,t){var o=(e.canvas||(e.canvas=document.createElement("canvas"))).getContext("2d");return o.font=t,o.measureText(n).width||0},n7=function(e){return w.createElement(d.Z,n8({mb:"4x"},e))},te=function(e){var n=e.children,t=e.id,o=(0,Q.nB)({id:t});return n({attributes:o.attributes,isDragging:o.isDragging,listeners:o.listeners,setActivatorNodeRef:o.setActivatorNodeRef,setNodeRef:o.setNodeRef,transform:o.transform,transition:o.transition})},tn=function(e){var n=n3((0,j.Z)(),1)[0];return w.createElement(q.y9,null,w.createElement(d.Z,null,w.createElement(B.Z,n8({sx:[{cursor:"move",px:"3x",py:"2x"},{dark:{outline:1,outlineColor:"gray:60",backgroundColor:"gray:70"},light:{outline:1,outlineColor:"gray:40",backgroundColor:"gray:30"}}[n]]},e))))},tt=function(){var e,n=(0,e7.u)(),t=n3((0,s.Z)(),1)[0],o=n3((0,w.useState)("distance"),2),r=o[0],l=o[1],c=n3((0,w.useState)({distance:4}),2),b=c[0],x=c[1],T=n3((0,w.useState)({delay:250,tolerance:8}),2),C=T[0],S=T[1],R=n3((0,w.useState)(["priority","policy","modifiedTime","modifiedBy"]),2),z=R[0],D=R[1],k=n3((0,w.useState)({priority:!0,policy:!0,modifiedTime:!0,modifiedBy:!0}),2),P=k[0],E=k[1],j=n3((0,w.useState)([{id:"priority",desc:!1}]),2),I=j[0],O=j[1],M=(0,nn.Z)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]}),A=(0,nn.Z)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:100,isPinned:!0},{id:"policy",header:"Policy",accessorKey:"policy",size:"auto",isPinned:!1},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=new Date((0,e.getValue)());return"Invalid Date"===n.toString()?"-":w.createElement(g.Z,null,n.toLocaleString())},size:"auto",isPinned:!1},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:"auto",isPinned:!1}]}),H=(0,i.b7)({data:M,columns:A,defaultColumn:{minSize:80},state:{columnOrder:z,columnVisibility:P,sorting:I},enableSorting:!0,enableSortingRemoval:!1,getCoreRowModel:(0,a.sC)(),getSortedRowModel:(0,a.tj)(),onColumnVisibilityChange:E,onSortingChange:function(e){O(e)},getRowId:function(e,n){return e.id}}),G=n3((0,w.useState)(0),2),L=G[0],N=G[1];(0,w.useEffect)(function(){if(L){var e=[n.fontWeights.semibold,n.fontSizes.sm,n.fonts.base].join(" "),t=H.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(n){var t=n.id,o=n.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var i="string"==typeof o.header?n9(o.header,e):0;return{id:t,size:Math.max(L*parseFloat(l)/100,i+24,r)}}return{id:t,size:r}}),o=H.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(n){var t=n.id,o=n.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?n9(o.header,e):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),l=o.reduce(function(e,n){return e+n.size},0),i=L-r;if(0===o.length&&i>0){var a=i/t.length;t.forEach(function(e){e.size=e.size+a}),i=0}o.length>0&&i>l&&o.forEach(function(e,n){e.size=Math.max(i/(o.length-n),e.size),i-=e.size});for(var c={},s=0;s<t.length;s++){var d=t[s];c[d.id]=d.size}for(var u=0;u<o.length;u++){var m=o[u];c[m.id]=m.size}H.setColumnSizing(c)}},[A,H,L,n]);var K=H.getState().columnOrder.map(function(e){var n=H.getColumn(e);return{id:e,label:n.columnDef.header,isPinned:n.columnDef.isPinned,isVisible:H.getState().columnVisibility[e]}}),_=n3((0,w.useState)(null),2),U=_[0],X=_[1],Y=(0,w.useCallback)(function(e){X(e.active.id)},[]),$=(0,w.useCallback)(function(e){var n=e.active,t=e.over;n&&t&&n.id!==t.id&&D(function(e){var o=e.indexOf(n.id),r=e.indexOf(t.id);return(0,Q.Rp)(e,o,r)}),X(null)},[]),en=(0,q.Dy)((0,q.VT)(q.MA,{activationConstraint:{distance:b,delay:C}[r]}),(0,q.VT)(q.LO,{activationConstraint:{distance:b,delay:C}[r]}),(0,q.VT)(q.Lg,{coordinateGetter:Q.is})),et=(0,w.useRef)();return w.createElement(d.Z,null,w.createElement(n7,null,w.createElement(d.Z,{mb:"4x"},w.createElement(u.Z,{fontSize:"md",lineHeight:"md"},"Activation constraints for DnD interactions")),w.createElement(n0.Z,{value:r,onChange:l},w.createElement(B.Z,{flexDirection:"column",rowGap:"2x"},w.createElement(d.Z,null,w.createElement(d.Z,{mb:"1x"},w.createElement(n1.Z,{value:"distance"},"Apply distance constraint")),w.createElement(B.Z,{ml:"6x"},w.createElement(eR.Z,{columnGap:"4x",rowGap:"1x",templateColumns:"1fr 2fr"},w.createElement(ez.Z,{minWidth:100},w.createElement(B.Z,{alignItems:"center",columnGap:"2x"},"distance",w.createElement(Z.Z,{label:'The "distance" property represents the distance, in pixels, by which the pointer needs to be moved before a drag start event is emitted.',maxWidth:320},w.createElement(V.Z,null)))),w.createElement(B.Z,{columnGap:"2x"},w.createElement("input",{disabled:"distance"!==r,type:"range",min:0,max:32,step:1,onChange:function(e){var n=parseInt(e.target.value);x(n4(n4({},b),{},{distance:n}))},value:b.distance}),w.createElement(u.Z,{sx:{color:"distance"===r?t.color.primary:t.color.disabled}},b.distance,"px"))))),w.createElement(d.Z,null,w.createElement(d.Z,{mb:"1x"},w.createElement(n1.Z,{value:"delay"},"Apply delay constraint")),w.createElement(B.Z,{ml:"6x"},w.createElement(eR.Z,{columnGap:"4x",rowGap:"1x",templateColumns:"100px 2fr"},w.createElement(ez.Z,null,w.createElement(B.Z,{alignItems:"center",columnGap:"2x"},"delay",w.createElement(Z.Z,{label:'The "delay" property represents the duration, in milliseconds, that a draggable item needs to be held by the primary pointer for before a drag start event is emitted.',maxWidth:320},w.createElement(V.Z,null)))),w.createElement(B.Z,{columnGap:"2x"},w.createElement("input",{disabled:"delay"!==r,type:"range",min:0,max:1e3,step:50,onChange:function(e){var n=parseInt(e.target.value);S(n4(n4({},C),{},{delay:n}))},value:C.delay}),w.createElement(u.Z,{sx:{color:"delay"===r?t.color.primary:t.color.disabled}},C.delay,"ms")),w.createElement(ez.Z,null,w.createElement(B.Z,{alignItems:"center",columnGap:"2x"},"tolerance",w.createElement(Z.Z,{label:'The "tolerance" property represents the distance, in pixels, of motion that is tolerated before the drag operation is aborted. If the mouse is moved during the delay duration and the tolerance is set to zero, the drag operation will be immediately aborted. If a higher tolerance is set, for example, a tolerance of 8 pixels, the operation will only be aborted if the mouse is moved by more than 8 pixels during the delay.',maxWidth:320},w.createElement(V.Z,null)))),w.createElement(B.Z,{columnGap:"2x"},w.createElement("input",{disabled:"delay"!==r,type:"range",min:0,max:32,step:1,onChange:function(e){var n=parseInt(e.target.value);S(n4(n4({},C),{},{tolerance:n}))},value:C.tolerance}),w.createElement(u.Z,{sx:{color:"delay"===r?t.color.primary:t.color.disabled}},C.tolerance,"px"))))),w.createElement(d.Z,null,w.createElement(d.Z,{mb:"1x"},w.createElement(n1.Z,{value:"none"},"Perform drag operation immediately")))))),w.createElement(eW.Z,{my:"4x"}),w.createElement(q.LB,{collisionDetection:q.pE,measuring:{draggable:{measure:function(e){var n=e.getBoundingClientRect(),t=et.current.getBoundingClientRect();return n.y=t.y,n}}},modifiers:[nJ.K7],onDragStart:Y,onDragEnd:$,sensors:en},w.createElement(nt.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;L!==n&&N(n)}},function(e){var n=e.width;return w.createElement(m.Z,{layout:"flexbox",sx:{visibility:v().isEmpty(H.getState().columnSizing)?"hidden":"visible",width:n}},w.createElement(f.Z,{ref:et},H.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},w.createElement(Q.Fo,{items:K,strategy:Q.PG},e.headers.map(function(e){return w.createElement(te,{key:e.id,id:e.column.id},function(n){var t,o=n.isDragging,r=n.setActivatorNodeRef,l=n.setNodeRef,a=n.attributes,c=n.listeners,s=n.transform,d=n.transition,u=e.column.columnDef.isPinned,m=[n4(n4({cursor:"pointer",position:"relative",minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style),{},{userSelect:"none"}),!u&&{cursor:o?"move":void 0,opacity:o?.4:void 0,transform:J.ux.Translate.toString(s),transition:d,zIndex:o?1:0}];return w.createElement(h.Z,{ref:l,sx:m,onClick:e.column.getToggleSortingHandler()},e.isPlaceholder?null:w.createElement(B.Z,n8({ref:r},u?void 0:a,u?void 0:c,{sx:{alignItems:"center"}}),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())),null!==(t=({asc:w.createElement(F.Z,{size:"5x",ml:"1x"}),desc:w.createElement(W.Z,{size:"5x",ml:"1x"})})[e.column.getIsSorted()])&&void 0!==t?t:null))})})))})),w.createElement(y.Z,null,H.getRowModel().rows.map(function(e){return w.createElement(p.Z,{key:e.id,"data-selected":(0,ee.PB)(e.getIsSelected()),_hover:{backgroundColor:t.background.highlighted},_selected:{backgroundColor:t.background.selected}},w.createElement(Q.Fo,{items:K,strategy:Q.PG},e.getVisibleCells().map(function(e){return w.createElement(te,{key:e.id,id:e.column.id},function(n){var t=n.isDragging,o=n.setNodeRef,r=n.transform,l=n.transition,a=e.column.columnDef.isPinned,c=n4({position:"relative",minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style),s={};return a||(s={opacity:1,transform:J.ux.Translate.toString(r),transition:l,zIndex:t?1:0}),w.createElement(h.Z,n8({ref:o},c,s),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))})})))})))}),w.createElement(tn,null,U&&w.createElement(u.Z,{color:t.color.secondary,fontWeight:"semibold"},null===(e=A.find(function(e){return e.id===U}))||void 0===e?void 0:e.header))))};function to(e){return(to="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tr(){return(tr=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function tl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function ti(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?tl(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==to(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==to(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===to(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):tl(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function ta(e){return function(e){if(Array.isArray(e))return td(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ts(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tc(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||ts(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ts(e,n){if(e){if("string"==typeof e)return td(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return td(e,n)}}function td(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var tu=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],tm=function e(n,t){var o=(e.canvas||(e.canvas=document.createElement("canvas"))).getContext("2d");return o.font=t,o.measureText(n).width||0},tf=function(){var e=(0,e7.u)(),n=tc((0,s.Z)(),1)[0],t=tc((0,w.useState)([{header:"Event Type",accessorKey:"eventType",size:"auto"},{header:"Affected Devices",accessorKey:"affectedDevices",size:"25%"},{header:"Detections",accessorKey:"detections",size:150}]),2),o=t[0],r=t[1],l=(0,i.b7)({data:tu,columns:o,defaultColumn:{minSize:80},getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),c=tc((0,w.useState)(0),2),u=c[0],b=c[1];return(0,w.useEffect)(function(){if(u){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=l.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var i="string"==typeof o.header?tm(o.header,n):0;return{id:t,size:Math.max(u*parseFloat(l)/100,i+24,r)}}return{id:t,size:r}}),o=l.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?tm(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),i=o.reduce(function(e,n){return e+n.size},0),a=u-r;if(0===o.length&&a>0){var c=a/t.length;t.forEach(function(e){e.size=e.size+c}),a=0}o.length>0&&a>i&&o.forEach(function(e,n){e.size=Math.max(a/(o.length-n),e.size),a-=e.size});for(var s={},d=0;d<t.length;d++){var m=t[d];s[m.id]=m.size}for(var f=0;f<o.length;f++){var p=o[f];s[p.id]=p.size}l.setColumnSizing(s)}},[o,l,u,e]),w.createElement(d.Z,{width:"100%"},o.map(function(e,n){return w.createElement(d.Z,{mb:"4x",key:n},w.createElement(d.Z,{mb:"2x"},w.createElement(ez.Z,null,e.header)),w.createElement(eU.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["auto","25%",150].map(function(e){return w.createElement(eX.Z,{key:e,selected:e===o[n].size,onClick:function(){r([].concat(ta(o.slice(0,n)),[ti(ti({},o[n]),{},{size:e})],ta(o.slice(n+1))))},minWidth:"15x"},e)})))}),w.createElement(nt.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;u!==n&&b(n)}},function(e){var t=e.width;return w.createElement(m.Z,{layout:"flexbox",variant:"default",sx:{visibility:v().isEmpty(l.getState().columnSizing)?"hidden":"visible",width:t}},w.createElement(f.Z,null,l.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=ti({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,tr({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(y.Z,null,l.getRowModel().rows.map(function(e){return w.createElement(p.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=ti({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,tr({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))})))}))};function tp(e){return(tp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function th(){return(th=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function tg(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function tb(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?tg(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==tp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==tp(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===tp(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):tg(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function ty(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var tx=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],tv=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,s.Z)())||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{for(l=(t=t.call(e)).next;!(c=(o=l.call(t)).done)&&(a.push(o.value),1!==a.length);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,1)||function(e,n){if(e){if("string"==typeof e)return ty(e,1);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return ty(e,1)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t=(0,w.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),o=(0,i.b7)({data:tx,columns:t,defaultColumn:{minSize:80},getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}});return w.createElement(m.Z,{layout:"flexbox"},w.createElement(f.Z,null,o.getHeaderGroups().map(function(e){return w.createElement(p.Z,{key:e.id},e.headers.map(function(e){var n=tb({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return w.createElement(h.Z,th({key:e.id},n),e.isPlaceholder?null:w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),w.createElement(y.Z,null,o.getRowModel().rows.map(function(e){return w.createElement(p.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=tb({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return w.createElement(h.Z,th({key:e.id},n),w.createElement(g.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))})))};function tw(e){return(tw="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tT(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function tC(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?tT(Object(t),!0).forEach(function(n){var o,r;o=n,r=t[n],(o=function(e){var n=function(e,n){if("object"!==tw(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,n||"default");if("object"!==tw(o))return o;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===tw(n)?n:String(n)}(o))in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):tT(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function tS(){return(tS=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function tR(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,r,l,i,a=[],c=!0,s=!1;try{if(l=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(o=l.call(t)).done)&&(a.push(o.value),a.length!==n);c=!0);}catch(e){s=!0,r=e}finally{try{if(!c&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw r}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return tz(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return tz(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tz(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var tD=function(e){var n=tR((0,w.useState)(e),2),t=n[0],o=n[1];return[t,function(e){return function(){return o(e)}}]},tk=[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n;return null!==(n=e.priority)&&void 0!==n?n:"-"},size:80},{id:"policy",header:"Policy",accessorKey:"policy",size:240},{id:"modifiedTime",header:"Last Modified",cell:function(e){var n=new Date(e.modifiedTime);return w.createElement(g.Z,null,n.toLocaleString())},size:180},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:150}],tP=[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}],tE=function(e){return w.createElement(d.Z,tS({mb:"4x"},e))},tj=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},tI=function(){var e=tR((0,s.Z)(),1)[0],n=tR((0,w.useReducer)(function(e){return!e},!1),2),t=n[0],o=n[1],r=tR(tD("flexbox"),2),l=r[0],i=r[1],a=tR(tD("default"),2),c=a[0],x=a[1],v=tR(tD("md"),2),T=v[0],C=v[1],S=tR((0,G.Z)(!0),2),R=S[0],z=S[1],D=tR((0,G.Z)(!0),2),k=D[0],P=D[1],E=tR((0,G.Z)(!0),2),j=E[0],Z=E[1],A=(0,w.useMemo)(function(){return tP.map(function(e,n){return{id:n,cells:tk.map(function(n,t){return{id:"".concat(t,"_").concat(n.id),column:n,row:e}}),row:e}})},[]),H=(0,w.useRef)(),V=function(e){var n=null==H?void 0:H.current;if(n){var t=e.target.scrollLeft;n.scrollleft!==t&&(n.scrollLeft=t)}},F=j&&"table"!==l,W={},L={};return F&&(W={height:216},L={overflow:"hidden"}),w.createElement(w.Fragment,null,w.createElement(d.Z,{mb:"4x"},w.createElement(u.Z,{fontSize:"lg",lineHeight:"lg"},"Table props")),w.createElement(tE,null,w.createElement(d.Z,{mb:"2x"},w.createElement(ez.Z,null,"layout")),w.createElement(eU.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["flexbox","table"].map(function(e){return w.createElement(eX.Z,{key:e,selected:e===l,onClick:(0,ee.PP)(i(e),function(n){"table"===e&&Z(!1)}),minWidth:"15x"},e)}))),w.createElement(tE,null,w.createElement(d.Z,{mb:"2x"},w.createElement(ez.Z,null,"variant")),w.createElement(eU.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["default","outline"].map(function(e){return w.createElement(eX.Z,{key:e,selected:e===c,onClick:x(e),minWidth:"15x"},e)}))),w.createElement(tE,null,w.createElement(d.Z,{mb:"2x"},w.createElement(ez.Z,null,"size")),w.createElement(eU.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["sm","md","lg"].map(function(e){return w.createElement(eX.Z,{key:e,selected:e===T,onClick:C(e),minWidth:"15x"},e)}))),w.createElement(eW.Z,{mb:"4x"}),w.createElement(d.Z,{mb:"4x"},w.createElement(u.Z,{fontSize:"lg",lineHeight:"lg"},"Table composition")),w.createElement(tE,null,w.createElement(ez.Z,{display:"flex",alignItems:"center"},w.createElement(O.Z,{checked:R,onChange:function(){return z()}}),w.createElement(M.Z,{width:"2x"}),w.createElement(u.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"TableHeader"))),w.createElement(tE,null,w.createElement(ez.Z,{display:"flex",alignItems:"center"},w.createElement(O.Z,{checked:k,onChange:function(){return P()}}),w.createElement(M.Z,{width:"2x"}),w.createElement(u.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"TableBody"))),w.createElement(tE,null,w.createElement(ez.Z,{display:"flex",alignItems:"center",mb:"3x"},w.createElement(O.Z,{checked:j,disabled:"table"===l,onChange:function(){Z(),o()}}),w.createElement(M.Z,{width:"2x"}),w.createElement(u.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"TableScrollbar")),w.createElement(d.Z,{ml:"6x",mb:"4x"},w.createElement(u.Z,{mb:"2x",color:e.color.secondary},"Note: ",w.createElement(I.Z,null,"TableScrollbar")," is only supported when the ",w.createElement(I.Z,null,"layout")," prop is set to ",w.createElement(I.Z,null,"flexbox"),"."))),w.createElement(eW.Z,{mb:"4x"}),w.createElement(B.Z,{alignItems:"center",columnGap:"3x",minHeight:"5x"},w.createElement(m.Z,tS({key:t,layout:l,variant:c,size:T},W),R&&w.createElement(f.Z,tS({ref:H},L),w.createElement(p.Z,null,tk.map(function(e){var n=tC({flex:"none",width:e.size},e.style);return w.createElement(h.Z,tS({key:e.id},n),w.createElement(g.Z,null,e.header))}))),k&&w.createElement(tj,{condition:F,wrapper:function(e){return w.createElement(b.Z,{height:"100%",overflow:"visible",onScroll:V},e)}},w.createElement(y.Z,null,A.map(function(n){var t={_hover:{backgroundColor:e.background.highlighted}};return w.createElement(p.Z,tS({key:n.id},t),n.cells.map(function(e,t){var o=tC({flex:"none",width:e.column.size},e.column.style);return w.createElement(h.Z,tS({key:e.id},o),"function"==typeof e.column.cell?e.column.cell(n.row):w.createElement(g.Z,null,e.row[e.column.accessorKey]))}))}))),R&&!k&&w.createElement(y.Z,null,"flexbox"===l&&w.createElement(B.Z,{justifyContent:"center",px:"3x",py:"10x"},"No data to display"),"table"===l&&w.createElement(p.Z,null,w.createElement(h.Z,{colSpan:"4",px:0,py:0},w.createElement(u.Z,{px:"3x",py:"10x",textAlign:"center"},"No data to display")))))))};function tO(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",p:"p",h3:"h3",ol:"ol",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),e.components);return(0,o.jsxs)(n.div,{className:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(n.h1,{id:"table",children:"Table"}),"\n",(0,o.jsxs)(n.h2,{id:"import",children:["Import",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n\n  // Deprecated components\n  TableHeaderRow, // Deprecated in v2: use `TableRow` instead.\n  TableHeaderCell, // Deprecated in v2: use `TableCell` instead.\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"usage",children:["Usage",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:tI,file:{data:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n          {(isTableHeaderVisible && !isTableBodyVisible) && (\n            <TableBody>\n              {layout === 'flexbox' && (\n                <Flex justifyContent=\"center\" px=\"3x\" py=\"10x\">\n                  No data to display\n                </Flex>\n              )}\n              {layout === 'table' && (\n                <TableRow>\n                  <TableCell colSpan=\"4\" px={0} py={0}>\n                    <Text px=\"3x\" py=\"10x\" textAlign=\"center\">\n                      No data to display\n                    </Text>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n          {(isTableHeaderVisible && !isTableBodyVisible) && (\n            <TableBody>\n              {layout === 'flexbox' && (\n                <Flex justifyContent=\"center\" px=\"3x\" py=\"10x\">\n                  No data to display\n                </Flex>\n              )}\n              {layout === 'table' && (\n                <TableRow>\n                  <TableCell colSpan=\"4\" px={0} py={0}>\n                    <Text px=\"3x\" py=\"10x\" textAlign=\"center\">\n                      No data to display\n                    </Text>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h2,{id:"examples",children:["Examples",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#examples",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["In this section, we'll explore how to use the ",(0,o.jsx)(n.code,{children:"Table"})," component and various Hooks provided by ",(0,o.jsx)(n.code,{children:"react-table"})," to create tables with features such as sorting, filtering, pagination, and selection."]}),"\n",(0,o.jsxs)(n.p,{children:["To get started with ",(0,o.jsx)(n.code,{children:"react-table"}),", visit ",(0,o.jsx)(n.a,{href:"https://github.com/TanStack/table",children:"https://github.com/TanStack/table"})," to learn more."]}),"\n",(0,o.jsxs)(n.h3,{id:"basic",children:["Basic",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:tv,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-auto-sizing",children:["Column auto sizing",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-auto-sizing",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:tf,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 80px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 80px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            sx={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 80px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 80px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            sx={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-ordering-dnd",children:["Column ordering (DnD)",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-ordering-dnd",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:'In this example, the "Priority" column is fixed and cannot be moved. Try dragging the other columns to adjust their order.'}),"\n",(0,o.jsxs)(n.p,{children:["For detailed DnD API documentation, please visit ",(0,o.jsx)(n.a,{href:"https://docs.dndkit.com/api-documentation/sensors",children:"https://docs.dndkit.com/api-documentation/sensors"}),"."]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:tt,file:{data:"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\nimport {\n  SortableContext,\n  arrayMove,\n  horizontalListSortingStrategy,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Divider,\n  Flex,\n  Grid,\n  Radio,\n  RadioGroup,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { InfoOIcon, SortDownIcon, SortUpIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst DragItem = (props) => {\n  const [colorMode] = useColorMode();\n  const baseStyle = {\n    cursor: 'move',\n    //display: 'inline-flex', // Uncomment this line and use 'inline-flex' if you prefer not to occupy the entire block\n    px: '3x',\n    py: '2x',\n  };\n  const colorStyle = {\n    dark: {\n      outline: 1,\n      outlineColor: 'gray:60',\n      backgroundColor: 'gray:70',\n    },\n    light: {\n      outline: 1,\n      outlineColor: 'gray:40',\n      backgroundColor: 'gray:30',\n    },\n  }[colorMode];\n\n  return (\n    <DragOverlay>\n      <Box>\n        <Flex\n          sx={[baseStyle, colorStyle]}\n          {...props}\n        />\n      </Box>\n    </DragOverlay>\n  );\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [activationConstraint, setActivationConstraint] = useState('distance'); // One of: 'distance', 'delay', or 'none'\n  const [distanceConstraint, setDistanceConstraint] = useState({\n    distance: 4,\n  });\n  const [delayConstraint, setDelayConstraint] = useState({\n    delay: 250,\n    tolerance: 8,\n  });\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    priority: true,\n    policy: true,\n    modifiedTime: true,\n    modifiedBy: true,\n  });\n  const [sorting, setSorting] = useState([\n    { id: 'priority', desc: false },\n  ]);\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 100,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval: false, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 80px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 80px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const [activeId, setActiveId] = useState(null);\n\n  const handleDragStart = useCallback((event) => {\n    setActiveId(event.active.id);\n  }, []);\n\n  const handleDragEnd = useCallback((event) => {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setColumnOrder(columnOrder => {\n        const oldIndex = columnOrder.indexOf(active.id);\n        const newIndex = columnOrder.indexOf(over.id);\n        return arrayMove(columnOrder, oldIndex, newIndex) //this is just a splice util\n      })\n    }\n    setActiveId(null);\n  }, []);\n\n  const sensors = useSensors(\n    // https://docs.dndkit.com/api-documentation/sensors/mouse\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        'distance': distanceConstraint,\n        'delay': delayConstraint,\n      }[activationConstraint],\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        'distance': distanceConstraint,\n        'delay': delayConstraint,\n      }[activationConstraint],\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const tableHeaderRef = useRef();\n\n  return (\n    <Box>\n      <FormGroup>\n        <Box mb=\"4x\">\n          <Text fontSize=\"md\" lineHeight=\"md\">\n            Activation constraints for DnD interactions\n          </Text>\n        </Box>\n        <RadioGroup\n          value={activationConstraint}\n          onChange={setActivationConstraint}\n        >\n          <Flex flexDirection=\"column\" rowGap=\"2x\">\n            <Box>\n              <Box mb=\"1x\">\n                <Radio value=\"distance\">\n                  Apply distance constraint\n                </Radio>\n              </Box>\n              <Flex ml=\"6x\">\n                <Grid\n                  columnGap=\"4x\"\n                  rowGap=\"1x\"\n                  templateColumns=\"1fr 2fr\"\n                >\n                  <TextLabel minWidth={100}>\n                    <Flex alignItems=\"center\" columnGap=\"2x\">\n                      distance\n                      <Tooltip\n                        label={'The \"distance\" property represents the distance, in pixels, by which the pointer needs to be moved before a drag start event is emitted.'}\n                        maxWidth={320}\n                      >\n                        <InfoOIcon />\n                      </Tooltip>\n                    </Flex>\n                  </TextLabel>\n                  <Flex columnGap=\"2x\">\n                    <input\n                      disabled={activationConstraint !== 'distance'}\n                      type=\"range\"\n                      min={0}\n                      max={32}\n                      step={1}\n                      onChange={(event) => {\n                        const value = parseInt(event.target.value);\n                        setDistanceConstraint({\n                          ...distanceConstraint,\n                          distance: value,\n                        });\n                      }}\n                      value={distanceConstraint.distance}\n                    />\n                    <Text\n                      sx={{\n                        color: activationConstraint === 'distance' ? colorStyle.color.primary : colorStyle.color.disabled,\n                      }}\n                    >\n                      {distanceConstraint.distance}px\n                    </Text>\n                  </Flex>\n                </Grid>\n              </Flex>\n            </Box>\n            <Box>\n              <Box mb=\"1x\">\n                <Radio value=\"delay\">\n                  Apply delay constraint\n                </Radio>\n              </Box>\n              <Flex ml=\"6x\">\n                <Grid\n                  columnGap=\"4x\"\n                  rowGap=\"1x\"\n                  templateColumns=\"100px 2fr\"\n                >\n                  <TextLabel>\n                    <Flex alignItems=\"center\" columnGap=\"2x\">\n                      delay\n                      <Tooltip\n                        label={'The \"delay\" property represents the duration, in milliseconds, that a draggable item needs to be held by the primary pointer for before a drag start event is emitted.'}\n                        maxWidth={320}\n                      >\n                        <InfoOIcon />\n                      </Tooltip>\n                    </Flex>\n                  </TextLabel>\n                  <Flex columnGap=\"2x\">\n                    <input\n                      disabled={activationConstraint !== 'delay'}\n                      type=\"range\"\n                      min={0}\n                      max={1000}\n                      step={50}\n                      onChange={(event) => {\n                        const value = parseInt(event.target.value);\n                        setDelayConstraint({\n                          ...delayConstraint,\n                          delay: value,\n                        });\n                      }}\n                      value={delayConstraint.delay}\n                    />\n                    <Text\n                      sx={{\n                        color: activationConstraint === 'delay' ? colorStyle.color.primary : colorStyle.color.disabled,\n                      }}\n                    >\n                      {delayConstraint.delay}ms\n                    </Text>\n                  </Flex>\n                  <TextLabel>\n                    <Flex alignItems=\"center\" columnGap=\"2x\">\n                      tolerance\n                      <Tooltip\n                        label={'The \"tolerance\" property represents the distance, in pixels, of motion that is tolerated before the drag operation is aborted. If the mouse is moved during the delay duration and the tolerance is set to zero, the drag operation will be immediately aborted. If a higher tolerance is set, for example, a tolerance of 8 pixels, the operation will only be aborted if the mouse is moved by more than 8 pixels during the delay.'}\n                        maxWidth={320}\n                      >\n                        <InfoOIcon />\n                      </Tooltip>\n                    </Flex>\n                  </TextLabel>\n                  <Flex columnGap=\"2x\">\n                    <input\n                      disabled={activationConstraint !== 'delay'}\n                      type=\"range\"\n                      min={0}\n                      max={32}\n                      step={1}\n                      onChange={(event) => {\n                        const value = parseInt(event.target.value);\n                        setDelayConstraint({\n                          ...delayConstraint,\n                          tolerance: value,\n                        });\n                      }}\n                      value={delayConstraint.tolerance}\n                    />\n                    <Text\n                      sx={{\n                        color: activationConstraint === 'delay' ? colorStyle.color.primary : colorStyle.color.disabled,\n                      }}\n                    >\n                      {delayConstraint.tolerance}px\n                    </Text>\n                  </Flex>\n                </Grid>\n              </Flex>\n            </Box>\n            <Box>\n              <Box mb=\"1x\">\n                <Radio value=\"none\">\n                  Perform drag operation immediately\n                </Radio>\n              </Box>\n            </Box>\n          </Flex>\n        </RadioGroup>\n      </FormGroup>\n      <Divider my=\"4x\" />\n      <DndContext\n        collisionDetection={closestCenter}\n        measuring={{\n          draggable: {\n            measure: (node) => {\n              // Measure the node being dragged and adjust the y-coordinate to align with the table header.\n              const measuringNodeRect = node.getBoundingClientRect();\n              const tableHeaderRect = tableHeaderRef.current.getBoundingClientRect();\n              measuringNodeRect.y = tableHeaderRect.y;\n              return measuringNodeRect;\n            },\n          },\n        }}\n        modifiers={[restrictToHorizontalAxis]}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        sensors={sensors}\n      >\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n                width,\n              }}\n            >\n              <TableHeader ref={tableHeaderRef}>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableRow\n                    key={headerGroup.id}\n                  >\n                    <SortableContext\n                      items={orderedColumns}\n                      strategy={horizontalListSortingStrategy}\n                    >\n                      {headerGroup.headers.map(header => (\n                        <SortableItem\n                          key={header.id}\n                          id={header.column.id}\n                        >\n                          {({ isDragging, setActivatorNodeRef, setNodeRef, attributes, listeners, transform, transition }) => {\n                            const isPinned = header.column.columnDef.isPinned;\n                            const sx = [\n                              {\n                                cursor: 'pointer',\n                                position: 'relative',\n                                minWidth: header.column.columnDef.minSize,\n                                width: header.getSize(),\n                                ...header.column.columnDef.style,\n                                userSelect: 'none',\n                              },\n                              !isPinned && {\n                                cursor: isDragging ? 'move' : undefined,\n                                opacity: isDragging ? 0.4 : undefined,\n                                transform: CSS.Translate.toString(transform), // translate instead of transform to avoid squishing\n                                transition,\n                                // Ensure the draggable element appears on top of other elements when dragged\n                                zIndex: isDragging ? 1 : 0,\n                              },\n                            ];\n                            \n                            return (\n                              <TableCell\n                                ref={setNodeRef}\n                                sx={sx}\n                                onClick={header.column.getToggleSortingHandler()}\n                              >\n                                {header.isPlaceholder ? null : (\n                                  <Flex\n                                    // https://docs.dndkit.com/presets/sortable/usesortable#activator\n                                    // When the activator node differs from the draggable node, we recommend\n                                    // setting the activator node ref on the activator node.\n                                    // This helps `@dnd-kit` more accurately handle automatic focus management\n                                    // and can also be accessed by sensors for enhanced activation constraints.\n                                    ref={setActivatorNodeRef}\n                                    {...(!isPinned ? attributes : undefined)}\n                                    {...(!isPinned ? listeners : undefined)}\n                                    sx={{\n                                      alignItems: 'center',\n                                    }}\n                                  >\n                                    <Truncate>\n                                      {flexRender(header.column.columnDef.header, header.getContext())}\n                                    </Truncate>\n                                    {{\n                                      asc: (<SortUpIcon size=\"5x\" ml=\"1x\" />),\n                                      desc: (<SortDownIcon size=\"5x\" ml=\"1x\" />),\n                                    }[header.column.getIsSorted()] ?? null}\n                                  </Flex>\n                                )}\n                              </TableCell>\n                            );\n                          }}\n                        </SortableItem>\n                      ))}\n                    </SortableContext>\n                  </TableRow>\n                ))}\n              </TableHeader>\n              <TableBody>\n                {table.getRowModel().rows.map(row => (\n                  <TableRow\n                    key={row.id}\n                    data-selected={dataAttr(row.getIsSelected())}\n                    _hover={{\n                      backgroundColor: colorStyle.background.highlighted,\n                    }}\n                    _selected={{\n                      backgroundColor: colorStyle.background.selected,\n                    }}\n                  >\n                    <SortableContext\n                      items={orderedColumns}\n                      strategy={horizontalListSortingStrategy}\n                    >\n                      {row.getVisibleCells().map(cell => (\n                        <SortableItem\n                          key={cell.id}\n                          id={cell.column.id}\n                        >\n                          {({ isDragging, setNodeRef, transform, transition }) => {\n                            const isPinned = cell.column.columnDef.isPinned;\n                            const styleProps = {\n                              position: 'relative',\n                              minWidth: cell.column.columnDef.minSize,\n                              width: cell.column.getSize(),\n                              ...cell.column.columnDef.style,\n                            };\n                            let other = {};\n                            if (!isPinned) {\n                              other = {\n                                opacity: 1,\n                                transform: CSS.Translate.toString(transform),\n                                transition,\n                                zIndex: isDragging ? 1 : 0,\n                              };\n                            }\n                            return (\n                              <TableCell\n                                ref={setNodeRef}\n                                {...styleProps}\n                                {...other}\n                              >\n                                <Truncate>\n                                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                                </Truncate>\n                              </TableCell>\n                            );\n                          }}\n                        </SortableItem>\n                      ))}\n                    </SortableContext>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </AutoSizer>\n        <DragItem>\n          {activeId && (\n            <Text\n              color={colorStyle.color.secondary}\n              fontWeight=\"semibold\"\n            >\n              {columns.find(column => column.id === activeId)?.header}\n            </Text>\n          )}\n        </DragItem>\n      </DndContext>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\nimport {\n  SortableContext,\n  arrayMove,\n  horizontalListSortingStrategy,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Divider,\n  Flex,\n  Grid,\n  Radio,\n  RadioGroup,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { InfoOIcon, SortDownIcon, SortUpIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst DragItem = (props) => {\n  const [colorMode] = useColorMode();\n  const baseStyle = {\n    cursor: 'move',\n    //display: 'inline-flex', // Uncomment this line and use 'inline-flex' if you prefer not to occupy the entire block\n    px: '3x',\n    py: '2x',\n  };\n  const colorStyle = {\n    dark: {\n      outline: 1,\n      outlineColor: 'gray:60',\n      backgroundColor: 'gray:70',\n    },\n    light: {\n      outline: 1,\n      outlineColor: 'gray:40',\n      backgroundColor: 'gray:30',\n    },\n  }[colorMode];\n\n  return (\n    <DragOverlay>\n      <Box>\n        <Flex\n          sx={[baseStyle, colorStyle]}\n          {...props}\n        />\n      </Box>\n    </DragOverlay>\n  );\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [activationConstraint, setActivationConstraint] = useState('distance'); // One of: 'distance', 'delay', or 'none'\n  const [distanceConstraint, setDistanceConstraint] = useState({\n    distance: 4,\n  });\n  const [delayConstraint, setDelayConstraint] = useState({\n    delay: 250,\n    tolerance: 8,\n  });\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    priority: true,\n    policy: true,\n    modifiedTime: true,\n    modifiedBy: true,\n  });\n  const [sorting, setSorting] = useState([\n    { id: 'priority', desc: false },\n  ]);\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 100,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval: false, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 80px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 80px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const [activeId, setActiveId] = useState(null);\n\n  const handleDragStart = useCallback((event) => {\n    setActiveId(event.active.id);\n  }, []);\n\n  const handleDragEnd = useCallback((event) => {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setColumnOrder(columnOrder => {\n        const oldIndex = columnOrder.indexOf(active.id);\n        const newIndex = columnOrder.indexOf(over.id);\n        return arrayMove(columnOrder, oldIndex, newIndex) //this is just a splice util\n      })\n    }\n    setActiveId(null);\n  }, []);\n\n  const sensors = useSensors(\n    // https://docs.dndkit.com/api-documentation/sensors/mouse\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        'distance': distanceConstraint,\n        'delay': delayConstraint,\n      }[activationConstraint],\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        'distance': distanceConstraint,\n        'delay': delayConstraint,\n      }[activationConstraint],\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const tableHeaderRef = useRef();\n\n  return (\n    <Box>\n      <FormGroup>\n        <Box mb=\"4x\">\n          <Text fontSize=\"md\" lineHeight=\"md\">\n            Activation constraints for DnD interactions\n          </Text>\n        </Box>\n        <RadioGroup\n          value={activationConstraint}\n          onChange={setActivationConstraint}\n        >\n          <Flex flexDirection=\"column\" rowGap=\"2x\">\n            <Box>\n              <Box mb=\"1x\">\n                <Radio value=\"distance\">\n                  Apply distance constraint\n                </Radio>\n              </Box>\n              <Flex ml=\"6x\">\n                <Grid\n                  columnGap=\"4x\"\n                  rowGap=\"1x\"\n                  templateColumns=\"1fr 2fr\"\n                >\n                  <TextLabel minWidth={100}>\n                    <Flex alignItems=\"center\" columnGap=\"2x\">\n                      distance\n                      <Tooltip\n                        label={'The \"distance\" property represents the distance, in pixels, by which the pointer needs to be moved before a drag start event is emitted.'}\n                        maxWidth={320}\n                      >\n                        <InfoOIcon />\n                      </Tooltip>\n                    </Flex>\n                  </TextLabel>\n                  <Flex columnGap=\"2x\">\n                    <input\n                      disabled={activationConstraint !== 'distance'}\n                      type=\"range\"\n                      min={0}\n                      max={32}\n                      step={1}\n                      onChange={(event) => {\n                        const value = parseInt(event.target.value);\n                        setDistanceConstraint({\n                          ...distanceConstraint,\n                          distance: value,\n                        });\n                      }}\n                      value={distanceConstraint.distance}\n                    />\n                    <Text\n                      sx={{\n                        color: activationConstraint === 'distance' ? colorStyle.color.primary : colorStyle.color.disabled,\n                      }}\n                    >\n                      {distanceConstraint.distance}px\n                    </Text>\n                  </Flex>\n                </Grid>\n              </Flex>\n            </Box>\n            <Box>\n              <Box mb=\"1x\">\n                <Radio value=\"delay\">\n                  Apply delay constraint\n                </Radio>\n              </Box>\n              <Flex ml=\"6x\">\n                <Grid\n                  columnGap=\"4x\"\n                  rowGap=\"1x\"\n                  templateColumns=\"100px 2fr\"\n                >\n                  <TextLabel>\n                    <Flex alignItems=\"center\" columnGap=\"2x\">\n                      delay\n                      <Tooltip\n                        label={'The \"delay\" property represents the duration, in milliseconds, that a draggable item needs to be held by the primary pointer for before a drag start event is emitted.'}\n                        maxWidth={320}\n                      >\n                        <InfoOIcon />\n                      </Tooltip>\n                    </Flex>\n                  </TextLabel>\n                  <Flex columnGap=\"2x\">\n                    <input\n                      disabled={activationConstraint !== 'delay'}\n                      type=\"range\"\n                      min={0}\n                      max={1000}\n                      step={50}\n                      onChange={(event) => {\n                        const value = parseInt(event.target.value);\n                        setDelayConstraint({\n                          ...delayConstraint,\n                          delay: value,\n                        });\n                      }}\n                      value={delayConstraint.delay}\n                    />\n                    <Text\n                      sx={{\n                        color: activationConstraint === 'delay' ? colorStyle.color.primary : colorStyle.color.disabled,\n                      }}\n                    >\n                      {delayConstraint.delay}ms\n                    </Text>\n                  </Flex>\n                  <TextLabel>\n                    <Flex alignItems=\"center\" columnGap=\"2x\">\n                      tolerance\n                      <Tooltip\n                        label={'The \"tolerance\" property represents the distance, in pixels, of motion that is tolerated before the drag operation is aborted. If the mouse is moved during the delay duration and the tolerance is set to zero, the drag operation will be immediately aborted. If a higher tolerance is set, for example, a tolerance of 8 pixels, the operation will only be aborted if the mouse is moved by more than 8 pixels during the delay.'}\n                        maxWidth={320}\n                      >\n                        <InfoOIcon />\n                      </Tooltip>\n                    </Flex>\n                  </TextLabel>\n                  <Flex columnGap=\"2x\">\n                    <input\n                      disabled={activationConstraint !== 'delay'}\n                      type=\"range\"\n                      min={0}\n                      max={32}\n                      step={1}\n                      onChange={(event) => {\n                        const value = parseInt(event.target.value);\n                        setDelayConstraint({\n                          ...delayConstraint,\n                          tolerance: value,\n                        });\n                      }}\n                      value={delayConstraint.tolerance}\n                    />\n                    <Text\n                      sx={{\n                        color: activationConstraint === 'delay' ? colorStyle.color.primary : colorStyle.color.disabled,\n                      }}\n                    >\n                      {delayConstraint.tolerance}px\n                    </Text>\n                  </Flex>\n                </Grid>\n              </Flex>\n            </Box>\n            <Box>\n              <Box mb=\"1x\">\n                <Radio value=\"none\">\n                  Perform drag operation immediately\n                </Radio>\n              </Box>\n            </Box>\n          </Flex>\n        </RadioGroup>\n      </FormGroup>\n      <Divider my=\"4x\" />\n      <DndContext\n        collisionDetection={closestCenter}\n        measuring={{\n          draggable: {\n            measure: (node) => {\n              // Measure the node being dragged and adjust the y-coordinate to align with the table header.\n              const measuringNodeRect = node.getBoundingClientRect();\n              const tableHeaderRect = tableHeaderRef.current.getBoundingClientRect();\n              measuringNodeRect.y = tableHeaderRect.y;\n              return measuringNodeRect;\n            },\n          },\n        }}\n        modifiers={[restrictToHorizontalAxis]}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        sensors={sensors}\n      >\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n                width,\n              }}\n            >\n              <TableHeader ref={tableHeaderRef}>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableRow\n                    key={headerGroup.id}\n                  >\n                    <SortableContext\n                      items={orderedColumns}\n                      strategy={horizontalListSortingStrategy}\n                    >\n                      {headerGroup.headers.map(header => (\n                        <SortableItem\n                          key={header.id}\n                          id={header.column.id}\n                        >\n                          {({ isDragging, setActivatorNodeRef, setNodeRef, attributes, listeners, transform, transition }) => {\n                            const isPinned = header.column.columnDef.isPinned;\n                            const sx = [\n                              {\n                                cursor: 'pointer',\n                                position: 'relative',\n                                minWidth: header.column.columnDef.minSize,\n                                width: header.getSize(),\n                                ...header.column.columnDef.style,\n                                userSelect: 'none',\n                              },\n                              !isPinned && {\n                                cursor: isDragging ? 'move' : undefined,\n                                opacity: isDragging ? 0.4 : undefined,\n                                transform: CSS.Translate.toString(transform), // translate instead of transform to avoid squishing\n                                transition,\n                                // Ensure the draggable element appears on top of other elements when dragged\n                                zIndex: isDragging ? 1 : 0,\n                              },\n                            ];\n                            \n                            return (\n                              <TableCell\n                                ref={setNodeRef}\n                                sx={sx}\n                                onClick={header.column.getToggleSortingHandler()}\n                              >\n                                {header.isPlaceholder ? null : (\n                                  <Flex\n                                    // https://docs.dndkit.com/presets/sortable/usesortable#activator\n                                    // When the activator node differs from the draggable node, we recommend\n                                    // setting the activator node ref on the activator node.\n                                    // This helps `@dnd-kit` more accurately handle automatic focus management\n                                    // and can also be accessed by sensors for enhanced activation constraints.\n                                    ref={setActivatorNodeRef}\n                                    {...(!isPinned ? attributes : undefined)}\n                                    {...(!isPinned ? listeners : undefined)}\n                                    sx={{\n                                      alignItems: 'center',\n                                    }}\n                                  >\n                                    <Truncate>\n                                      {flexRender(header.column.columnDef.header, header.getContext())}\n                                    </Truncate>\n                                    {{\n                                      asc: (<SortUpIcon size=\"5x\" ml=\"1x\" />),\n                                      desc: (<SortDownIcon size=\"5x\" ml=\"1x\" />),\n                                    }[header.column.getIsSorted()] ?? null}\n                                  </Flex>\n                                )}\n                              </TableCell>\n                            );\n                          }}\n                        </SortableItem>\n                      ))}\n                    </SortableContext>\n                  </TableRow>\n                ))}\n              </TableHeader>\n              <TableBody>\n                {table.getRowModel().rows.map(row => (\n                  <TableRow\n                    key={row.id}\n                    data-selected={dataAttr(row.getIsSelected())}\n                    _hover={{\n                      backgroundColor: colorStyle.background.highlighted,\n                    }}\n                    _selected={{\n                      backgroundColor: colorStyle.background.selected,\n                    }}\n                  >\n                    <SortableContext\n                      items={orderedColumns}\n                      strategy={horizontalListSortingStrategy}\n                    >\n                      {row.getVisibleCells().map(cell => (\n                        <SortableItem\n                          key={cell.id}\n                          id={cell.column.id}\n                        >\n                          {({ isDragging, setNodeRef, transform, transition }) => {\n                            const isPinned = cell.column.columnDef.isPinned;\n                            const styleProps = {\n                              position: 'relative',\n                              minWidth: cell.column.columnDef.minSize,\n                              width: cell.column.getSize(),\n                              ...cell.column.columnDef.style,\n                            };\n                            let other = {};\n                            if (!isPinned) {\n                              other = {\n                                opacity: 1,\n                                transform: CSS.Translate.toString(transform),\n                                transition,\n                                zIndex: isDragging ? 1 : 0,\n                              };\n                            }\n                            return (\n                              <TableCell\n                                ref={setNodeRef}\n                                {...styleProps}\n                                {...other}\n                              >\n                                <Truncate>\n                                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                                </Truncate>\n                              </TableCell>\n                            );\n                          }}\n                        </SortableItem>\n                      ))}\n                    </SortableContext>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </AutoSizer>\n        <DragItem>\n          {activeId && (\n            <Text\n              color={colorStyle.color.secondary}\n              fontWeight=\"semibold\"\n            >\n              {columns.find(column => column.id === activeId)?.header}\n            </Text>\n          )}\n        </DragItem>\n      </DndContext>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-resizing",children:["Column resizing",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-resizing",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:nQ,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  ResizeHandle,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const tableRef = useRef();\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  position: 'relative',\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizingColumn = (columnSizingInfo.isResizingColumn === header.column.id);\n                const tableHeight = tableRef.current?.clientHeight ?? '100%';\n\n                // ResizeHandle\n                const resizeHandleSX = (() => {\n                  const dividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const highlightedDividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const dividerWidth = 1;\n                  const hoverableWidth = 8;\n                  const translucentWidth = 4;\n\n                  return {\n                    // You must specify absolute positioning for the resize handle to work correctly\n                    position: 'absolute',\n                    top: (variant === 'outline') ? -1 : 0,\n                    right: -1 * (isResizingColumn ? dividerWidth + translucentWidth : hoverableWidth),\n                    height: isResizingColumn ? tableHeight : '9x',\n                    zIndex: 1,\n\n                    borderLeft: dividerWidth,\n                    borderLeftColor: isResizingColumn ? highlightedDividerColor : dividerColor,\n                    opacity: isResizingColumn ? 1 : 0,\n                    _hover: {\n                      height: tableHeight,\n                      opacity: 1,\n                      borderLeftColor: highlightedDividerColor,\n                    },\n\n                    // Use `transform: translateX()` to move the resize handle when `columnResizeMode` is 'onEnd'\n                    transform: (columnResizeMode === 'onEnd' && isResizingColumn)\n                      ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                      : undefined,\n                  };\n                })();\n\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ResizeHandle\n                        sx={resizeHandleSX}\n\n                        // The following `onMouseDown` and `onTouchStart` props are required for the resize handle to work with `@tanstack/react-table`\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n\n                        // The following `onResize`, `onResizeStart`, and `onResizeEnd` props can be used to update the column size when resizing\n                        onResize={({ clientX, clientY }) => {\n                          // Update the column size based on the current resizing coordinates\n                        }}\n                        onResizeStart={({ clientX, clientY }) => {\n                          // Get the initial position of the resize handle when resizing starts\n                        }}\n                        onResizeEnd={({ clientX, clientY }) => {\n                          // Get the final position of the resize handle when resizing ends\n                        }}\n                      />\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  ResizeHandle,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const tableRef = useRef();\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  position: 'relative',\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizingColumn = (columnSizingInfo.isResizingColumn === header.column.id);\n                const tableHeight = tableRef.current?.clientHeight ?? '100%';\n\n                // ResizeHandle\n                const resizeHandleSX = (() => {\n                  const dividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const highlightedDividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const dividerWidth = 1;\n                  const hoverableWidth = 8;\n                  const translucentWidth = 4;\n\n                  return {\n                    // You must specify absolute positioning for the resize handle to work correctly\n                    position: 'absolute',\n                    top: (variant === 'outline') ? -1 : 0,\n                    right: -1 * (isResizingColumn ? dividerWidth + translucentWidth : hoverableWidth),\n                    height: isResizingColumn ? tableHeight : '9x',\n                    zIndex: 1,\n\n                    borderLeft: dividerWidth,\n                    borderLeftColor: isResizingColumn ? highlightedDividerColor : dividerColor,\n                    opacity: isResizingColumn ? 1 : 0,\n                    _hover: {\n                      height: tableHeight,\n                      opacity: 1,\n                      borderLeftColor: highlightedDividerColor,\n                    },\n\n                    // Use `transform: translateX()` to move the resize handle when `columnResizeMode` is 'onEnd'\n                    transform: (columnResizeMode === 'onEnd' && isResizingColumn)\n                      ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                      : undefined,\n                  };\n                })();\n\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ResizeHandle\n                        sx={resizeHandleSX}\n\n                        // The following `onMouseDown` and `onTouchStart` props are required for the resize handle to work with `@tanstack/react-table`\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n\n                        // The following `onResize`, `onResizeStart`, and `onResizeEnd` props can be used to update the column size when resizing\n                        onResize={({ clientX, clientY }) => {\n                          // Update the column size based on the current resizing coordinates\n                        }}\n                        onResizeStart={({ clientX, clientY }) => {\n                          // Get the initial position of the resize handle when resizing starts\n                        }}\n                        onResizeEnd={({ clientX, clientY }) => {\n                          // Get the final position of the resize handle when resizing ends\n                        }}\n                      />\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-visibility",children:["Column visibility",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-visibility",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:nL,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-visibility-and-order",children:["Column visibility and order",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-visibility-and-order",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:'Click the "Customize Columns" button to toggle column visibility and adjust their order.'}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:nB,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { ColumnsIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ColumnSettingsDrawer from './column-settings-drawer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    'priority': true,\n    'policy': true,\n    'modifiedTime': true,\n    'modifiedBy': true,\n  });\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 80px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 80px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [isColumnSettingsDrawerOpen, setIsColumnSettingsDrawerOpen] = useState(false);\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const onUpdateColumns = useCallback((columns) => {\n    const order = columns.map(column => column.id);\n    const visibility = columns.reduce((acc, column) => {\n      acc[column.id] = column.isVisible;\n      return acc;\n    }, {});\n    setColumnOrder(order);\n    setColumnVisibility(visibility);\n  }, [setColumnOrder]);\n\n  return (<>\n    <ColumnSettingsDrawer\n      columns={orderedColumns}\n      defaultColumnOrder={defaultColumnOrder}\n      onUpdateColumns={onUpdateColumns}\n      isOpen={isColumnSettingsDrawerOpen}\n      onClose={() => setIsColumnSettingsDrawerOpen(false)}\n    />\n    <Flex\n      justifyContent=\"flex-end\"\n      mb=\"4x\"\n    >\n      <Button\n        variant=\"secondary\"\n        onClick={() => setIsColumnSettingsDrawerOpen(true)}\n      >\n        <ColumnsIcon />\n        <Space width=\"2x\" />\n        Customize Columns\n      </Button>\n    </Flex>\n    <Box>\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-selected={dataAttr(row.getIsSelected())}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                  _selected={{\n                    backgroundColor: colorStyle.background.selected,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  </>);\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{"src/pages/components/table/column-visibility-and-order/column-settings-drawer.js":"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  PointerSensor,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  LinkButton,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { isNullish } from '@tonic-ui/utils';\nimport { ensureArray, ensureFunction } from 'ensure-type';\nimport _isEqual from 'lodash/isEqual';\nimport _orderBy from 'lodash/orderBy';\nimport React, {\n  Fragment,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react';\nimport HandleIcon from '@/pages/components/table/icons/icon-handle';\n\nconst UPDATE_COLUMNS = 'UPDATE_COLUMNS';\n\nconst reducer = (state, action) => {\n  if (action.type === UPDATE_COLUMNS) {\n    const nextState = {\n      ...state,\n      columns: ensureArray(action.payload),\n    };\n    return nextState;\n  }\n\n  return state;\n};\n\nconst DragHandle = forwardRef((props, ref) => {\n  return (\n    <Flex\n      role=\"presentation\"\n      sx={{\n        alignItems: 'center',\n        cursor: 'move',\n      }}\n      {...props}\n    />\n  );\n});\nDragHandle.displayName = 'DragHandle';\n\nconst SortableOverlay = ({ children }) => {\n  const dropAnimationConfig = useMemo(() => ({\n    sideEffects: defaultDropAnimationSideEffects({\n      styles: {\n        active: {\n          opacity: '0.4',\n        },\n      },\n    }),\n  }), []);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      {children}\n    </DragOverlay>\n  );\n};\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\n/**\n * @param {object} columns - The columns to be displayed in the drawer\n * @param {string} columns[].id - The id of the column\n * @param {string} columns[].label - The label of the column\n * @param {boolean} columns[].isPinned - Whether the column is pinned\n * @param {boolean} columns[].isVisible - Whether the column is visible\n * @param {string[]} defaultColumnOrder - The default order of the columns\n * @param {function} onUpdateColumns - Callback function to be called when the columns are updated\n * @param {boolean} isOpen - Whether the drawer is open\n * @param {function} onClose - Callback function to be called when the drawer is closed\n */\nconst ColumnSettingsDrawer = ({\n  columns: columnsProp,\n  defaultColumnOrder: defaultColumnOrder,\n  onUpdateColumns,\n  isOpen,\n  onClose,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const [state, dispatch] = useReducer(reducer, {\n    columns: ensureArray(columnsProp),\n  });\n  const allColumnsVisible = state.columns.every(column => column.isVisible !== false);\n  const isToggleAllChecked = allColumnsVisible;\n  const toggleAllColumns = useCallback(() => {\n    const isVisible = !allColumnsVisible;\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: state.columns.map(column => {\n        if (column.isPinned) {\n          return column;\n        }\n        return {\n          ...column,\n          isVisible: isVisible,\n        };\n      }),\n    });\n  }, [allColumnsVisible, state.columns]);\n\n  useEffect(() => {\n    const nextColumns = columnsProp;\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: nextColumns,\n    });\n  }, [columnsProp]);\n\n  const handleClickResetToDefault = useCallback(() => {\n    const nextColumns = _orderBy(state.columns, (column) => defaultColumnOrder.indexOf(column.id), ['asc'])\n      .map(column => {\n        const isVisible = defaultColumnOrder.indexOf(column.id) >= 0;\n        column.isVisible = isVisible;\n        return column;\n      });\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: nextColumns,\n    });\n  }, [defaultColumnOrder, state.columns]);\n\n  const handleUpdateColumns = useCallback(() => {\n    ensureFunction(onUpdateColumns)(state.columns);\n    ensureFunction(onClose)();\n  }, [onClose, onUpdateColumns, state.columns]);\n\n  const [activeId, setActiveId] = useState(null);\n  const getColumnById = (id) => state.columns.find(column => column.id === id);\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const renderColumn = (column) => (\n    <SortableItem id={column.id}>\n      {({\n        attributes,\n        isDragging,\n        listeners,\n        setNodeRef,\n        setActivatorNodeRef,\n        transform,\n        transition,\n      }) => {\n        let styleProps = {};\n        if (!column.isPinned) {\n          styleProps = {\n            _hover: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.highlighted,\n            },\n            opacity: isDragging ? 0.4 : undefined,\n            transform: CSS.Translate.toString(transform),\n            transition,\n            // Ensure the draggable element appears on top of other elements when dragged\n            zIndex: isDragging ? 'modal' : undefined,\n          };\n        }\n\n        return (\n          <Box\n            ref={setNodeRef}\n            sx={styleProps}\n          >\n            <Flex\n              alignItems=\"center\"\n              py=\"2x\"\n            >\n              <Flex\n                sx={{\n                  '*:hover > &': {\n                    opacity: 1,\n                  },\n                  opacity: 0,\n                  minWidth: '4x',\n                  px: '1x',\n                }}\n              >\n                {!column.isPinned && (\n                  <DragHandle\n                    ref={setActivatorNodeRef}\n                    {...attributes}\n                    {...listeners}\n                  >\n                    <HandleIcon />\n                  </DragHandle>\n                )}\n              </Flex>\n              <Checkbox\n                disabled={column.isPinned}\n                checked={column.isVisible}\n                onChange={(event) => {\n                  const isVisible = event.target.checked;\n                  const nextColumns = state.columns.map(_column => {\n                    if (_column.id !== column.id) {\n                      return _column;\n                    } \n                    return {\n                      ..._column,\n                      isVisible,\n                    };\n                  });\n                  dispatch({\n                    type: UPDATE_COLUMNS,\n                    payload: nextColumns,\n                  });\n                }}\n                sx={{\n                  width: '100%',\n                }}\n              >\n                {column.label}\n              </Checkbox>\n            </Flex>\n          </Box>\n        );\n      }}\n    </SortableItem>\n  );\n\n  const isPristine = _isEqual(state.columns, columnsProp);\n\n  return (\n    <Drawer\n      autoFocus={true}\n      backdrop={true}\n      closeOnEsc={true}\n      closeOnOutsideClick={true}\n      returnFocusOnClose={false}\n      ensureFocus={true}\n      isClosable={true}\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"sm\"\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerHeader>\n          Customize Columns\n        </DrawerHeader>\n        <DrawerBody>\n          <Flex\n            mb=\"4x\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Text color={colorStyle.color.secondary}>\n              Shown in table\n            </Text>\n            <LinkButton onClick={toggleAllColumns}>\n              {isToggleAllChecked ? 'Clear all' : 'Select all'}\n            </LinkButton>\n          </Flex>\n          <DndContext\n            sensors={sensors}\n            onDragStart={(event) => {\n              setActiveId(event.active.id);\n            }}\n            onDragEnd={({ active, over }) => {\n              if (over && active.id !== over?.id) {\n                const columns = [...state.columns];\n                const activeIndex = columns.findIndex(({ id }) => id === active.id);\n                const overIndex = columns.findIndex(({ id }) => id === over.id);\n                const nextColumns = arrayMove(columns, activeIndex, overIndex);\n                dispatch({\n                  type: UPDATE_COLUMNS,\n                  payload: nextColumns,\n                });\n              }\n              setActiveId(null);\n            }}\n            onDragCancel={() => {\n              setActiveId(null);\n            }}\n          >\n            <SortableContext\n              items={state.columns}\n            >\n              <Flex\n                sx={{\n                  flexDirection: 'column',\n                  rowGap: '1x',\n                }}\n              >\n                {state.columns.map((column) => (\n                  <Fragment key={column.id}>\n                    {renderColumn(column)}\n                  </Fragment>\n                ))}\n              </Flex>\n            </SortableContext>\n            <SortableOverlay>\n              {!isNullish(activeId) ? renderColumn(getColumnById(activeId)) : null}\n            </SortableOverlay>\n          </DndContext>\n        </DrawerBody>\n        <DrawerFooter\n          justifyContent=\"space-between\"\n        >\n          <Flex\n            alignItems=\"center\"\n            columnGap=\"2x\"\n          >\n            <Button\n              disabled={isPristine}\n              variant=\"default\"\n              onClick={handleUpdateColumns}\n            >\n              Save\n            </Button>\n            <Button\n              variant=\"default\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n          </Flex>\n          <Button\n            variant=\"secondary\"\n            onClick={handleClickResetToDefault}\n          >\n            Reset to Default\n          </Button>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport default ColumnSettingsDrawer;","src/pages/components/table/icons/icon-handle.js":'import { SVGIcon } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst Icon = (props) => (\n  <SVGIcon width="2x" height="4x" viewBox="0 0 8 16" {...props}>\n    <circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n  </SVGIcon>\n);\n\nexport default Icon;'},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { ColumnsIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ColumnSettingsDrawer from '@/pages/components/table/column-visibility-and-order/column-settings-drawer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    'priority': true,\n    'policy': true,\n    'modifiedTime': true,\n    'modifiedBy': true,\n  });\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 80px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 80px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [isColumnSettingsDrawerOpen, setIsColumnSettingsDrawerOpen] = useState(false);\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const onUpdateColumns = useCallback((columns) => {\n    const order = columns.map(column => column.id);\n    const visibility = columns.reduce((acc, column) => {\n      acc[column.id] = column.isVisible;\n      return acc;\n    }, {});\n    setColumnOrder(order);\n    setColumnVisibility(visibility);\n  }, [setColumnOrder]);\n\n  return (<>\n    <ColumnSettingsDrawer\n      columns={orderedColumns}\n      defaultColumnOrder={defaultColumnOrder}\n      onUpdateColumns={onUpdateColumns}\n      isOpen={isColumnSettingsDrawerOpen}\n      onClose={() => setIsColumnSettingsDrawerOpen(false)}\n    />\n    <Flex\n      justifyContent=\"flex-end\"\n      mb=\"4x\"\n    >\n      <Button\n        variant=\"secondary\"\n        onClick={() => setIsColumnSettingsDrawerOpen(true)}\n      >\n        <ColumnsIcon />\n        <Space width=\"2x\" />\n        Customize Columns\n      </Button>\n    </Flex>\n    <Box>\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-selected={dataAttr(row.getIsSelected())}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                  _selected={{\n                    backgroundColor: colorStyle.background.selected,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  </>);\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"pagination",children:["Pagination",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#pagination",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:e9,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleLeftIcon, AngleRightIcon } from '@tonic-ui/react-icons';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const isTableScrollingEnabled = layout !== 'table';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height=\"100%\"\n              overflow=\"visible\" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: colorStyle.background.highlighted,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === 'function') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === 'function') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"flex-end\"\n      backgroundColor={colorStyle.background.secondary}\n      px=\"6x\"\n      py=\"3x\"\n    >\n      <Text mr=\"2x\">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Menu>\n        <MenuButton variant=\"ghost\">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width=\"100%\"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Space width=\"2x\" />\n      <Input\n        width=\"10x\"\n        px={0}\n        textAlign=\"center\"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width=\"2x\" />\n      <Text>/</Text>\n      <Space width=\"2x\" />\n      <Text>{totalPages}</Text>\n      <Space width=\"2x\" />\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width=\"8x\"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <AngleLeftIcon />\n        </Button>\n        <Button\n          width=\"8x\"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleLeftIcon, AngleRightIcon } from '@tonic-ui/react-icons';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const isTableScrollingEnabled = layout !== 'table';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height=\"100%\"\n              overflow=\"visible\" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: colorStyle.background.highlighted,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === 'function') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === 'function') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"flex-end\"\n      backgroundColor={colorStyle.background.secondary}\n      px=\"6x\"\n      py=\"3x\"\n    >\n      <Text mr=\"2x\">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Menu>\n        <MenuButton variant=\"ghost\">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width=\"100%\"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Space width=\"2x\" />\n      <Input\n        width=\"10x\"\n        px={0}\n        textAlign=\"center\"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width=\"2x\" />\n      <Text>/</Text>\n      <Space width=\"2x\" />\n      <Text>{totalPages}</Text>\n      <Space width=\"2x\" />\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width=\"8x\"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <AngleLeftIcon />\n        </Button>\n        <Button\n          width=\"8x\"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"row-expanding",children:["Row expanding",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-expanding",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:eF,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Grid,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleRightIcon } from '@tonic-ui/react-icons';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  /*\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n  */\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      minSize: 48,\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <AngleRightIcon size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Grid,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleRightIcon } from '@tonic-ui/react-icons';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  /*\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n  */\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      minSize: 48,\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <AngleRightIcon size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.p,{children:["The way the expanded row is displayed in the ",(0,o.jsx)(n.code,{children:"Table"})," component depends on the value of the ",(0,o.jsx)(n.code,{children:"layout"})," prop."]}),"\n",(0,o.jsxs)(n.p,{children:["If the ",(0,o.jsx)(n.code,{children:"layout"})," prop is set to ",(0,o.jsx)(n.code,{children:"flexbox"}),", the expanded row will appear below the current row. On the other hand, if the ",(0,o.jsx)(n.code,{children:"layout"})," prop is set to ",(0,o.jsx)(n.code,{children:"table"}),", the expanded row will be displayed within a ",(0,o.jsx)(n.code,{children:"TableCell"})," that spans across the visible cells in a new row."]}),"\n",(0,o.jsxs)(n.p,{children:["Below are the code snippets that demonstrate how to render the expanded row based on the ",(0,o.jsx)(n.code,{children:"layout"})," prop:"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// layout='flexbox'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <Collapse in={row.getIsExpanded()}>\n    {renderExpandedRow({ row })}\n  </Collapse>\n)}\n"})}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// layout='table'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <TableRow>\n    <TableCell\n      padding={0}\n      borderBottom={0}\n      colSpan={row.getVisibleCells().length}\n    >\n      <Collapse in={row.getIsExpanded()}>\n        {renderExpandedRow({ row })}\n      </Collapse>\n    </TableCell>\n  </TableRow>\n)}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"row-selection",children:["Row selection",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-selection",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:eS,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [rowSelection, setRowSelection] = useState({});\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      minSize: 48,\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [rowSelection, setRowSelection] = useState({});\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      minSize: 48,\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"row-ordering-dnd",children:["Row ordering (DnD)",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-ordering-dnd",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:eg,file:{data:"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  PointerSensor,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr, isNullish } from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useCallback, useMemo, useState } from 'react';\nimport HandleIcon from './icons/icon-handle';\n\nconst DragHandle = forwardRef((\n  {\n    sx,\n    ...rest\n  },\n  ref,\n) => {\n  return (\n    <Flex\n      sx={[\n        {\n          '[role=\"row\"]:hover > [role=\"cell\"] &': {\n            opacity: 1,\n          },\n          opacity: 0,\n          cursor: 'move',\n          px: '1x',\n          width: '4x',\n          position: 'absolute',\n          left: 0,\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...rest}\n    />\n  );\n});\nDragHandle.displayName = 'DragHandle';\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst SortableOverlay = ({ children }) => {\n  const dropAnimationConfig = useMemo(() => ({\n    sideEffects: defaultDropAnimationSideEffects({\n      styles: {\n        active: {\n          opacity: '0.4',\n        },\n      },\n    }),\n  }), []);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      {children}\n    </DragOverlay>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [data, setData] = useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      minSize: 48,\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n  const rows = table.getRowModel().rows;\n\n  const [activeId, setActiveId] = useState(null);\n  const getRowById = (id) => rows.find(row => row.id === id);\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleDragStart = useCallback((event) => {\n    setActiveId(event.active.id);\n  }, []);\n  const handleDragEnd = useCallback((event) => {\n    const { over, active } = event;\n    if (over && (active.id !== over?.id)) {\n      const activeIndex = rows.findIndex(({ id }) => id === active.id);\n      const overIndex = rows.findIndex(({ id }) => id === over.id);\n\n      // Update the data\n      setData(arrayMove(data, activeIndex, overIndex));\n    }\n    setActiveId(null);\n  }, [data, rows]);\n  const handleDragCancel = useCallback((event) => {\n    setActiveId(null);\n  }, []);\n\n  const renderRow = useCallback((row) => {\n    if (!row) {\n      return null;\n    }\n\n    return (\n      <SortableItem id={row.id}>\n        {({\n          attributes,\n          isDragging,\n          listeners,\n          setActivatorNodeRef,\n          setNodeRef,\n          transform,\n          transition,\n        }) => {\n          const sx = {\n            cursor: isDragging ? 'move' : undefined,\n            _hover: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.highlighted,\n            },\n            _selected: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.selected,\n            },\n            opacity: isDragging ? 0.4 : undefined,\n            transform: CSS.Translate.toString(transform),\n            transition,\n            // Ensure the draggable element appears on top of other elements when dragged\n            zIndex: isDragging ? 1 : 0,\n          };\n\n          return (\n            <TableRow\n              ref={setNodeRef}\n              data-selected={dataAttr(row.getIsSelected())}\n              sx={sx}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n\n                if (cell.column.id === 'selection') {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      sx={{\n                        ...styleProps,\n                        position: 'relative',\n                      }}\n                    >\n                      <Flex alignItems=\"center\">\n                        <DragHandle\n                          ref={setActivatorNodeRef}\n                          {...attributes}\n                          {...listeners}\n                        >\n                          <HandleIcon />\n                        </DragHandle>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Flex>\n                    </TableCell>\n                  );\n                }\n\n                return (\n                  <TableCell\n                    key={cell.id}\n                    sx={{\n                      ...styleProps,\n                    }}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        }}\n      </SortableItem>\n    );\n  }, [colorStyle]);\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <DndContext\n        sensors={sensors}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onDragCancel={handleDragCancel}\n      >\n        <SortableContext\n          items={rows}\n        >\n          <Table layout={layout}>\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          flexRender(header.column.columnDef.header, header.getContext())\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {rows.map(row => (\n                <Fragment key={row.id}>\n                  {renderRow(row)}\n                </Fragment>\n              ))}\n              <SortableOverlay>\n                {!isNullish(activeId) ? renderRow(getRowById(activeId)) : null}\n              </SortableOverlay>\n            </TableBody>\n          </Table>\n        </SortableContext>\n      </DndContext>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{"src/pages/components/table/icons/icon-handle.js":'import { SVGIcon } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst Icon = (props) => (\n  <SVGIcon width="2x" height="4x" viewBox="0 0 8 16" {...props}>\n    <circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n  </SVGIcon>\n);\n\nexport default Icon;'},raw:"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  PointerSensor,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr, isNullish } from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useCallback, useMemo, useState } from 'react';\nimport HandleIcon from '@/pages/components/table/icons/icon-handle';\n\nconst DragHandle = forwardRef((\n  {\n    sx,\n    ...rest\n  },\n  ref,\n) => {\n  return (\n    <Flex\n      sx={[\n        {\n          '[role=\"row\"]:hover > [role=\"cell\"] &': {\n            opacity: 1,\n          },\n          opacity: 0,\n          cursor: 'move',\n          px: '1x',\n          width: '4x',\n          position: 'absolute',\n          left: 0,\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...rest}\n    />\n  );\n});\nDragHandle.displayName = 'DragHandle';\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst SortableOverlay = ({ children }) => {\n  const dropAnimationConfig = useMemo(() => ({\n    sideEffects: defaultDropAnimationSideEffects({\n      styles: {\n        active: {\n          opacity: '0.4',\n        },\n      },\n    }),\n  }), []);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      {children}\n    </DragOverlay>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [data, setData] = useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      minSize: 48,\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n  const rows = table.getRowModel().rows;\n\n  const [activeId, setActiveId] = useState(null);\n  const getRowById = (id) => rows.find(row => row.id === id);\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleDragStart = useCallback((event) => {\n    setActiveId(event.active.id);\n  }, []);\n  const handleDragEnd = useCallback((event) => {\n    const { over, active } = event;\n    if (over && (active.id !== over?.id)) {\n      const activeIndex = rows.findIndex(({ id }) => id === active.id);\n      const overIndex = rows.findIndex(({ id }) => id === over.id);\n\n      // Update the data\n      setData(arrayMove(data, activeIndex, overIndex));\n    }\n    setActiveId(null);\n  }, [data, rows]);\n  const handleDragCancel = useCallback((event) => {\n    setActiveId(null);\n  }, []);\n\n  const renderRow = useCallback((row) => {\n    if (!row) {\n      return null;\n    }\n\n    return (\n      <SortableItem id={row.id}>\n        {({\n          attributes,\n          isDragging,\n          listeners,\n          setActivatorNodeRef,\n          setNodeRef,\n          transform,\n          transition,\n        }) => {\n          const sx = {\n            cursor: isDragging ? 'move' : undefined,\n            _hover: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.highlighted,\n            },\n            _selected: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.selected,\n            },\n            opacity: isDragging ? 0.4 : undefined,\n            transform: CSS.Translate.toString(transform),\n            transition,\n            // Ensure the draggable element appears on top of other elements when dragged\n            zIndex: isDragging ? 1 : 0,\n          };\n\n          return (\n            <TableRow\n              ref={setNodeRef}\n              data-selected={dataAttr(row.getIsSelected())}\n              sx={sx}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n\n                if (cell.column.id === 'selection') {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      sx={{\n                        ...styleProps,\n                        position: 'relative',\n                      }}\n                    >\n                      <Flex alignItems=\"center\">\n                        <DragHandle\n                          ref={setActivatorNodeRef}\n                          {...attributes}\n                          {...listeners}\n                        >\n                          <HandleIcon />\n                        </DragHandle>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Flex>\n                    </TableCell>\n                  );\n                }\n\n                return (\n                  <TableCell\n                    key={cell.id}\n                    sx={{\n                      ...styleProps,\n                    }}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        }}\n      </SortableItem>\n    );\n  }, [colorStyle]);\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <DndContext\n        sensors={sensors}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onDragCancel={handleDragCancel}\n      >\n        <SortableContext\n          items={rows}\n        >\n          <Table layout={layout}>\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          flexRender(header.column.columnDef.header, header.getContext())\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {rows.map(row => (\n                <Fragment key={row.id}>\n                  {renderRow(row)}\n                </Fragment>\n              ))}\n              <SortableOverlay>\n                {!isNullish(activeId) ? renderRow(getRowById(activeId)) : null}\n              </SortableOverlay>\n            </TableBody>\n          </Table>\n        </SortableContext>\n      </DndContext>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"sorting",children:["Sorting",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#sorting",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:$,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { InfoOIcon, SortDownIcon, SortUpIcon } from '@tonic-ui/react-icons';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (<>\n    <Box mb=\"4x\" px=\"3x\">\n      <Checkbox\n        checked={enableSortingRemoval}\n        onChange={() => {\n          toggleEnableSortingRemoval();\n        }}\n      >\n        <Flex alignItems=\"center\">\n          Enable the ability to remove sorting for the table\n          <Space width=\"2x\" />\n          <Tooltip\n            label={colorMode === 'dark'\n              ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n              : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n            }\n          >\n            <InfoOIcon />\n          </Tooltip>\n        </Flex>\n      </Checkbox>\n    </Box>\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              let styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              if (header.column.getCanSort()) {\n                styleProps = {\n                  ...styleProps,\n                  cursor: 'pointer',\n                  userSelect: 'none',\n                  _hover: {\n                    backgroundColor: colorStyle.background.highlighted,\n                  },\n                };\n              }\n              if (header.column.getIsSorted()) {\n                styleProps = {\n                  ...styleProps,\n                  color: colorStyle.color.emphasis,\n                };\n              }\n              return (\n                <TableCell\n                  key={header.id}\n                  onClick={header.column.getToggleSortingHandler()}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Flex alignItems=\"center\">\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                      {{\n                        asc: (<SortUpIcon size=\"5x\" ml=\"1x\" />),\n                        desc: (<SortDownIcon size=\"5x\" ml=\"1x\" />),\n                      }[header.column.getIsSorted()] ?? null}\n                    </Flex>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n            </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </>);\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { InfoOIcon, SortDownIcon, SortUpIcon } from '@tonic-ui/react-icons';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (<>\n    <Box mb=\"4x\" px=\"3x\">\n      <Checkbox\n        checked={enableSortingRemoval}\n        onChange={() => {\n          toggleEnableSortingRemoval();\n        }}\n      >\n        <Flex alignItems=\"center\">\n          Enable the ability to remove sorting for the table\n          <Space width=\"2x\" />\n          <Tooltip\n            label={colorMode === 'dark'\n              ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n              : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n            }\n          >\n            <InfoOIcon />\n          </Tooltip>\n        </Flex>\n      </Checkbox>\n    </Box>\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              let styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              if (header.column.getCanSort()) {\n                styleProps = {\n                  ...styleProps,\n                  cursor: 'pointer',\n                  userSelect: 'none',\n                  _hover: {\n                    backgroundColor: colorStyle.background.highlighted,\n                  },\n                };\n              }\n              if (header.column.getIsSorted()) {\n                styleProps = {\n                  ...styleProps,\n                  color: colorStyle.color.emphasis,\n                };\n              }\n              return (\n                <TableCell\n                  key={header.id}\n                  onClick={header.column.getToggleSortingHandler()}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Flex alignItems=\"center\">\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                      {{\n                        asc: (<SortUpIcon size=\"5x\" ml=\"1x\" />),\n                        desc: (<SortDownIcon size=\"5x\" ml=\"1x\" />),\n                      }[header.column.getIsSorted()] ?? null}\n                    </Flex>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n            </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </>);\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"virtualized-rows",children:["Virtualized rows",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#virtualized-rows",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:E,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: colorStyle.background.highlighted,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 80,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: colorStyle.background.highlighted,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h2,{id:"commonly-asked-questions",children:["Commonly Asked Questions",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#commonly-asked-questions",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-make-the-table-body-vertically-scrollable",children:["How to make the table body vertically scrollable?",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-make-the-table-body-vertically-scrollable",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"To make the table body vertically scrollable, you can follow these steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Calculate the height of the table based on the number of rows to display."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const cellHeight = 36;\nconst headerHeight = 36;\nconst rowsToDisplay = 10;\nconst tableHeight = headerHeight + rowsToDisplay * cellHeight;\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["Wrap the ",(0,o.jsx)(n.code,{children:"TableBody"})," component with a ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component, and set the ",(0,o.jsx)(n.code,{children:"height"})," and ",(0,o.jsx)(n.code,{children:"overflow"})," props of the ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component to control the scrolling behavior."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Table\n  layout="flexbox"\n  height={tableHeight}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <TableScrollbar\n    height="100%"\n    overflow="visible" // Make scrollbar visible\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </TableScrollbar>\n</Table>\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-control-whether-to-enable-the-scrolling-feature",children:["How to control whether to enable the scrolling feature?",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-control-whether-to-enable-the-scrolling-feature",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["If you want to control whether to enable the scrolling feature dynamically, you can use a custom ",(0,o.jsx)(n.code,{children:"ConditionWrapper"})," component to conditionally wrap ",(0,o.jsx)(n.code,{children:"TableBody"})," with the ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component."]}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example implementation of the ",(0,o.jsx)(n.code,{children:"ConditionalWrapper"})," component:"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"And here's how you can use it in your code:"}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Table\n  height={isTableScrollingEnabled ? tableHeight : undefined}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <ConditionalWrapper\n    condition={isTableScrollingEnabled}\n    wrapper={children => (\n      <TableScrollbar\n        height="100%"\n        overflow="visible" // Make scrollbar visible\n      >\n        {children}\n      </TableScrollbar>\n    )}\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </ConditionalWrapper>  \n</Table>\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"props",children:["Props",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"table-1",children:["Table",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#table-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"layout"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'flexbox'"}),(0,o.jsx)(n.td,{align:"left",children:"The layout of the table. One of: 'flexbox', 'table'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"size"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'md'"}),(0,o.jsx)(n.td,{align:"left",children:"The size of TableCells. One of: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"variant"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'default'"}),(0,o.jsx)(n.td,{align:"left",children:"The variant of the table style to use. One of: 'default', 'outline'"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheader",children:["TableHeader",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheader",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablebody",children:["TableBody",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablebody",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablerow",children:["TableRow",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablerow",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablecell",children:["TableCell",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablecell",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablescrollbar",children:["TableScrollbar",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablescrollbar",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component has the same set of props as the ",(0,o.jsx)(n.a,{href:"./scrollbar#props",children:"Scrollbar"})," component."]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode | function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The content of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"width"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsxs)(n.td,{align:"left",children:["The width of the scrollbar. If set to 'auto', you can constrain the width using the ",(0,o.jsx)(n.code,{children:"minWidth"})," and ",(0,o.jsx)(n.code,{children:"maxWidth"})," props."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"height"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsxs)(n.td,{align:"left",children:["The height of the scrollbar. If set to 'auto', you can constrain the height using the ",(0,o.jsx)(n.code,{children:"minHeight"})," and ",(0,o.jsx)(n.code,{children:"maxHeight"})," props."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum width of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"maxWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The maximum width of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum height of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"maxHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The maximum height of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minThumbWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number"}),(0,o.jsx)(n.td,{align:"left",children:"32"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum width of the thumb in pixels."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minThumbHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number"}),(0,o.jsx)(n.td,{align:"left",children:"32"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum height of the thumb in pixels."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onScroll"}),(0,o.jsx)(n.td,{align:"left",children:(0,o.jsx)(n.code,{children:"(event: UIEvent) => void"})}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is scrolled."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onUpdate"}),(0,o.jsx)(n.td,{align:"left",children:"function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["A callback function that is called when the scroll position or size of the content changes. The function is passed an object containing the following properties: ",(0,o.jsx)(n.code,{children:"left"}),", ",(0,o.jsx)(n.code,{children:"top"}),", ",(0,o.jsx)(n.code,{children:"scrollLeft"}),", ",(0,o.jsx)(n.code,{children:"scrollTop"}),", ",(0,o.jsx)(n.code,{children:"scrollWidth"}),", ",(0,o.jsx)(n.code,{children:"scrollHeight"}),", ",(0,o.jsx)(n.code,{children:"clientWidth"}),", ",(0,o.jsx)(n.code,{children:"clientHeight"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflow"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsx)(n.td,{align:"left",children:"The overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflowX"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The horizontal overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflowY"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The vertical overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]})]})]})]})}var tB=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,r.ah)(),e.components).wrapper;return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(tO,e)})):tO(e)}},56208:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table",function(){return t(41859)}])},94581:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var o=t(2784),r=function(e,n){var t=(0,o.useRef)(!1),r=(0,o.useRef)(e);r.current=e,(0,o.useEffect)(function(){n&&!t.current&&("function"==typeof r.current&&r.current(),t.current=!0)},[n])}},23638:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M15 1h-14c-0.6 0-1 0.4-1 1v12c0 0.6 0.4 1 1 1h14c0.6 0 1-0.4 1-1v-12c0-0.6-0.4-1-1-1zM1 14v-11h4v11h-4zM6 14v-11h4v11h-4zM15 14h-4v-11h4v11z"}),"ColumnsIcon")},41965:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8c4.418 0 8-3.582 8-8v0c0-4.418-3.582-8-8-8v0zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5c3.59 0 6.5 2.91 6.5 6.5v0c-0.006 3.588-2.912 6.494-6.499 6.5h-0.001zM6 7v1h1v3h-1v1h4v-1h-1v-4zM9 4h-2v2h2z"}),"InfoOIcon")},31222:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M11 8.667l-3.5 3.333-3.5-3.333 0.7-0.667 2.3 2.19v-6.19h1v6.19l2.3-2.19z"}),"SortDownIcon")},86851:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M10.3 8l-2.3-2.19v6.19h-1v-6.19l-2.3 2.19-0.7-0.667 3.5-3.333 3.5 3.333z"}),"SortUpIcon")},1847:function(e,n,t){"use strict";t.d(n,{Z:function(){return z}});var o=t(53860),r=t(20325),l=t(94581),i=t(13409),a=t(56818),c=t(5081),s=t(2784),d=t(98827),u=t(35353),m=t(40596),f=t(27216),p="blue",h=t(52903),g=t(95530),b=function(e){return(0,h.tZ)(g.Z,(0,o.Zj)((0,o.Zj)({viewBox:"0 0 16 16"},e),{},{children:(0,h.tZ)("g",{fill:"currentColor",children:(0,h.tZ)("path",{d:"M6 11.060l-3-3-1 1 4 4 9-9-1-1z"})})}))};b.displayName="IconChecked";var y=function(e){return(0,h.tZ)(g.Z,(0,o.Zj)((0,o.Zj)({viewBox:"0 0 24 24"},e),{},{children:(0,h.tZ)("g",{fill:"currentColor",children:(0,h.tZ)("rect",{height:"18",width:"18",x:"3",y:"3"})})}))};y.displayName="IconIndeterminate";var x=t(49857),v=["indeterminate","size","variantColor","sx"],w=(0,s.forwardRef)(function(e,n){var t,r,l,i,s,d,u,g,w,T,C,S,R=e.indeterminate,z=e.size,D=void 0===z?"md":z,k=e.variantColor,P=void 0===k?p:k,E=e.sx,j=(0,o.Kd)(e,v),I=(0,f.u)().sizes,O=(0,m.Z)(),B=(0,o.ZQ)(O,1)[0],M={lg:I["6x"],md:I["4x"],sm:I["3x"]}[D],Z=function(e){return'input[type="'.concat("checkbox",'"]')+(0,c.Zs)(e)+" + &"},A=(0,o.Zj)((0,o._x)((0,o._x)((0,o._x)({position:"relative",border:1,width:{lg:"6x",md:"4x",sm:"3x"}[D],height:{lg:"6x",md:"4x",sm:"3x"}[D],zIndex:0},Z()+"> *",{opacity:0}),Z(":checked")+"> *",{opacity:1}),Z("[data-indeterminate]")+"> *",{opacity:1}),R?(t=({dark:"".concat(P,":60"),light:"".concat(P,":60")})[B],r=({dark:"".concat(P,":50"),light:"".concat(P,":50")})[B],l=({dark:"".concat(P,":50"),light:"".concat(P,":50")})[B],i=({dark:"".concat(P,":60"),light:"".concat(P,":60")})[B],(0,o._x)((0,o._x)((0,o._x)((0,o._x)({},Z("[data-indeterminate]"),{borderColor:{dark:"gray:50",light:"gray:40"}[B],color:t}),Z("[data-indeterminate]:hover:not(:disabled)"),{borderColor:l,color:r}),Z("[data-indeterminate]:focus-visible"),{outlineColor:i,outlineStyle:"solid",outlineWidth:"1h"}),Z("[data-indeterminate]:disabled"),{borderColor:{dark:"gray:60",light:"gray:40"}[B],color:{dark:"gray:60",light:"gray:40"}[B],opacity:.28})):(s=({dark:"white:emphasis",light:"white:emphasis"})[B],d="transparent",u=({dark:"".concat(P,":60"),light:"".concat(P,":60")})[B],g=({dark:"".concat(P,":50"),light:"".concat(P,":50")})[B],w=({dark:"".concat(P,":50"),light:"".concat(P,":50")})[B],T=({dark:"gray:60",light:"gray:40"})[B],C=({dark:"".concat(P,":60"),light:"".concat(P,":60")})[B],S=({dark:"".concat(P,":60"),light:"".concat(P,":60")})[B],(0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)({backgroundColor:d,borderColor:{dark:"gray:50",light:"gray:40"}[B],color:s},Z(":hover"),{backgroundColor:d,borderColor:w,color:s}),Z(":disabled"),{backgroundColor:d,borderColor:T,color:s,opacity:.28}),Z(":focus-visible"),{outlineColor:S,outlineStyle:"solid",outlineWidth:"1h"}),Z(":checked"),{backgroundColor:u,borderColor:C,color:s}),Z(":checked:hover:not(:disabled)"),{backgroundColor:g,borderColor:w,color:s}),Z(":checked:focus-visible"),{backgroundColor:"inherit",borderColor:"transparent",color:s}),Z(":checked:focus-visible")+"> div:first-of-type",{backgroundColor:u}),Z(":checked:disabled"),{backgroundColor:{dark:"gray:60",light:"gray:40"}[B],borderColor:T,color:{dark:"white:emphasis",light:"black:primary"}[B],opacity:.28})));return(0,h.tZ)(x.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({"aria-hidden":(0,a.Qm)(!0),role:"checkbox",sx:[A].concat((0,o.u)((0,c.rY)(E)))},{display:"inline-flex",alignItems:"center",justifyContent:"center",flexShrink:0,userSelect:"none"}),j),{},{children:R?(0,h.tZ)(y,{size:M}):(0,h.tZ)(b,{size:M})}))});w.displayName="CheckboxControlBox";var T=t(16301),C=function(){if(!s.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,s.useContext)(T.w)},S=["checked","children","defaultChecked","disabled","id","indeterminate","inputProps","inputRef","name","onBlur","onChange","onClick","onFocus","size","value","variantColor"],R=(0,s.forwardRef)(function(e,n){var t,m,f=(0,d.Z)({props:e,name:"Checkbox"}),g=f.checked,b=f.children,y=f.defaultChecked,v=f.disabled,T=f.id,R=f.indeterminate,z=f.inputProps,D=f.inputRef,k=f.name,P=f.onBlur,E=f.onChange,j=f.onClick,I=f.onFocus,O=f.size,B=f.value,M=f.variantColor,Z=(0,o.Kd)(f,S),A=g,H=v,V=k,F=E,W=O,G=M,L=(0,s.useRef)(),N=(0,r.Z)(D,L),K=C(),_="";if(K){var U,X,Y,$,q,Q,J=(0,o.Zj)({},K),ee=J.disabled,en=J.name,et=J.size,eo=J.value,er=J.variantColor,el=J.onChange;void 0!==eo&&(A=(0,c.rY)(eo).includes(B)),H=null!==(U=H)&&void 0!==U?U:ee,(0,i.Rw)(V)||(0,i.Rw)(en)||V===en||(_='Warning: The `Checkbox` has a `name` prop ("'.concat(V,'") that conflicts with the `CheckboxGroup`\'s `name` prop ("').concat(en,'")')),V=null!==(X=V)&&void 0!==X?X:en,F=(0,a.PP)(F,el),W=null!==(Y=null!==($=W)&&void 0!==$?$:et)&&void 0!==Y?Y:"md",G=null!==(q=null!==(Q=G)&&void 0!==Q?Q:er)&&void 0!==q?q:p}else W=null!==(t=W)&&void 0!==t?t:"md",G=null!==(m=G)&&void 0!==m?m:p;(0,l.Z)(function(){},[!!_]);var ei={display:"inline-flex",verticalAlign:"top",alignItems:"center",cursor:H?"not-allowed":"pointer"};return(0,h.BX)(x.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({as:"label",ref:n},ei),Z),{},{children:[(0,h.tZ)(u.Z,(0,o.Zj)({as:"input",checked:A,"data-indeterminate":(0,a.PB)(R),defaultChecked:y,disabled:H,id:T,name:V,onBlur:P,onChange:F,onClick:j,onFocus:I,ref:N,type:"checkbox",value:B},z)),(0,h.tZ)(w,{indeterminate:R,size:W,variantColor:G}),!(0,i.Rw)(b)&&(0,h.tZ)(x.Z,{ml:"2x",userSelect:"none",opacity:H?.28:1,children:b})]}))});R.displayName="Checkbox";var z=R},16301:function(e,n,t){"use strict";t.d(n,{w:function(){return o}});var o=(0,t(2784).createContext)()},34925:function(e,n,t){"use strict";t.d(n,{Z:function(){return d}});var o=t(53860),r=t(2784),l=t(98827),i=t(14641),a=t(52903),c=t(49857),s=(0,r.forwardRef)(function(e,n){var t=(0,l.Z)({props:e,name:"DarkMode"});return(0,a.tZ)(i.Z,{value:"dark",children:(0,a.tZ)(c.Z,(0,o.Zj)({ref:n,colorScheme:"dark"},t))})});s.displayName="DarkMode";var d=s},69821:function(e,n,t){"use strict";t.d(n,{Z:function(){return d}});var o=t(53860),r=t(2784),l=t(98827),i=t(14641),a=t(52903),c=t(49857),s=(0,r.forwardRef)(function(e,n){var t=(0,l.Z)({props:e,name:"LightMode"});return(0,a.tZ)(i.Z,{value:"light",children:(0,a.tZ)(c.Z,(0,o.Zj)({ref:n,colorScheme:"light"},t))})});s.displayName="LightMode";var d=s},82412:function(e,n,t){"use strict";t.d(n,{Z:function(){return S}});var o=t(53860),r=t(70404),l=t(56818),i=t(92307),a=t.n(i),c=t(2784),s=t(64355),d=t.n(s),u=t(98827),m=t(47732),f=t(3241),p=t(20325),h=t(79937),g=t(74086),b=t(52903),y=t(49857),x=(0,c.forwardRef)(function(e,n){var t=(0,u.Z)({props:e,name:"DrawerContainer"}),r=(0,g.Z)(),l=(0,o.Zj)({},r),i=l.backdrop,a=l.closeOnOutsideClick,c=l.onClose,s=l.placement,d=l.containerRef,m=(0,p.Z)(d,n),f=(0,h.Pw)({backdrop:i,placement:s}),x=(0,o.Zj)((0,o.Zj)({ref:m,onClick:function(e){e.stopPropagation(),a&&"function"==typeof c&&c(e)}},f),t);return(0,b.tZ)(y.Z,(0,o.Zj)({},x))});x.displayName="DrawerContainer";var v=t(59845),w=["autoFocus","backdrop","children","closeOnEsc","closeOnOutsideClick","ensureFocus","finalFocusRef","initialFocusRef","isClosable","isOpen","onClose","placement","portalProps","returnFocusOnClose","size"],T=a()(function(e){return(0,o.Zj)({},e)}),C=(0,c.forwardRef)(function(e,n){var t=(0,u.Z)({props:e,name:"Drawer"}),i=t.autoFocus,a=void 0!==i&&i,s=t.backdrop,p=t.children,h=t.closeOnEsc,g=t.closeOnOutsideClick,y=t.ensureFocus,C=void 0!==y&&y,S=t.finalFocusRef,R=t.initialFocusRef,z=t.isClosable,D=t.isOpen,k=void 0!==D&&D,P=t.onClose,E=t.placement,j=t.portalProps,I=t.returnFocusOnClose,O=t.size,B=(0,o.Kd)(t,w),M=(0,c.useState)(k),Z=(0,o.ZQ)(M,2),A=Z[0],H=Z[1],V=(0,c.useRef)(),F=(0,c.useRef)(null),W=T({autoFocus:a,backdrop:void 0!==s&&s,closeOnEsc:void 0!==h&&h,closeOnOutsideClick:void 0!==g&&g,ensureFocus:C,finalFocusRef:S,initialFocusRef:R,isClosable:void 0!==z&&z,isOpen:k,onClose:P,placement:void 0===E?"right":E,size:void 0===O?"auto":O,containerRef:V,contentRef:F,scrollBehavior:"inside"}),G=(void 0===I||I)&&!S,L=(0,c.useCallback)(function(){if(R&&R.current){var e=R.current;"function"==typeof e.focus&&e.focus();return}if(F.current){var n=F.current;if((0,r.t)(n).length>0)return;"function"==typeof n.focus&&n.focus()}},[R]),N=(0,c.useCallback)(function(){if(S&&S.current){var e=S.current;"function"==typeof e.focus&&e.focus()}},[S]),K=(0,c.useCallback)(function(){H(!1)},[]);return(0,c.useEffect)(function(){if(k&&!A){H(!0);return}},[k,A]),(0,b.tZ)(v.r.Provider,{value:W,children:(0,b.tZ)(f.Z,{in:k,onExitComplete:K,children:!!A&&(0,b.tZ)(m.Z,(0,o.Zj)((0,o.Zj)({},j),{},{children:(0,b.tZ)(d(),{disabled:!C,autoFocus:a,returnFocus:G,onActivation:L,onDeactivation:N,children:(0,b.tZ)(x,(0,o.Zj)((0,o.Zj)({ref:n},B),{},{children:(0,l.Pu)(p,W)}))})}))})})});C.displayName="Drawer";var S=C},6192:function(e,n,t){"use strict";t.d(n,{Z:function(){return h}});var o=t(53860),r=t(20325),l=t(56818),i=t(2784),a=t(98827),c=t(48504),s=t(62272),d=t(79937),u=t(74086),m=t(52903),f=["TransitionComponent","TransitionProps"],p=(0,i.forwardRef)(function(e,n){var t=(0,a.Z)({props:e,name:"DrawerOverlay"}),p=t.TransitionComponent,h=void 0===p?s.Z:p,g=t.TransitionProps,b=(0,o.Kd)(t,f),y=(0,u.Z)(),x=(0,o.Zj)({},y).isOpen,v=(0,c.Z)(),w=(0,o.ZQ)(v,2)[1],T=(0,i.useRef)(),C=(0,r.Z)(T,n),S=(0,d.Bp)(),R=(0,o.Zj)((0,o.Zj)({ref:C},S),b);return(0,m.tZ)(h,(0,o.Zj)((0,o.Zj)((0,o.Zj)({appear:!!y},g),R),{},{in:!y||x,onExited:(0,l.PP)(w,null==g?void 0:g.onExited)}))});p.displayName="DrawerOverlay";var h=p},17025:function(e,n,t){"use strict";t.d(n,{Z:function(){return u}});var o=t(53860),r=t(2784),l=t(83513),i=t(98827),a=t(19088),c=t(10130),s=t(52903),d=(0,r.forwardRef)(function(e,n){var t=(0,i.Z)({props:e,name:"LinkButton"}),r=(0,c.u)();return(0,s.tZ)(a.Z,(0,o.Zj)((0,o.Zj)({as:l.Z,ref:n},r),t))});d.displayName="LinkButton";var u=d},71107:function(e,n,t){"use strict";t.d(n,{Z:function(){return C}});var o=t(53860),r=t(20325),l=t(94581),i=t(13409),a=t(56818),c=t(2784),s=t(98827),d=t(35353),u="blue",m=t(5081),f=t(40596),p=t(27216),h=t(52903),g=t(49857),b=["size","variantColor","sx"],y=(0,c.forwardRef)(function(e,n){var t,r,l,i,c,s,d,y,x=e.size,v=void 0===x?"md":x,w=e.variantColor,T=void 0===w?u:w,C=e.sx,S=(0,o.Kd)(e,b),R=(0,p.u)(),z=(0,f.Z)(),D=(0,o.ZQ)(z,1)[0],k={lg:"6x",md:"4x",sm:"3x"}[v],P={lg:"6x",md:"4x",sm:"3x"}[v],E="calc(".concat(null==R?void 0:null===(d=R.sizes)||void 0===d?void 0:d[k]," / 2)"),j="calc(".concat(null==R?void 0:null===(y=R.sizes)||void 0===y?void 0:y[P]," / 2)"),I=function(e){return'input[type="'.concat("radio",'"]')+(0,m.Zs)(e)+" + &"},O=(0,o.Zj)((0,o._x)((0,o._x)({border:1,borderRadius:"circle",width:k,height:P},I()+"> *",{opacity:0}),I(":checked")+"> *",{opacity:1}),(t=({dark:"".concat(T,":60"),light:"".concat(T,":60")})[D],r=({dark:"".concat(T,":50"),light:"".concat(T,":50")})[D],l=({dark:"".concat(T,":50"),light:"".concat(T,":50")})[D],i=({dark:"gray:60",light:"gray:40"})[D],c=({dark:"".concat(T,":60"),light:"".concat(T,":60")})[D],s=({dark:"".concat(T,":60"),light:"".concat(T,":60")})[D],(0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)({borderColor:{dark:"gray:50",light:"gray:40"}[D]},I(":hover"),{borderColor:l}),I(":focus-visible"),{outlineColor:s,outlineStyle:"solid",outlineWidth:"1h"}),I(":disabled"),{borderColor:i,opacity:.28}),I(":checked"),{borderColor:c,color:t}),I(":checked:hover:not(:disabled)"),{borderColor:l,color:r}),I(":checked:disabled"),{borderColor:i,color:{dark:"gray:60",light:"gray:40"}[D],opacity:.28})));return(0,h.tZ)(g.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({"aria-hidden":(0,a.Qm)(!0),role:"radio",sx:[O].concat((0,o.u)((0,m.rY)(C)))},{display:"inline-flex",alignItems:"center",justifyContent:"center",flexShrink:0,userSelect:"none"}),S),{},{children:(0,h.tZ)(g.Z,{backgroundColor:"currentColor",borderRadius:"circle",display:"inline-flex",width:E,height:j})}))});y.displayName="RadioControlBox";var x=t(84769),v=function(){if(!c.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,c.useContext)(x.L)},w=["checked","children","defaultChecked","disabled","id","inputProps","inputRef","name","onBlur","onChange","onClick","onFocus","size","value","variantColor"],T=(0,c.forwardRef)(function(e,n){var t,m,f=(0,s.Z)({props:e,name:"Radio"}),p=f.checked,b=f.children,x=f.defaultChecked,T=f.disabled,C=f.id,S=f.inputProps,R=f.inputRef,z=f.name,D=f.onBlur,k=f.onChange,P=f.onClick,E=f.onFocus,j=f.size,I=f.value,O=f.variantColor,B=(0,o.Kd)(f,w),M=p,Z=T,A=z,H=k,V=j,F=O,W=(0,c.useRef)(),G=(0,r.Z)(R,W),L=v(),N="";if(L){var K,_,U,X,Y,$,q=(0,o.Zj)({},L),Q=q.disabled,J=q.name,ee=q.size,en=q.value,et=q.variantColor,eo=q.onChange;void 0!==en&&(M=en===I),Z=null!==(K=Z)&&void 0!==K?K:Q,(0,i.Rw)(A)||(0,i.Rw)(J)||A===J||(N='Warning: The `Radio` has a `name` prop ("'.concat(A,'") that conflicts with the `RadioGroup`\'s `name` prop ("').concat(J,'")')),A=null!==(_=A)&&void 0!==_?_:J,H=(0,a.PP)(H,eo),V=null!==(U=null!==(X=V)&&void 0!==X?X:ee)&&void 0!==U?U:"md",F=null!==(Y=null!==($=F)&&void 0!==$?$:et)&&void 0!==Y?Y:u}else V=null!==(t=V)&&void 0!==t?t:"md",F=null!==(m=F)&&void 0!==m?m:u;(0,l.Z)(function(){},[!!N]);var er={display:"inline-flex",verticalAlign:"top",alignItems:"center",cursor:Z?"not-allowed":"pointer"};return(0,h.BX)(g.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({as:"label",ref:n},er),B),{},{children:[(0,h.tZ)(d.Z,(0,o.Zj)({as:"input",checked:M,defaultChecked:x,disabled:Z,id:C,name:A,onBlur:D,onChange:H,onClick:P,onFocus:E,ref:G,type:"radio",value:I},S)),(0,h.tZ)(y,{size:V,variantColor:F}),!(0,i.Rw)(b)&&(0,h.tZ)(g.Z,{ml:"2x",userSelect:"none",opacity:Z?.28:1,children:b})]}))});T.displayName="Radio";var C=T},47497:function(e,n,t){"use strict";t.d(n,{Z:function(){return h}});var o=t(53860),r=t(56818),l=t(92307),i=t.n(l),a=t(2784),c=t(98827),s=t(65204),d=t(20655),u=t(84769),m=t(52903),f=i()(function(e){return(0,o.Zj)({},e)}),p=function(e){var n=(0,c.Z)({props:e,name:"RadioGroup"}),t=n.children,l=n.defaultValue,i=n.disabled,p=n.name,h=n.size,g=n.value,b=n.variantColor,y=n.onChange,x=(0,d.Z)(),v=null!=p?p:"".concat(s.Z.name,":RadioGroup-").concat(x),w=(0,a.useState)({value:null!=g?g:l}),T=(0,o.ZQ)(w,2),C=T[0],S=T[1];(0,a.useEffect)(function(){void 0!==g&&S({value:g})},[g]);var R=f({disabled:i,name:v,onChange:function(e){var n=e.target.value;void 0!==g?S({value:g}):S({value:n}),"function"==typeof y&&y(n)},size:h,value:C.value,variantColor:b});return(0,m.tZ)(u.L.Provider,{value:R,children:(0,r.Pu)(t,R)})};p.displayName="RadioGroup";var h=p},84769:function(e,n,t){"use strict";t.d(n,{L:function(){return o}});var o=(0,t(2784).createContext)()},10636:function(e,n,t){"use strict";t.d(n,{Z:function(){return p}});var o=t(53860),r=t(56818),l=t(2784),i=t(98827),a=t(40596),c=function(e){var n=e.isResizing,t=(0,a.Z)(),r=(0,o.ZQ)(t,1)[0];return{backgroundColor:n?({dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"})[r]:"transparent",boxSizing:n?"content-box":"border-box",cursor:"col-resize",touchAction:"none",userSelect:"none",width:n?"1x":"2x"}},s=function(){var e=null;return function(){if("boolean"==typeof e)return e;try{var n=function(){};window.addEventListener("test",n,{get passive(){return e=!0,!1}}),window.removeEventListener("test",n)}catch(n){e=!1}return e}},d=t(52903),u=t(49857),m=["onMouseDown","onResize","onResizeEnd","onResizeStart","onTouchStart"],f=(0,l.forwardRef)(function(e,n){var t=(0,i.Z)({props:e,name:"ResizeHandle"}),a=t.onMouseDown,f=t.onResize,p=t.onResizeEnd,h=t.onResizeStart,g=t.onTouchStart,b=(0,o.Kd)(t,m),y=(0,l.useState)(!1),x=(0,o.ZQ)(y,2),v=x[0],w=x[1],T=c({isResizing:v}),C=(0,l.useCallback)(function(e){var n=e.clientX,t=e.clientY;null==h||h({clientX:n,clientY:t}),w(!0);var r="mousemove",l="mouseup",i=(0,o._x)((0,o._x)({},r,function(e){var n=e.clientX,t=e.clientY;null==f||f({clientX:n,clientY:t})}),l,function(e){document.removeEventListener("mousemove",i[r]),document.removeEventListener("mouseup",i[l]),w(!1);var n=e.clientX,t=e.clientY;null==p||p({clientX:n,clientY:t})}),a=!!s()&&{passive:!1};document.addEventListener("mousemove",i[r],a),document.addEventListener("mouseup",i[l],a)},[f,p,h]),S=(0,l.useCallback)(function(e){if(!("touchstart"===e.type&&Array.isArray(e.touches)&&e.touches.length>1)){var n,t,r=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,l=Array.isArray(e.touches)?null===(t=e.touches[0])||void 0===t?void 0:t.clientY:void 0;null==h||h({clientX:r,clientY:l}),w(!0);var i="touchmove",a="touchend",c=(0,o._x)((0,o._x)({},i,function(e){e.cancelable&&(e.preventDefault(),e.stopPropagation());var n,t,o=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,r=Array.isArray(e.touches)?null===(t=e.touches[0])||void 0===t?void 0:t.clientY:void 0;return null==f||f({clientX:o,clientY:r}),!1}),a,function(e){document.removeEventListener("touchmove",c[i]),document.removeEventListener("touchend",c[a]),e.cancelable&&(e.preventDefault(),e.stopPropagation()),w(!1);var n,t,o=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,r=Array.isArray(e.touches)?null===(t=e.touches[0])||void 0===t?void 0:t.clientY:void 0;null==p||p({clientX:o,clientY:r})}),d=!!s()&&{passive:!1};document.addEventListener("touchmove",c[i],d),document.addEventListener("touchend",c[a],d)}},[f,p,h]);return(0,d.tZ)(u.Z,(0,o.Zj)((0,o.Zj)({ref:n,onMouseDown:(0,r.N)(a,C),onTouchStart:(0,r.N)(g,S)},T),b))});f.displayName="ResizeHandle";var p=f},67622:function(e,n,t){"use strict";t.d(n,{Z:function(){return u}});var o=t(53860),r=t(2784),l=t(98827),i=t(70758),a=t(91334),c=t(52903),s=["size"],d=(0,r.forwardRef)(function(e,n){var t=(0,l.Z)({props:e,name:"TextLabel"}),r=t.size,d=(0,o.Kd)(t,s),u=(0,a.w)({size:r});return(0,c.tZ)(i.Z,(0,o.Zj)((0,o.Zj)({as:"label",ref:n},u),d))});d.displayName="TextLabel";var u=d},35353:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var o=t(53860),r=t(2784),l=t(98827),i=t(52903),a=t(49857),c=(0,r.forwardRef)(function(e,n){var t=(0,l.Z)({props:e,name:"VisuallyHidden"});return(0,i.tZ)(a.Z,(0,o.Zj)((0,o.Zj)({ref:n},{position:"absolute",width:1,height:1,padding:0,border:0,overflow:"hidden",clipPath:"inset(50%)",whiteSpace:"nowrap"}),t))});c.displayName="VisuallyHidden";var s=c}},function(e){e.O(0,[5220,1630,7326,978,3732,6120,2888,9774,179],function(){return e(e.s=56208)}),_N_E=e.O()}]);