(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5217],{75073:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return C}});var l=n(52322),o=n(45392),i=n(96835),r=n(53310),s=n(15192),a=n(66785),c=n(87888),d=n(743),h=n(94829),p=n(2784),f=function(e){var t=e.children;return p.createElement(r.Z,{label:t,PopperProps:{usePortal:!0}},t)},u=function(){var e="This text string is not truncated",t="This text string will be truncated when exceeding its container width";return p.createElement(s.Z,{width:240},p.createElement(a.Z,null,"Options"),p.createElement(c.Z,{width:"100%"},p.createElement(d.Z,{maxHeight:200,overflowX:"hidden",overflowY:"auto"},p.createElement(h.Z,null,p.createElement(f,null,t)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,t)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,e)),p.createElement(h.Z,null,p.createElement(f,null,e)))))},x=function(){return p.createElement(r.Z,{PopperProps:{usePortal:!0},label:"This is a tooltip"},"This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.")},m=n(73645),w=n(70758),j=n(18267);function g(){return(g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}var T=function(){return p.createElement(r.Z,{label:"This is a tooltip"},function(e){var t=e.ref,n=e.style;return p.createElement(m.Z,{alignItems:"center",columnGap:"2x"},p.createElement(j.Z,null),p.createElement(w.Z,g({ref:t},n),"This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content."))})},v=n(72448),b=n(49857),O=function(){return p.createElement(p.Fragment,null,p.createElement(r.Z,{label:"This is a tooltip"},"This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content."),p.createElement(v.Z,{my:"4x"}),p.createElement(b.Z,{width:140.7},p.createElement(r.Z,{label:"This is a tooltip"},"This text string is truncted")),p.createElement(v.Z,{my:"4x"}),p.createElement(r.Z,{label:"This is a tooltip"},"This text string is not truncated"))},y=n(67622),I=n(50397);function M(e){var t=Object.assign({div:"div",h1:"h1",p:"p",code:"code",blockquote:"blockquote",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),e.components);return(0,l.jsxs)(t.div,{className:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,l.jsx)(t.h1,{id:"overflowtooltip",children:"OverflowTooltip"}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"OverflowTooltip"})," component is a tooltip that only displays when text overflows its container."]}),"\n",(0,l.jsxs)(t.blockquote,{children:["\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(y.Z,{children:(0,l.jsxs)(m.Z,{alignItems:"center",columnGap:"2x",mb:"2x",children:[(0,l.jsx)(I.Z,{})," IMPORTANT NOTICE"]})}),"\nBy default, the ",(0,l.jsx)(t.code,{children:"OverflowTooltip"})," component has the ",(0,l.jsx)(t.code,{children:"placement"})," prop set to ",(0,l.jsx)(t.code,{children:"bottom-end"})," and the ",(0,l.jsx)(t.code,{children:"offset"})," prop set to ",(0,l.jsx)(t.code,{children:"[8, 12]"}),". In this setup, the first value in the ",(0,l.jsx)(t.code,{children:"offset"})," array controls the skidding, while the second value determines the distance. You may need to modify the ",(0,l.jsx)(t.code,{children:"placement"})," and ",(0,l.jsx)(t.code,{children:"offset"})," props to suit your specific requirements better."]}),"\n"]}),"\n",(0,l.jsxs)(t.h2,{id:"import",children:["Import",(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-js",children:"import { OverflowTooltip } from '@tonic-ui/react';\n"})}),"\n",(0,l.jsxs)(t.h2,{id:"usage",children:["Usage",(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(t.p,{children:"When the text overflows its container, it will be truncated, and an ellipsis will be added. Hovering over or focusing on the truncated text will display a tooltip."}),"\n",(0,l.jsx)(t.p,{children:"By default, the overflow tooltip does not include an arrow and will display next to the cursor."}),"\n",(0,l.jsx)(i.Z,Object.assign({},{component:O,file:{data:'import { Box, Divider, OverflowTooltip } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <>\n      <OverflowTooltip\n        label="This is a tooltip"\n      >\n        This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.\n      </OverflowTooltip>\n      <Divider my="4x" />\n      <Box width={140.7}>\n        <OverflowTooltip\n          label="This is a tooltip"\n        >\n          This text string is truncted\n        </OverflowTooltip>\n      </Box>\n      <Divider my="4x" />\n      <OverflowTooltip\n        label="This is a tooltip"\n      >\n        This text string is not truncated\n      </OverflowTooltip>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/overflow-tooltip/index.page.mdx"},sandbox:{files:{},raw:'import { Box, Divider, OverflowTooltip } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <>\n      <OverflowTooltip\n        label="This is a tooltip"\n      >\n        This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.\n      </OverflowTooltip>\n      <Divider my="4x" />\n      <Box width={140.7}>\n        <OverflowTooltip\n          label="This is a tooltip"\n        >\n          This text string is truncted\n        </OverflowTooltip>\n      </Box>\n      <Divider my="4x" />\n      <OverflowTooltip\n        label="This is a tooltip"\n      >\n        This text string is not truncated\n      </OverflowTooltip>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,l.jsxs)(t.p,{children:["In the second example, a function is passed as a child of the ",(0,l.jsx)(t.code,{children:"OverflowTooltip"})," component. The function is called with an object containing a ",(0,l.jsx)(t.code,{children:"ref"})," and a ",(0,l.jsx)(t.code,{children:"style"})," property, which should be spread to the element that needs to be truncated. In this case, a ",(0,l.jsx)(t.code,{children:"Text"})," component is used to display the text, and the ",(0,l.jsx)(t.code,{children:"ref"})," and ",(0,l.jsx)(t.code,{children:"style"})," props are spread to it. This allows the ",(0,l.jsx)(t.code,{children:"OverflowTooltip"})," component to detect when the text overflows and display a tooltip."]}),"\n",(0,l.jsx)(i.Z,Object.assign({},{component:T,file:{data:"import { Flex, OverflowTooltip, Text } from '@tonic-ui/react';\nimport { MenuIcon } from '@tonic-ui/react-icons';\nimport React from 'react';\n\nconst App = () => {\n  return (\n    <OverflowTooltip\n      label=\"This is a tooltip\"\n    >\n      {({ ref, style }) => (\n        <Flex alignItems=\"center\" columnGap=\"2x\">\n          <MenuIcon />\n          <Text ref={ref} {...style}>\n            This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.\n          </Text>\n        </Flex>\n      )}\n    </OverflowTooltip>\n  );\n};\n\nexport default App;",path:"pages/components/overflow-tooltip/index.page.mdx"},sandbox:{files:{},raw:"import { Flex, OverflowTooltip, Text } from '@tonic-ui/react';\nimport { MenuIcon } from '@tonic-ui/react-icons';\nimport React from 'react';\n\nconst App = () => {\n  return (\n    <OverflowTooltip\n      label=\"This is a tooltip\"\n    >\n      {({ ref, style }) => (\n        <Flex alignItems=\"center\" columnGap=\"2x\">\n          <MenuIcon />\n          <Text ref={ref} {...style}>\n            This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.\n          </Text>\n        </Flex>\n      )}\n    </OverflowTooltip>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,l.jsxs)(t.h2,{id:"commonly-asked-questions",children:["Commonly Asked Questions",(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#commonly-asked-questions",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(t.h3,{id:"preventing-tooltip-cut-off-with-popperprops",children:["Preventing tooltip cut-off with ",(0,l.jsx)(t.code,{children:"PopperProps"}),(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#preventing-tooltip-cut-off-with-popperprops",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(t.p,{children:["By default, the ",(0,l.jsx)(t.code,{children:"OverflowTooltip"})," component positions the tooltip relative to its parent container. In some cases, the tooltip content might be cut off when it extends outside the container that holds it."]}),"\n",(0,l.jsxs)(t.p,{children:["To prevent this, pass ",(0,l.jsx)(t.code,{children:"PopperProps={{ usePortal: true }}"})," to the ",(0,l.jsx)(t.code,{children:"OverflowTooltip"}),". This will position the tooltip at the document root."]}),"\n",(0,l.jsx)(i.Z,Object.assign({},{component:x,file:{data:"import { OverflowTooltip } from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  return (\n    <OverflowTooltip\n      PopperProps={{ usePortal: true }}\n      label=\"This is a tooltip\"\n    >\n      This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.\n    </OverflowTooltip>\n  );\n};\n\nexport default App;",path:"pages/components/overflow-tooltip/index.page.mdx"},sandbox:{files:{},raw:"import { OverflowTooltip } from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  return (\n    <OverflowTooltip\n      PopperProps={{ usePortal: true }}\n      label=\"This is a tooltip\"\n    >\n      This text string will be truncated when exceeding its container width. To see this in action, try resizing your browser viewport. If the text overflows, a tooltip will appear, displaying the full content.\n    </OverflowTooltip>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,l.jsxs)(t.h3,{id:"misalignment-with-menu-items",children:["Misalignment with menu items",(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#misalignment-with-menu-items",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"OverflowTooltip"})," is positioned next to the cursor by default. However, when used within a popup menu, the tooltip may not align correctly with the menu items."]}),"\n",(0,l.jsxs)(t.p,{children:["To resolve this issue, set ",(0,l.jsx)(t.code,{children:"PopperProps={{ usePortal: true }}"}),"."]}),"\n",(0,l.jsx)(i.Z,Object.assign({},{component:u,file:{data:"import {\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  OverflowTooltip,\n  Scrollbar,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst CustomOverflowTooltip = ({ children }) => {\n  return (\n    <OverflowTooltip\n      label={children}\n      PopperProps={{ usePortal: true }}\n    >\n      {children}\n    </OverflowTooltip>\n  );\n};\n\nconst App = () => {\n  const shortText = 'This text string is not truncated';\n  const longText = 'This text string will be truncated when exceeding its container width';\n\n  return (\n    <Menu width={240}>\n      <MenuButton>Options</MenuButton>\n      <MenuList width=\"100%\">\n        <Scrollbar maxHeight={200} overflowX=\"hidden\" overflowY=\"auto\">\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {longText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {longText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n        </Scrollbar>\n      </MenuList>\n    </Menu>\n  );\n};\n\nexport default App;",path:"pages/components/overflow-tooltip/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  OverflowTooltip,\n  Scrollbar,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst CustomOverflowTooltip = ({ children }) => {\n  return (\n    <OverflowTooltip\n      label={children}\n      PopperProps={{ usePortal: true }}\n    >\n      {children}\n    </OverflowTooltip>\n  );\n};\n\nconst App = () => {\n  const shortText = 'This text string is not truncated';\n  const longText = 'This text string will be truncated when exceeding its container width';\n\n  return (\n    <Menu width={240}>\n      <MenuButton>Options</MenuButton>\n      <MenuList width=\"100%\">\n        <Scrollbar maxHeight={200} overflowX=\"hidden\" overflowY=\"auto\">\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {longText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {longText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n          <MenuItem>\n            <CustomOverflowTooltip>\n              {shortText}\n            </CustomOverflowTooltip>\n          </MenuItem>\n        </Scrollbar>\n      </MenuList>\n    </Menu>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,l.jsxs)(t.h2,{id:"props",children:["Props",(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(t.h3,{id:"overflowtooltip-1",children:["OverflowTooltip",(0,l.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#overflowtooltip-1",children:(0,l.jsx)(t.svg,{children:(0,l.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{align:"left",children:"Name"}),(0,l.jsx)(t.th,{align:"left",children:"Type"}),(0,l.jsx)(t.th,{align:"left",children:"Default"}),(0,l.jsx)(t.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"PopperComponent"}),(0,l.jsx)(t.td,{align:"left",children:"ElementType"}),(0,l.jsx)(t.td,{align:"left",children:"Popper"}),(0,l.jsx)(t.td,{align:"left",children:"The component used for the popover."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"PopperProps"}),(0,l.jsx)(t.td,{align:"left",children:"object"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsx)(t.td,{align:"left",children:"Props applied to the Popper component."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"TooltipArrowComponent"}),(0,l.jsx)(t.td,{align:"left",children:"ElementType"}),(0,l.jsx)(t.td,{align:"left",children:"TooltipArrow"}),(0,l.jsx)(t.td,{align:"left",children:"The component used for the tooltip arrow."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"TooltipArrowProps"}),(0,l.jsx)(t.td,{align:"left",children:"object"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsxs)(t.td,{align:"left",children:["Props applied to the ",(0,l.jsx)(t.code,{children:"TooltipArrow"})," component."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"TransitionComponent"}),(0,l.jsx)(t.td,{align:"left",children:"ElementType"}),(0,l.jsx)(t.td,{align:"left",children:"Grow"}),(0,l.jsx)(t.td,{align:"left",children:"The component used for the transition."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"TransitionProps"}),(0,l.jsx)(t.td,{align:"left",children:"object"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsxs)(t.td,{align:"left",children:["Props applied to the ",(0,l.jsx)(t.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"TransitionProps.appear"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"true"}),(0,l.jsx)(t.td,{align:"left"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"arrow"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"true"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", adds an arrow to the tooltip. Note: The arrow is not visible when ",(0,l.jsx)(t.code,{children:"followCursor"})," or ",(0,l.jsx)(t.code,{children:"nextToCursor"})," is enabled."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"children"}),(0,l.jsxs)(t.td,{align:"left",children:["ReactNode | ",(0,l.jsx)(t.code,{children:"(context) => ReactNode"})]}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsx)(t.td,{align:"left"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"closeOnClick"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"true"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", close the tooltip on click."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"closeOnEsc"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"true"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", close the tooltip when pressing the escape key."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"closeOnMouseDown"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"false"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", close the tooltip while the mouse is down."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"defaultIsOpen"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"false"}),(0,l.jsx)(t.td,{align:"left",children:"Whether the tooltip will be open by default."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"disabled"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", the tooltip will not display."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"enterDelay"}),(0,l.jsx)(t.td,{align:"left",children:"number"}),(0,l.jsx)(t.td,{align:"left",children:"100"}),(0,l.jsx)(t.td,{align:"left",children:"The delay in milliseconds before the tooltip appears."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"followCursor"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", the tooltip will follow the cursor."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"isOpen"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", show the tooltip."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"label"}),(0,l.jsx)(t.td,{align:"left",children:"string | ReactNode"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsx)(t.td,{align:"left",children:"If the tooltip label is a blank or empty string, the tooltip will not display."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"leaveDelay"}),(0,l.jsx)(t.td,{align:"left",children:"number"}),(0,l.jsx)(t.td,{align:"left",children:"0"}),(0,l.jsx)(t.td,{align:"left",children:"The delay in milliseconds before the tooltip disappears."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"nextToCursor"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"true"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", the tooltip will be positioned next to the cursor."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"offset"}),(0,l.jsx)(t.td,{align:"left",children:"[skidding, distance]"}),(0,l.jsx)(t.td,{align:"left",children:"[8, 12]"}),(0,l.jsx)(t.td,{align:"left",children:"The skidding and distance of the tooltip."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"onClose"}),(0,l.jsx)(t.td,{align:"left",children:"function"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsx)(t.td,{align:"left",children:"Callback fired when the tooltip is closed."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"onOpen"}),(0,l.jsx)(t.td,{align:"left",children:"function"}),(0,l.jsx)(t.td,{align:"left"}),(0,l.jsx)(t.td,{align:"left",children:"Callback fired when the tooltip is opened."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"placement"}),(0,l.jsx)(t.td,{align:"left",children:"PopperJS.Placement"}),(0,l.jsx)(t.td,{align:"left",children:"'bottom-end'"}),(0,l.jsx)(t.td,{align:"left",children:"Position the tooltip relative to the trigger element as well as surrounding elements. One of: 'top', 'bottom', 'right', 'left', 'top-start', 'top-end', 'bottom-start', 'bottom-end', 'right-start', 'right-end', 'left-start', 'left-end'"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{align:"left",children:"shouldWrapChildren"}),(0,l.jsx)(t.td,{align:"left",children:"boolean"}),(0,l.jsx)(t.td,{align:"left",children:"false"}),(0,l.jsxs)(t.td,{align:"left",children:["If ",(0,l.jsx)(t.code,{children:"true"}),", the tooltip will be wrapped in a ",(0,l.jsx)(t.code,{children:"Box"})," component. Otherwise, you have to ensure tooltip has only one child node."]})]})]})]})]})}var C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,o.ah)(),e.components).wrapper;return t?(0,l.jsx)(t,Object.assign({},e,{children:(0,l.jsx)(M,e)})):M(e)}},96699:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/overflow-tooltip",function(){return n(75073)}])},50397:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}}),n(2784);var l=n(75928),o=n(52903),i=(0,l.Z)((0,o.tZ)("path",{d:"M6 14h4c0 1.105-0.895 2-2 2s-2-0.895-2-2v0zM15 12c-1.237-1.248-2.001-2.967-2.001-4.863 0-0.048 0-0.096 0.001-0.144l-0 0.007v-1c0-0 0-0.001 0-0.001 0-2.407-1.701-4.417-3.967-4.893l-0.033-0.006s0-0.1 0-0.1c0-0.552-0.448-1-1-1s-1 0.448-1 1v0s0 0.070 0 0.1c-2.299 0.482-4 2.492-4 4.899 0 0 0 0.001 0 0.001v-0 1c0.001 0.041 0.001 0.089 0.001 0.137 0 1.897-0.764 3.615-2.002 4.864l0.001-0.001v1h14v-1z"}),"AlertIcon")},67622:function(e,t,n){"use strict";n.d(t,{Z:function(){return d}});var l=n(53860),o=n(2784),i=n(70758),r=n(91334),s=n(52903),a=["size"],c=(0,o.forwardRef)(function(e,t){var n=e.size,o=(0,l.Kd)(e,a),c=(0,r.w)({size:n});return(0,s.tZ)(i.Z,(0,l.Zj)((0,l.Zj)({as:"label",ref:t},c),o))});c.displayName="TextLabel";var d=c},53310:function(e,t,n){"use strict";n.d(t,{Z:function(){return p}});var l=n(53860),o=n(32502),i=n(2784),r=n(39108),s=n(59804),a=n(99870),c=n(52903),d=["children","nextToCursor","offset","placement"],h=(0,i.forwardRef)(function(e,t){var n=e.children,h=e.nextToCursor,p=e.offset,f=e.placement,u=(0,l.Kd)(e,d),x=(0,i.useRef)(),m=(0,i.useState)(),w=(0,l.ZQ)(m,2),j=w[0],g=w[1],T=(0,s.k)(),v=(0,i.useCallback)(function(e,t){if("width"!==t&&"height"!==t)return console.error("Invalid size property: ".concat(t,". Use 'width' or 'height'.")),!1;var n,l,o,i,r=e.style[t],s=null===(n=e.getClientRects())||void 0===n?void 0:null===(l=n[0])||void 0===l?void 0:l[t];e.style[t]="max-content";var a=null===(o=e.getClientRects())||void 0===o?void 0:null===(i=o[0])||void 0===i?void 0:i[t];return(e.style[t]=r,"width"===t)?s<a||e.scrollWidth>e.clientWidth:"height"===t&&(s<a||e.scrollHeight>e.clientHeight)},[]),b=(0,i.useCallback)(function(){return x.current},[]),O=(0,i.useCallback)(function(e){var t=e.currentTarget,n=v(t,"width"),l=v(t,"height");g(n||l)},[v]),y=(0,i.useCallback)(function(e){g(!1)},[]);return(0,o.Z)(b,"mouseenter",O),(0,o.Z)(b,"mouseleave",y),(0,c.tZ)(a.Z,(0,l.Zj)((0,l.Zj)((0,l.Zj)({ref:t},{disabled:!j,nextToCursor:j?void 0===h||h:void 0,offset:void 0===p?[8,12]:p,placement:void 0===f?"bottom-end":f}),u),{},{children:"function"==typeof n?n({ref:x,style:T}):(0,c.tZ)(r.Z,{ref:x,children:n})}))});h.displayName="OverflowTooltip";var p=h},39108:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var l=n(53860),o=n(2784),i=n(70758),r=n(59804),s=n(52903),a=(0,o.forwardRef)(function(e,t){var n=(0,r.k)();return(0,s.tZ)(i.Z,(0,l.Zj)((0,l.Zj)({ref:t},n),e))});a.displayName="Truncate";var c=a},59804:function(e,t,n){"use strict";n.d(t,{k:function(){return l}});var l=function(){return{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}}}},function(e){e.O(0,[978,2888,9774,179],function(){return e(e.s=96699)}),_N_E=e.O()}]);