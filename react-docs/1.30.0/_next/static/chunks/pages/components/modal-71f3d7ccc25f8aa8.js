(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4157],{11345:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return k}});var o=t(52322),l=t(45392),a=t(16959),r=t(67569),i=t(49427),s=t(2784);function c(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,l,a,r,i=[],s=!0,c=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(o=a.call(t)).done)&&(i.push(o.value),i.length!==n);s=!0);}catch(e){c=!0,l=e}finally{try{if(!s&&null!=t.return&&(r=t.return(),Object(r)!==r))return}finally{if(c)throw l}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return d(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var u=function(){var e=c((0,i.useToggle)(!1),2),n=e[0],t=e[1],o=c((0,i.useToggle)(!1),2),l=o[0],a=o[1];return s.createElement(s.Fragment,null,s.createElement(r.Button,{onClick:function(){return t(!0)}},"Launch modal"),s.createElement(r.Modal,{closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:n,onClose:function(){return t(!1)},size:"sm"},s.createElement(r.ModalOverlay,null),s.createElement(r.ModalContent,null,s.createElement(r.ModalHeader,null,"Modal"),s.createElement(r.ModalBody,null,"Modal body text goes here."),s.createElement(r.ModalFooter,{justifyContent:"space-between"},s.createElement(r.Button,{disabled:l,variant:"primary",onClick:function(){return a(!0)}},"Launch nested modal"),s.createElement(r.Box,null,s.createElement(r.Button,{onClick:function(){return t(!1)},minWidth:"20x"},"Close"))))),s.createElement(r.Modal,{closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:l,onClose:function(){return a(!1)},size:"xs"},s.createElement(r.ModalOverlay,null),s.createElement(r.ModalContent,null,s.createElement(r.ModalHeader,null,"Nested Modal"),s.createElement(r.ModalBody,null,"Modal body text goes here."),s.createElement(r.ModalFooter,{columnGap:"2x"},s.createElement(r.Button,{variant:"primary",onClick:function(){return a(!1)},minWidth:"20x"},"Yes"),s.createElement(r.Button,{onClick:function(){return a(!1)},minWidth:"20x"},"No")))))},x=t(28165),h=t(24231);function m(){return(m=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function p(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,l,a,r,i=[],s=!0,c=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(o=a.call(t)).done)&&(i.push(o.value),i.length!==n);s=!0);}catch(e){c=!0,l=e}finally{try{if(!s&&null!=t.return&&(r=t.return(),Object(r)!==r))return}finally{if(c)throw l}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return g(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return g(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var f=function(e){var n=p((0,r.useColorMode)(),1)[0],t=p((0,r.useColorStyle)({colorMode:n}),1)[0];return s.createElement(r.Box,m({backgroundColor:t.background.secondary,border:1,borderColor:t.divider,fontFamily:"mono",py:"3x",px:"3x",whiteSpace:"pre"},e))},b=function(e){return s.createElement(r.Box,m({mb:"4x"},e))},y=function(e){var n=p((0,s.useState)(e),2),t=n[0],o=n[1];return[t,function(e){return function(){return o(e)}}]},C="\n// import\nimport { Global } from '@emotion/react';\n\n// example\n<Modal>\n  <Global\n    styles={css`\n      body {\n        overflow: hidden;\n      }\n    `}\n  />\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n".trim(),T={name:"1sy9iaq",styles:"body{overflow:hidden;}"},M=function(){var e=(0,s.useRef)(),n=p((0,r.useColorMode)(),1)[0],t=p((0,r.useColorStyle)({colorMode:n}),1)[0],o=t.color.tertiary,l=p((0,i.useToggle)(!1),2),a=l[0],c=l[1],d=p(y("auto"),2),u=d[0],g=d[1],M=p(y("inside"),2),B=M[0],j=M[1],k=p(y("default"),2),v=k[0],E=k[1],S=p(y("default"),2),F=S[0],w=S[1],O=p((0,i.useToggle)(!0),2),L=O[0],I=O[1],G=p((0,i.useToggle)(!0),2),H=G[0],P=G[1],z=p((0,i.useToggle)(!0),2),N=z[0],V=z[1],A=p((0,i.useToggle)(!0),2),R=A[0],W=A[1],D=p((0,i.useToggle)(!0),2),Z=D[0],_=D[1],U=p((0,i.useToggle)(!0),2),$=U[0],K=U[1],Y=p((0,i.useToggle)(!0),2),q=Y[0],J=Y[1],X=p((0,i.useToggle)(!0),2),Q=X[0],ee=X[1],en=p((0,i.useToggle)(!0),2),et=en[0],eo=en[1],el=p((0,i.useToggle)(!0),2),ea=el[0],er=el[1],ei=p((0,i.useToggle)(!0),2),es=ei[0],ec=ei[1],ed=p((0,i.useToggle)(!0),2),eu=ed[0],ex=ed[1],eh={},em={};return"full"!==u&&("default"!==F&&(eh.py=F),"default"!==v&&(em["inside"===B?"height":"minHeight"]=v)),s.createElement(s.Fragment,null,s.createElement(r.Box,null,s.createElement(r.Tooltip,{label:"Click to launch modal",openOnFocus:!1},s.createElement(r.Button,{onClick:function(){return c(!0)}},"Launch modal"))),s.createElement(r.Divider,{my:"4x"}),s.createElement(r.Box,{mb:"4x"},s.createElement(r.Text,{fontSize:"lg",lineHeight:"lg"},"Modal props")),s.createElement(b,null,s.createElement(r.Box,{mb:"2x"},s.createElement(r.Tooltip,{placement:"right",label:s.createElement(s.Fragment,null,s.createElement(r.Text,{mb:"2x"},"Use the ",s.createElement(r.Code,null,"scrollBehavior")," prop to control how scrolling should behave:"),s.createElement(r.Box,{as:"ul",my:"2x"},s.createElement("li",null,"If set to ",s.createElement(r.Code,null,"inside"),", only the ",s.createElement(r.Code,null,"ModalBody")," will scroll."),s.createElement("li",null,"If set to ",s.createElement(r.Code,null,"outside"),", the entire ",s.createElement(r.Code,null,"ModalContent")," will scroll within the viewport.")))},s.createElement(r.TextLabel,{display:"inline-block"},s.createElement(r.Flex,{alignItems:"center",columnGap:"2x"},"scrollBehavior",s.createElement(r.Icon,{icon:"info-o"}))))),s.createElement(r.ButtonGroup,{variant:"secondary",css:(0,x.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["inside","outside"].map(function(e){return s.createElement(r.Button,{key:e,selected:e===B,onClick:j(e),minWidth:"15x"},e)}))),s.createElement(b,null,s.createElement(r.Box,{mb:"2x"},s.createElement(r.TextLabel,null,"size")),s.createElement(r.ButtonGroup,{variant:"secondary",css:(0,x.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["auto","xs","sm","md","lg","xl","full"].map(function(e){return s.createElement(r.Button,{key:e,selected:e===u,onClick:g(e),minWidth:"15x"},e)}))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:L,disabled:!R,onChange:function(){return I()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"autoFocus"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:H,disabled:!Z&&!N,onChange:function(){return P()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"closeOnEsc"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:N,disabled:!Z&&!H,onChange:function(){return V()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"closeOnOutsideClick"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:R,onChange:function(){return W()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"ensureFocus"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:Z,disabled:!H&&!N,onChange:function(){return _()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"isClosable"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:$,disabled:!R,onChange:function(){return K()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"returnFocusOnClose"))),s.createElement(r.Divider,{my:"4x"}),s.createElement(r.Box,{mb:"4x"},s.createElement(r.Text,{fontSize:"lg",lineHeight:"lg"},"Modal style props")),s.createElement(b,null,s.createElement(r.Box,{mb:"2x"},s.createElement(r.TextLabel,null,"Initial content height")),s.createElement(r.ButtonGroup,{variant:"secondary",css:(0,x.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["default","stretch"].map(function(e){return s.createElement(r.Button,{disabled:"full"===u,key:e,selected:e===v,onClick:E(e),minWidth:"15x"},e)}))),s.createElement(b,null,s.createElement(r.Box,{mb:"2x"},s.createElement(r.TextLabel,null,"Vertical padding")),s.createElement(r.ButtonGroup,{variant:"secondary",css:(0,x.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["default","3rem"].map(function(e){return s.createElement(r.Button,{disabled:"full"===u,key:e,selected:e===F,onClick:w(e),minWidth:"15x"},e)}))),s.createElement(b,null,s.createElement(r.Box,{mb:"2x"},s.createElement(r.TextLabel,null,"Pass below props to ModalContent for settings initial height and vertical margins. Note that the props are different when ",s.createElement(r.Code,null,"scrollBehavior")," changes.")),s.createElement(f,null,"const modalStyleProps = ".concat(JSON.stringify(eh,null,2),";\nconst modalContentStyleProps = ").concat(JSON.stringify(em,null,2),';\n\n// example\n<Modal\n  scrollBehavior="').concat(B,'"\n  {...modalStyleProps}\n>\n  <ModalOverlay />\n  <ModalContent {...contentStyleProps}>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>'))),s.createElement(r.Divider,{my:"4x"}),s.createElement(r.Box,{mb:"4x"},s.createElement(r.Text,{fontSize:"lg",lineHeight:"lg"},"Modal composition")),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:q,onChange:function(){return J()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalOverlay"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:Q,onChange:function(){return ee()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalHeader"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:et,onChange:function(){return eo()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalBody"))),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center"},s.createElement(r.Checkbox,{checked:ea,onChange:function(){return er()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalFooter"))),s.createElement(r.Divider,{my:"4x"}),s.createElement(r.Box,{mb:"4x"},s.createElement(r.Text,{fontSize:"lg",lineHeight:"lg"},"Extra modal setup")),s.createElement(b,null,s.createElement(r.TextLabel,{display:"flex",alignItems:"center",mb:"3x"},s.createElement(r.Checkbox,{checked:eu,onChange:function(){return ex()}}),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Text,null,"Enable body scroll locking")),s.createElement(r.Box,{ml:"6x"},s.createElement(r.Box,{mb:"4x"},s.createElement(r.Text,{mb:"2x"},"When setting ",s.createElement(r.Code,null,'scrollBehavior="outside"')," to enable outside scrolling, you should also use ",s.createElement("strong",null,"Body Scroll Locking")," to prevent the user from scrolling the page while the modal is open."),s.createElement(r.Text,{mb:"2x"},s.createElement("strong",null,"Body Scroll Locking")," is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.")),s.createElement(f,null,C))),s.createElement(r.Modal,m({TransitionComponent:null,autoFocus:L,closeOnEsc:H,closeOnOutsideClick:N,ensureFocus:R,initialFocusRef:e,isClosable:Z,isOpen:a,onClose:function(){return c(!1)},returnFocusOnClose:$,scrollBehavior:B,size:u},eh),eu&&s.createElement(x.xB,{styles:T}),q&&s.createElement(r.ModalOverlay,null),s.createElement(r.ModalContent,em,Q&&s.createElement(r.ModalHeader,null,"auto"===u&&s.createElement(r.Text,null,"Auto-sized Modal"),"xs"===u&&s.createElement(r.Text,null,"Extra Small Modal"),"sm"===u&&s.createElement(r.Text,null,"Small Modal"),"md"===u&&s.createElement(r.Text,null,"Medium Modal"),"lg"===u&&s.createElement(r.Text,null,"Large Modal"),"xl"===u&&s.createElement(r.Text,null,"Extra Large Modal"),"full"===u&&s.createElement(r.Text,null,"Full-width Modal")),et&&s.createElement(r.ModalBody,null,es&&s.createElement(r.Alert,{variant:"outline",severity:"info",mb:"4x",isClosable:!0,onClose:function(){return ec()}},s.createElement(r.Text,null,"This is an info alert")),s.createElement(r.Tabs,null,s.createElement(r.TabList,{mb:"4x"},s.createElement(r.Tab,null,"Tab 1"),s.createElement(r.Tab,null,"Tab 2")),s.createElement(r.TabPanels,null,s.createElement(r.TabPanel,null,s.createElement(h.Z,{mb:"4x"}),s.createElement(r.Grid,{templateColumns:"auto 1fr",rowGap:"2x",columnGap:"3x",alignItems:"center",mb:"4x"},s.createElement(r.Icon,{icon:"user",color:o}),s.createElement(r.Input,{ref:e,placeholder:"User name"}),s.createElement(r.Icon,{icon:"email",color:o}),s.createElement(r.Input,{placeholder:"Email address"}))),s.createElement(r.TabPanel,null,s.createElement(r.Box,{backgroundColor:t.background.tertiary,minHeight:1e3,px:"3x",py:"2x"},s.createElement(r.Text,null,"This is a very long content that will overflow the modal")))))),ea&&s.createElement(r.ModalFooter,null,s.createElement(r.Grid,{templateColumns:"1fr 1fr",columnGap:"2x"},s.createElement(r.Button,{variant:"primary"},"OK"),s.createElement(r.Button,{onClick:function(){return c(!1)}},"Cancel"))))))},B=function(){return s.createElement(r.Stack,{direction:"column",spacing:"4x"},s.createElement(r.ModalContent,{width:480},s.createElement(r.ModalHeader,null,"Modal Title"),s.createElement(r.ModalBody,null,s.createElement(r.Alert,{variant:"outline",severity:"warning",mb:"4x"},s.createElement(r.Text,null,"This is a warning alert")),s.createElement(r.Text,{mb:"4x"},"Modal body text goes here."),s.createElement(h.Z,null)),s.createElement(r.ModalFooter,null,s.createElement(r.Button,{variant:"primary",minWidth:"20x"},"Save Changes"),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Button,{minWidth:"20x"},"Cancel"))),s.createElement(r.ModalContent,{width:480},s.createElement(r.ModalBody,null,s.createElement(r.Text,{mb:"4x"},"Modal body text goes here."),s.createElement(h.Z,null)),s.createElement(r.ModalFooter,null,s.createElement(r.Button,{variant:"primary",minWidth:"20x"},"Save Changes"),s.createElement(r.Space,{width:"2x"}),s.createElement(r.Button,{minWidth:"20x"},"Cancel"))),s.createElement(r.ModalContent,{width:480},s.createElement(r.ModalBody,null,s.createElement(r.Text,{mb:"4x"},"Modal body text goes here."),s.createElement(h.Z,null))),s.createElement(r.ModalContent,{width:480},s.createElement(r.Box,{px:"4x",py:"4x"},"You can create a custom modal with any sort of content.")))};function j(e){var n=Object.assign({div:"div",h1:"h1",p:"p",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),e.components);return(0,o.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n",(0,o.jsx)(n.h1,{id:"modal",children:"Modal"}),"\n",(0,o.jsx)(n.p,{children:"Modal dialogs are used to inform users about a task and can contain critical information, require decisions, or involve multiple tasks. Modal dialogs disable app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken."}),"\n",(0,o.jsxs)(n.h2,{id:"import",children:["Import",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalCloseButton,\n  useModal,\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"modal-components",children:["Modal components",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modal-components",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"Below is a static modal example, including modal header (optional), modal body (required when padding is necessary), and modal footer (optional)."}),"\n",(0,o.jsx)(n.p,{children:"You can also compose your modal components when customization is needed."}),"\n",(0,o.jsx)(a.Z,{component:B,file:{data:'import {\n  Alert,\n  Box,\n  Button,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Space,\n  Stack,\n  Text,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <ModalContent width={480}>\n        <ModalHeader>\n          Modal Title\n        </ModalHeader>\n        <ModalBody>\n          <Alert variant="outline" severity="warning" mb="4x">\n            <Text>This is a warning alert</Text>\n          </Alert>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n      </ModalContent>\n      <ModalContent width={480}>\n        <Box px="4x" py="4x">\n          You can create a custom modal with any sort of content.\n        </Box>\n      </ModalContent>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/modal/index.page.mdx"},sandbox:{files:{"src/components/SkeletonBlock.js":'import {\n  Flex,\n  Skeleton,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst SkeletonBlock = (props) => (\n  <Flex {...props}>\n    <Flex flex="none" mr="4x" alignItems="center">\n      <Skeleton variant="circle" width="10x" height="10x" />\n    </Flex>\n    <Flex flex="auto" flexDirection="column" rowGap="2x">\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </Flex>\n  </Flex>\n);\n\nexport default SkeletonBlock;'},raw:'import {\n  Alert,\n  Box,\n  Button,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Space,\n  Stack,\n  Text,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <ModalContent width={480}>\n        <ModalHeader>\n          Modal Title\n        </ModalHeader>\n        <ModalBody>\n          <Alert variant="outline" severity="warning" mb="4x">\n            <Text>This is a warning alert</Text>\n          </Alert>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n      </ModalContent>\n      <ModalContent width={480}>\n        <Box px="4x" py="4x">\n          You can create a custom modal with any sort of content.\n        </Box>\n      </ModalContent>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h2,{id:"usage",children:["Usage",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"Click the button below to toggle a modal. The modal will show up in the center of the screen."}),"\n",(0,o.jsx)(a.Z,{component:M,file:{data:'import { Global, css } from \'@emotion/react\';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Grid,\n  Icon,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Space,\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useToggle,\n} from \'@tonic-ui/react-hooks\';\nimport React, { useRef, useState } from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst bodyScrollLockCode = `\n// import\nimport { Global } from \'@emotion/react\';\n\n// example\n<Modal>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n`.trim();\n\nconst App = () => {\n  const initialFocusRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = colorStyle.color.tertiary;\n  const [isOpen, toggleModal] = useToggle(false);\n  const [size, changeSizeBy] = useSelection(\'auto\');\n  const [scrollBehavior, changeScrollBehaviorBy] = useSelection(\'inside\');\n  const [initialContentHeight, changeInitialContentHeightBy] = useSelection(\'default\');\n  const [verticalPadding, changeVerticalPaddingBy] = useSelection(\'default\');\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [isClosable, toggleIsCloseButtonVisible] = useToggle(true);\n  const [returnFocusOnClose, toggleReturnFocusOnClose] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n  const modalStyleProps = {};\n  const modalContentStyleProps = {};\n\n  if (size !== \'full\') {\n    if (verticalPadding !== \'default\') {\n      modalStyleProps.py = verticalPadding;\n    }\n\n    if (initialContentHeight !== \'default\') {\n      const propKey = (scrollBehavior === \'inside\') ? \'height\' : \'minHeight\';\n      modalContentStyleProps[propKey] = initialContentHeight;\n    }\n  }\n\n  return (\n    <>\n      <Box>\n        <Tooltip label="Click to launch modal" openOnFocus={false}>\n          <Button onClick={() => toggleModal(true)}>\n            Launch modal\n          </Button>\n        </Tooltip>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <Tooltip\n            placement="right"\n            label={(\n              <>\n                <Text mb="2x">\n                  Use the <Code>scrollBehavior</Code> prop to control how scrolling should behave:\n                </Text>\n                <Box as="ul" my="2x">\n                  <li>If set to <Code>inside</Code>, only the <Code>ModalBody</Code> will scroll.</li>\n                  <li>If set to <Code>outside</Code>, the entire <Code>ModalContent</Code> will scroll within the viewport.</li>\n                </Box>\n              </>\n            )}\n          >\n            <TextLabel display="inline-block">\n              <Flex alignItems="center" columnGap="2x">\n                scrollBehavior\n                <Icon icon="info-o" />\n              </Flex>\n            </TextLabel>\n          </Tooltip>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'inside\', \'outside\'].map(value => (\n            <Button\n              key={value}\n              selected={value === scrollBehavior}\n              onClick={changeScrollBehaviorBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'xs\', \'sm\', \'md\', \'lg\', \'xl\', \'full\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={() => toggleAutoFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={() => toggleCloseOnEsc()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={!isClosable && !closeOnEsc}\n            onChange={() => toggleCloseOnOutsideClick()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={() => toggleEnsureFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={() => toggleIsCloseButtonVisible()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={returnFocusOnClose}\n            disabled={!ensureFocus}\n            onChange={() => toggleReturnFocusOnClose()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">returnFocusOnClose</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal style props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Initial content height\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'stretch\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === initialContentHeight}\n              onClick={changeInitialContentHeightBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Vertical padding\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'3rem\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === verticalPadding}\n              onClick={changeVerticalPaddingBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Pass below props to ModalContent for settings initial height and vertical margins. Note that the props are different when <Code>scrollBehavior</Code> changes.\n          </TextLabel>\n        </Box>\n        <CodeBlock>\n          {`const modalStyleProps = ${JSON.stringify(modalStyleProps, null, 2)};\\nconst modalContentStyleProps = ${JSON.stringify(modalContentStyleProps, null, 2)};\\n\\n// example\\n<Modal\\n  scrollBehavior="${scrollBehavior}"\\n  {...modalStyleProps}\\n>\\n  <ModalOverlay />\\n  <ModalContent {...contentStyleProps}>\\n    <ModalHeader />\\n    <ModalBody />\\n    <ModalFooter />\\n  </ModalContent>\\n</Modal>`}\n        </CodeBlock>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isOverlayVisible} onChange={() => toggleIsOverlayVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={() => toggleIsHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={() => toggleIsBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={() => toggleIsFooterVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra modal setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              When setting <Code>{\'scrollBehavior="outside"\'}</Code> to enable outside scrolling, you should also use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the modal is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <CodeBlock>\n            {bodyScrollLockCode}\n          </CodeBlock>\n        </Box>\n      </FormGroup>\n      <Modal\n        TransitionComponent={null}\n        autoFocus={autoFocus}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        ensureFocus={ensureFocus}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        returnFocusOnClose={returnFocusOnClose}\n        scrollBehavior={scrollBehavior}\n        size={size}\n        {...modalStyleProps}\n      >\n        {enableBodyScrollLock && (\n          <Global\n            styles={css`\n              body {\n                overflow: hidden;\n              }\n            `}\n          />\n        )}\n        {isOverlayVisible && (\n          <ModalOverlay />\n        )}\n        <ModalContent\n          {...modalContentStyleProps}\n        >\n          {isHeaderVisible && (\n            <ModalHeader>\n              {size === \'auto\' && <Text>Auto-sized Modal</Text>}\n              {size === \'xs\' && <Text>Extra Small Modal</Text>}\n              {size === \'sm\' && <Text>Small Modal</Text>}\n              {size === \'md\' && <Text>Medium Modal</Text>}\n              {size === \'lg\' && <Text>Large Modal</Text>}\n              {size === \'xl\' && <Text>Extra Large Modal</Text>}\n              {size === \'full\' && <Text>Full-width Modal</Text>}\n            </ModalHeader>\n          )}\n          {isBodyVisible && (\n            <ModalBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Tabs>\n                <TabList mb="4x">\n                  <Tab>Tab 1</Tab>\n                  <Tab>Tab 2</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <SkeletonBlock mb="4x" />\n                    <Grid\n                      templateColumns="auto 1fr"\n                      rowGap="2x"\n                      columnGap="3x"\n                      alignItems="center"\n                      mb="4x"\n                    >\n                      <Icon icon="user" color={iconColor} />\n                      <Input ref={initialFocusRef} placeholder="User name" />\n                      <Icon icon="email" color={iconColor} />\n                      <Input placeholder="Email address" />\n                    </Grid>\n                  </TabPanel>\n                  <TabPanel>\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the modal\n                      </Text>\n                    </Box>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </ModalBody>\n          )}\n          {isFooterVisible && (\n            <ModalFooter>\n              <Grid\n                templateColumns="1fr 1fr"\n                columnGap="2x"\n              >\n                <Button variant="primary">\n                  OK\n                </Button>\n                <Button onClick={() => toggleModal(false)}>\n                  Cancel\n                </Button>\n              </Grid>\n            </ModalFooter>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/modal/index.page.mdx"},sandbox:{files:{"src/components/SkeletonBlock.js":'import {\n  Flex,\n  Skeleton,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst SkeletonBlock = (props) => (\n  <Flex {...props}>\n    <Flex flex="none" mr="4x" alignItems="center">\n      <Skeleton variant="circle" width="10x" height="10x" />\n    </Flex>\n    <Flex flex="auto" flexDirection="column" rowGap="2x">\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </Flex>\n  </Flex>\n);\n\nexport default SkeletonBlock;'},raw:'import { Global, css } from \'@emotion/react\';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Grid,\n  Icon,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Space,\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useToggle,\n} from \'@tonic-ui/react-hooks\';\nimport React, { useRef, useState } from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst bodyScrollLockCode = `\n// import\nimport { Global } from \'@emotion/react\';\n\n// example\n<Modal>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n`.trim();\n\nconst App = () => {\n  const initialFocusRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = colorStyle.color.tertiary;\n  const [isOpen, toggleModal] = useToggle(false);\n  const [size, changeSizeBy] = useSelection(\'auto\');\n  const [scrollBehavior, changeScrollBehaviorBy] = useSelection(\'inside\');\n  const [initialContentHeight, changeInitialContentHeightBy] = useSelection(\'default\');\n  const [verticalPadding, changeVerticalPaddingBy] = useSelection(\'default\');\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [isClosable, toggleIsCloseButtonVisible] = useToggle(true);\n  const [returnFocusOnClose, toggleReturnFocusOnClose] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n  const modalStyleProps = {};\n  const modalContentStyleProps = {};\n\n  if (size !== \'full\') {\n    if (verticalPadding !== \'default\') {\n      modalStyleProps.py = verticalPadding;\n    }\n\n    if (initialContentHeight !== \'default\') {\n      const propKey = (scrollBehavior === \'inside\') ? \'height\' : \'minHeight\';\n      modalContentStyleProps[propKey] = initialContentHeight;\n    }\n  }\n\n  return (\n    <>\n      <Box>\n        <Tooltip label="Click to launch modal" openOnFocus={false}>\n          <Button onClick={() => toggleModal(true)}>\n            Launch modal\n          </Button>\n        </Tooltip>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <Tooltip\n            placement="right"\n            label={(\n              <>\n                <Text mb="2x">\n                  Use the <Code>scrollBehavior</Code> prop to control how scrolling should behave:\n                </Text>\n                <Box as="ul" my="2x">\n                  <li>If set to <Code>inside</Code>, only the <Code>ModalBody</Code> will scroll.</li>\n                  <li>If set to <Code>outside</Code>, the entire <Code>ModalContent</Code> will scroll within the viewport.</li>\n                </Box>\n              </>\n            )}\n          >\n            <TextLabel display="inline-block">\n              <Flex alignItems="center" columnGap="2x">\n                scrollBehavior\n                <Icon icon="info-o" />\n              </Flex>\n            </TextLabel>\n          </Tooltip>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'inside\', \'outside\'].map(value => (\n            <Button\n              key={value}\n              selected={value === scrollBehavior}\n              onClick={changeScrollBehaviorBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'xs\', \'sm\', \'md\', \'lg\', \'xl\', \'full\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={() => toggleAutoFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={() => toggleCloseOnEsc()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={!isClosable && !closeOnEsc}\n            onChange={() => toggleCloseOnOutsideClick()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={() => toggleEnsureFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={() => toggleIsCloseButtonVisible()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={returnFocusOnClose}\n            disabled={!ensureFocus}\n            onChange={() => toggleReturnFocusOnClose()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">returnFocusOnClose</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal style props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Initial content height\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'stretch\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === initialContentHeight}\n              onClick={changeInitialContentHeightBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Vertical padding\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'3rem\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === verticalPadding}\n              onClick={changeVerticalPaddingBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Pass below props to ModalContent for settings initial height and vertical margins. Note that the props are different when <Code>scrollBehavior</Code> changes.\n          </TextLabel>\n        </Box>\n        <CodeBlock>\n          {`const modalStyleProps = ${JSON.stringify(modalStyleProps, null, 2)};\\nconst modalContentStyleProps = ${JSON.stringify(modalContentStyleProps, null, 2)};\\n\\n// example\\n<Modal\\n  scrollBehavior="${scrollBehavior}"\\n  {...modalStyleProps}\\n>\\n  <ModalOverlay />\\n  <ModalContent {...contentStyleProps}>\\n    <ModalHeader />\\n    <ModalBody />\\n    <ModalFooter />\\n  </ModalContent>\\n</Modal>`}\n        </CodeBlock>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isOverlayVisible} onChange={() => toggleIsOverlayVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={() => toggleIsHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={() => toggleIsBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={() => toggleIsFooterVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra modal setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              When setting <Code>{\'scrollBehavior="outside"\'}</Code> to enable outside scrolling, you should also use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the modal is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <CodeBlock>\n            {bodyScrollLockCode}\n          </CodeBlock>\n        </Box>\n      </FormGroup>\n      <Modal\n        TransitionComponent={null}\n        autoFocus={autoFocus}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        ensureFocus={ensureFocus}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        returnFocusOnClose={returnFocusOnClose}\n        scrollBehavior={scrollBehavior}\n        size={size}\n        {...modalStyleProps}\n      >\n        {enableBodyScrollLock && (\n          <Global\n            styles={css`\n              body {\n                overflow: hidden;\n              }\n            `}\n          />\n        )}\n        {isOverlayVisible && (\n          <ModalOverlay />\n        )}\n        <ModalContent\n          {...modalContentStyleProps}\n        >\n          {isHeaderVisible && (\n            <ModalHeader>\n              {size === \'auto\' && <Text>Auto-sized Modal</Text>}\n              {size === \'xs\' && <Text>Extra Small Modal</Text>}\n              {size === \'sm\' && <Text>Small Modal</Text>}\n              {size === \'md\' && <Text>Medium Modal</Text>}\n              {size === \'lg\' && <Text>Large Modal</Text>}\n              {size === \'xl\' && <Text>Extra Large Modal</Text>}\n              {size === \'full\' && <Text>Full-width Modal</Text>}\n            </ModalHeader>\n          )}\n          {isBodyVisible && (\n            <ModalBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Tabs>\n                <TabList mb="4x">\n                  <Tab>Tab 1</Tab>\n                  <Tab>Tab 2</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <SkeletonBlock mb="4x" />\n                    <Grid\n                      templateColumns="auto 1fr"\n                      rowGap="2x"\n                      columnGap="3x"\n                      alignItems="center"\n                      mb="4x"\n                    >\n                      <Icon icon="user" color={iconColor} />\n                      <Input ref={initialFocusRef} placeholder="User name" />\n                      <Icon icon="email" color={iconColor} />\n                      <Input placeholder="Email address" />\n                    </Grid>\n                  </TabPanel>\n                  <TabPanel>\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the modal\n                      </Text>\n                    </Box>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </ModalBody>\n          )}\n          {isFooterVisible && (\n            <ModalFooter>\n              <Grid\n                templateColumns="1fr 1fr"\n                columnGap="2x"\n              >\n                <Button variant="primary">\n                  OK\n                </Button>\n                <Button onClick={() => toggleModal(false)}>\n                  Cancel\n                </Button>\n              </Grid>\n            </ModalFooter>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-close-a-modal",children:["How to close a modal",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-close-a-modal",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h4,{id:"using-the-isclosable-prop",children:["Using the ",(0,o.jsx)(n.code,{children:"isClosable"})," prop",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-the-isclosable-prop",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"isClosable"})," prop is used to make a modal closable by adding a close button to it. By default, the value of ",(0,o.jsx)(n.code,{children:"isClosable"})," is false. To make a modal closable, set ",(0,o.jsx)(n.code,{children:"isClosable"})," to true."]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"<Modal isOpen={isOpen} isClosable onClose={onClose}>\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"using-the-modalclosebutton-component",children:["Using the ",(0,o.jsx)(n.code,{children:"ModalCloseButton"})," component",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-the-modalclosebutton-component",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ModalCloseButton"})," component provides an easy way to add a close button to a modal. This button is specifically designed to handle closing the modal, so you don't need to write any additional code to handle it. If you use ",(0,o.jsx)(n.code,{children:"ModalCloseButton"}),", you can omit the ",(0,o.jsx)(n.code,{children:"isClosable"})," prop in the ",(0,o.jsx)(n.code,{children:"Modal"})," component."]}),"\n",(0,o.jsxs)(n.p,{children:["Besides the default functionality of the ",(0,o.jsx)(n.code,{children:"ModalCloseButton"}),", you can also pass additional props, such as ",(0,o.jsx)(n.code,{children:"data-test"})," or ",(0,o.jsx)(n.code,{children:"data-tracking"})," attributes, to the ",(0,o.jsx)(n.code,{children:"ModalCloseButton"})," component as needed."]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Modal isOpen={isOpen} onClose={onClose}>\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n    <ModalCloseButton data-test="modal-close-button" />\n  </ModalContent>\n</Modal>\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"nested-modals",children:["Nested modals",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#nested-modals",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"In some cases, you may need to open a modal that is positioned relative to its parent modal, especially when a confirmation is required."}),"\n",(0,o.jsx)(n.p,{children:"To achieve this, you can create a nested modal. A nested modal is simply a modal that is opened from within another modal. This way, the nested modal is positioned relative to its parent modal."}),"\n",(0,o.jsxs)(n.p,{children:["One way to implement a nested modal is to use the ",(0,o.jsx)(n.code,{children:"useToggle"})," hook to control modal visibility. This hook can be used to toggle the state of a modal between open and closed, allowing you to easily show and hide nested modals."]}),"\n",(0,o.jsx)(a.Z,{component:u,file:{data:'import {\n  Box,\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React from \'react\';\n\nconst App = () => {\n  const [isOpen, toggleModal] = useToggle(false);\n  const [isNestedOpen, toggleNestedModal] = useToggle(false);\n\n  return (\n    <>\n      <Button onClick={() => toggleModal(true)}>Launch modal</Button>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        size="sm"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter justifyContent="space-between">\n            <Button\n              disabled={isNestedOpen}\n              variant="primary"\n              onClick={() => toggleNestedModal(true)}\n            >\n              Launch nested modal\n            </Button>\n            <Box>\n              <Button onClick={() => toggleModal(false)} minWidth="20x">\n                Close\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isNestedOpen}\n        onClose={() => toggleNestedModal(false)}\n        size="xs"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Nested Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter columnGap="2x">\n            <Button variant="primary" onClick={() => toggleNestedModal(false)} minWidth="20x">\n              Yes\n            </Button>\n            <Button onClick={() => toggleNestedModal(false)} minWidth="20x">\n              No\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/modal/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Box,\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React from \'react\';\n\nconst App = () => {\n  const [isOpen, toggleModal] = useToggle(false);\n  const [isNestedOpen, toggleNestedModal] = useToggle(false);\n\n  return (\n    <>\n      <Button onClick={() => toggleModal(true)}>Launch modal</Button>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        size="sm"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter justifyContent="space-between">\n            <Button\n              disabled={isNestedOpen}\n              variant="primary"\n              onClick={() => toggleNestedModal(true)}\n            >\n              Launch nested modal\n            </Button>\n            <Box>\n              <Button onClick={() => toggleModal(false)} minWidth="20x">\n                Close\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isNestedOpen}\n        onClose={() => toggleNestedModal(false)}\n        size="xs"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Nested Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter columnGap="2x">\n            <Button variant="primary" onClick={() => toggleNestedModal(false)} minWidth="20x">\n              Yes\n            </Button>\n            <Button onClick={() => toggleNestedModal(false)} minWidth="20x">\n              No\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h2,{id:"props",children:["Props",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modal-1",children:["Modal",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modal-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"autoFocus"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", the modal will automatically set focus on the first focusable element inside the modal when it is opened.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"initialFocusRef"})," is not defined and ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,o.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"closeOnEsc"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", close the modal when the ",(0,o.jsx)(n.code,{children:"esc"})," key is pressed."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"closeOnOutsideClick"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", close the modal when click outside of the modal."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"ensureFocus"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", it ensures that the user's focus remains within the modal when it is open, preventing them from interacting with elements outside the modal."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"finalFocusRef"}),(0,o.jsx)(n.td,{align:"left",children:"RefObject"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["The ",(0,o.jsx)(n.code,{children:"ref"})," of the element that should receive focus when the modal closes.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"initialFocusRef"}),(0,o.jsx)(n.td,{align:"left",children:"RefObject"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["The ",(0,o.jsx)(n.code,{children:"ref"})," of the element that should receive focus when the modal opens.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"isClosable"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", a close button will appear on the right side."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"isOpen"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", the modal is shown."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onClose"}),(0,o.jsx)(n.td,{align:"left",children:"function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"Callback fired when the modal closes."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"returnFocusOnClose"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"true"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", the focus will be restored to the element that was focused on when the modal was initially opened.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"size"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsx)(n.td,{align:"left",children:"Change the size of the modal. One of: 'auto', 'xs', 'sm', 'md', 'lg', 'xl', 'full'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"scrollBehavior"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'inside'"}),(0,o.jsx)(n.td,{align:"left",children:"Control the scroll behavior of the modal if the content overflows. One of: 'inside', 'outside'"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"modaloverlay",children:["ModalOverlay",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modaloverlay",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,o.jsx)(n.td,{align:"left",children:"ElementType"}),(0,o.jsx)(n.td,{align:"left",children:"Fade"}),(0,o.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,o.jsx)(n.td,{align:"left",children:"object"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,o.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"true"}),(0,o.jsx)(n.td,{align:"left"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalcontent",children:["ModalContent",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalcontent",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,o.jsx)(n.td,{align:"left",children:"ElementType"}),(0,o.jsx)(n.td,{align:"left",children:"Fade"}),(0,o.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,o.jsx)(n.td,{align:"left",children:"object"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,o.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"true"}),(0,o.jsx)(n.td,{align:"left"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalheader",children:["ModalHeader",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalheader",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalbody",children:["ModalBody",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalbody",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalfooter",children:["ModalFooter",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalfooter",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalclosebutton",children:["ModalCloseButton",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalclosebutton",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]})]})}var k=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(j,e)})):j(e)}},16959:function(e,n,t){"use strict";t.d(n,{Z:function(){return C}});var o=t(67569),l=t(49427),a=t(5632),r=t(2784),i=t(65245),s=t(16245),c=t(76761),d=t(73205),u=t(98107),x=["size"];function h(){return(h=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var m=(0,r.forwardRef)(function(e,n){var t=e.size,l=function(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}(e,x);return r.createElement(o.SVGIcon,h({size:t,viewBox:"0 0 1024 1024"},l),r.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});m.displayName="CodeSandboxIcon";var p=t(44285);function g(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,l,a,r,i=[],s=!0,c=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(o=a.call(t)).done)&&(i.push(o.value),i.length!==n);s=!0);}catch(e){c=!0,l=e}finally{try{if(!s&&null!=t.return&&(r=t.return(),Object(r)!==r))return}finally{if(c)throw l}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return f(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return f(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var b={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},y=function(e){var n=e.component,t=e.file,x=e.sandbox,h=(0,a.useRouter)(),f=g((0,r.useReducer)(function(e){return!e},!1),2),y=f[0],C=f[1],T=g((0,o.useColorMode)(),1)[0],M={dark:c.y,light:c.q}[T],B=g((0,l.useToggle)(!1),2),j=B[0],k=B[1],v=(0,s.Z)(null==t?void 0:t.data),E=v.onCopy,S=v.hasCopied,F=(0,r.useCallback)(function(){E()},[E]),w=(0,r.useCallback)(function(){(0,d.b)(x)},[x]),O=(0,r.useCallback)(function(){C(),k(!1)},[C,k]);return r.createElement(i.nu,{code:null==t?void 0:t.data,disabled:!0,language:"jsx",theme:M},r.createElement(o.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[T],p:"4x"},r.createElement(o.Box,{fontSize:"sm",lineHeight:"sm"},r.createElement(r.Fragment,{key:y},r.createElement(n,null)))),r.createElement(o.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},r.createElement(p.Z,{"data-track":j?"CodeBlock|hide_source|".concat((0,u.Z)({path:h.pathname})):"CodeBlock|show_source|".concat((0,u.Z)({path:h.pathname})),onClick:k},r.createElement(o.Tooltip,{label:j?"Hide the source":"Show the source"},r.createElement(o.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),r.createElement(p.Z,{"data-track":"CodeBlock|copy_source|".concat((0,u.Z)({path:h.pathname})),onClick:F},r.createElement(o.Tooltip,{label:S?"Copied":"Copy the source"},r.createElement(o.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),r.createElement(p.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(h.pathname),onClick:w},r.createElement(o.Tooltip,{label:"Edit in CodeSandbox"},r.createElement(m,{size:{sm:"5x",md:"4x"}}))),r.createElement(p.Z,{"data-track":"CodeBlock|reset|".concat(h.pathname),onClick:O},r.createElement(o.Tooltip,{label:"Reset the demo"},r.createElement(o.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),r.createElement(o.Fade,{in:j},r.createElement(o.Collapse,{in:j,unmountOnExit:!0},r.createElement(i.uz,{style:b}))))};y.displayName="Demo";var C=y},24231:function(e,n,t){"use strict";var o=t(67569),l=t(2784);n.Z=function(e){return l.createElement(o.Flex,e,l.createElement(o.Flex,{flex:"none",mr:"4x",alignItems:"center"},l.createElement(o.Skeleton,{variant:"circle",width:"10x",height:"10x"})),l.createElement(o.Flex,{flex:"auto",flexDirection:"column",rowGap:"2x"},l.createElement(o.Skeleton,null),l.createElement(o.Skeleton,null),l.createElement(o.Skeleton,null)))}},40891:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/modal",function(){return t(11345)}])}},function(e){e.O(0,[2888,9774,179],function(){return e(e.s=40891)}),_N_E=e.O()}]);