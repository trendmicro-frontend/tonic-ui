(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3172],{24095:function(e,n,o){"use strict";o.r(n),o.d(n,{default:function(){return eZ}});var t=o(52322),l=o(45392),r=o(16959),d=o(67569),a=o(49427),i=o(5081),c=o(76635),s=o.n(c),u=o(2784),b=o(28846),h=o(52797),p=JSON.parse('[{"id":"1","label":"Node 1","children":[{"id":"1.1","label":"Node 2","children":[{"id":"1.1.1","label":"Node 3","children":[{"id":"1.1.1.1","label":"Node 4"}]},{"id":"1.1.2","label":"Node 5","children":[{"id":"1.1.2.1","label":"Node 6"}]},{"id":"1.1.3","label":"Node 7","children":[{"id":"1.1.3.1","label":"Node 8"},{"id":"1.1.3.2","label":"Node 9"},{"id":"1.1.3.3","label":"Node 10"}]},{"id":"1.1.4","label":"Node 11"},{"id":"1.1.5","label":"Node 12"}]},{"id":"1.2","label":"Node 13","children":[{"id":"1.2.1","label":"Node 14","children":[{"id":"1.2.1.1","label":"Node 15"}]}]},{"id":"1.3","label":"Node 16","children":[{"id":"1.3.1","label":"Node 17"},{"id":"1.3.2","label":"Node 18"},{"id":"1.3.3","label":"Node 19"},{"id":"1.3.4","label":"Node 20","children":[{"id":"1.3.4.1","label":"Node 21"},{"id":"1.3.4.2","label":"Node 22"},{"id":"1.3.4.3","label":"Node 23"}]},{"id":"1.3.5","label":"Node 24"}]},{"id":"1.4","label":"Node 25","children":[{"id":"1.4.1","label":"Node 26"},{"id":"1.4.2","label":"Node 27"},{"id":"1.4.3","label":"Node 28"}]}]},{"id":"2","label":"Node 29","children":[{"id":"2.1","label":"Node 30","children":[{"id":"2.1.1","label":"Node 31"},{"id":"2.1.2","label":"Node 32"},{"id":"2.1.3","label":"Node 33"}]},{"id":"2.2","label":"Node 34"},{"id":"2.3","label":"Node 35","children":[{"id":"2.3.1","label":"Node 36","children":[{"id":"2.3.1.1","label":"Node 37"},{"id":"2.3.1.2","label":"Node 38"}]}]},{"id":"2.4","label":"Node 39"}]},{"id":"3","label":"Node 40","children":[{"id":"3.1","label":"Node 41","children":[{"id":"3.1.1","label":"Node 42"},{"id":"3.1.2","label":"Node 43","children":[{"id":"3.1.2.1","label":"Node 44"},{"id":"3.1.2.2","label":"Node 45"},{"id":"3.1.2.3","label":"Node 46"},{"id":"3.1.2.4","label":"Node 47"}]},{"id":"3.1.3","label":"Node 48"}]},{"id":"3.2","label":"Node 49","children":[{"id":"3.2.1","label":"Node 50"},{"id":"3.2.2","label":"Node 51"}]},{"id":"3.3","label":"Node 52","children":[{"id":"3.3.1","label":"Node 53"},{"id":"3.3.2","label":"Node 54","children":[{"id":"3.3.2.1","label":"Node 55"}]}]},{"id":"3.4","label":"Node 56"},{"id":"3.5","label":"Node 57","children":[{"id":"3.5.1","label":"Node 58"},{"id":"3.5.2","label":"Node 59","children":[{"id":"3.5.2.1","label":"Node 60"},{"id":"3.5.2.2","label":"Node 61"}]}]}]},{"id":"4","label":"Node 62","children":[{"id":"4.1","label":"Node 63","children":[{"id":"4.1.1","label":"Node 64","children":[{"id":"4.1.1.1","label":"Node 65"},{"id":"4.1.1.2","label":"Node 66"}]},{"id":"4.1.2","label":"Node 67"},{"id":"4.1.3","label":"Node 68"},{"id":"4.1.4","label":"Node 69"}]}]},{"id":"5","label":"Node 70","children":[{"id":"5.1","label":"Node 71","children":[{"id":"5.1.1","label":"Node 72"},{"id":"5.1.2","label":"Node 73"},{"id":"5.1.3","label":"Node 74","children":[{"id":"5.1.3.1","label":"Node 75"}]},{"id":"5.1.4","label":"Node 76","children":[{"id":"5.1.4.1","label":"Node 77"},{"id":"5.1.4.2","label":"Node 78"}]}]},{"id":"5.2","label":"Node 79"},{"id":"5.3","label":"Node 80","children":[{"id":"5.3.1","label":"Node 81"}]},{"id":"5.4","label":"Node 82","children":[{"id":"5.4.1","label":"Node 83","children":[{"id":"5.4.1.1","label":"Node 84"}]},{"id":"5.4.2","label":"Node 85"}]},{"id":"5.5","label":"Node 86"}]},{"id":"6","label":"Node 87","children":[{"id":"6.1","label":"Node 88"},{"id":"6.2","label":"Node 89"},{"id":"6.3","label":"Node 90","children":[{"id":"6.3.1","label":"Node 91"},{"id":"6.3.2","label":"Node 92"},{"id":"6.3.3","label":"Node 93"}]},{"id":"6.4","label":"Node 94"}]},{"id":"7","label":"Node 95","children":[{"id":"7.1","label":"Node 96","children":[{"id":"7.1.1","label":"Node 97"},{"id":"7.1.2","label":"Node 98","children":[{"id":"7.1.2.1","label":"Node 99"},{"id":"7.1.2.2","label":"Node 100"}]}]}]}]'),f=function(){return JSON.parse(JSON.stringify(p))},m=function(e){var n=new Map;return!function e(o){(0,i.rY)(o).forEach(function(o){n.set(o.id,o),e(o.children)})}(e),n},g=function(e){var n=[];return!function e(o){(0,i.rY)(o).forEach(function(o){Array.isArray(o.children)&&o.children.length>0&&(n.push(o.id),e(o.children))})}(e),n},x=o(95412),N=o(73705),y=o(1582),I=o(6738),T=function(e){var n=e.children,o=e.condition,t=e.wrapper;return o?t(n):n},v=o(92843),S=o(84153);function C(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var w=function(e){var n,o=e.canDrag,t=e.children,l=e.item,r=e.type,d=function(e){if(Array.isArray(e))return e}(n=(0,v.c)({type:void 0===r?"dnd":r,item:l,canDrag:o,collect:function(e){return{isDragging:e.isDragging()}}}))||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{for(r=(o=o.call(e)).next;!(i=(t=r.call(o)).done)&&(a.push(t.value),3!==a.length);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(n,3)||function(e,n){if(e){if("string"==typeof e)return C(e,3);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return C(e,3)}}(n,3)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a=d[0],i=d[1],c=d[2];return(0,u.useEffect)(function(){c((0,S.r)(),{captureDraggingState:!0})},[c]),t({dragRef:i,isDragging:a.isDragging})};function E(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return k(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return k(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var j=function(e){var n=e.count,o=e.defaultPage,t=e.defaultRowsPerPage,l=e.onPageChange,r=e.onRowsPerPageChange,a=e.page,c=e.rowsPerPage,s=e.rowsPerPageOptions,b=void 0===s?[10,25,50,100]:s;e.showFirstButton,e.showLastButton;var h=E((0,d.useColorMode)(),1)[0],p=E((0,d.useColorStyle)({colorMode:h}),1)[0],f=null!=t?t:(0,i.rY)(b)[0],m=E((0,u.useState)(null!=a?a:void 0===o?1:o),2),g=m[0],x=m[1],N=E((0,u.useState)(null!=c?c:f),2),y=N[0],I=N[1];(0,u.useEffect)(function(){void 0!==a&&x(a)},[a]),(0,u.useEffect)(function(){void 0!==c&&I(c)},[c]);var T=(0,u.useCallback)(function(e){void 0!==a||x(e),"function"==typeof l&&l(e)},[a,l]),v=(0,u.useCallback)(function(e){void 0!==c||I(e),"function"==typeof r&&r(e)},[c,r]),S=Math.ceil(n/y),C=g>1,w=g<S;return u.createElement(d.Flex,{alignItems:"center",justifyContent:"flex-end",backgroundColor:p.background.secondary,px:"6x",py:"3x"},u.createElement(d.Text,{mr:"2x"},"Total: ",n),u.createElement(d.Divider,{orientation:"vertical",height:"6x"}),u.createElement(d.Menu,null,u.createElement(d.MenuButton,{variant:"ghost"},y," per page"),u.createElement(d.MenuList,{onClick:function(e){var n=(0,i.Nu)(e.target.value);n>0&&(T(1),v(n))},width:"100%"},b.map(function(e){return u.createElement(d.MenuItem,{key:e,value:e},e)}))),u.createElement(d.Divider,{orientation:"vertical",height:"6x"}),u.createElement(d.Space,{width:"2x"}),u.createElement(d.Input,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,i.Nu)(e.target.value);n<=1?T(1):n>=S?T(S):T(n)},value:g}),u.createElement(d.Space,{width:"2x"}),u.createElement(d.Text,null,"/"),u.createElement(d.Space,{width:"2x"}),u.createElement(d.Text,null,S),u.createElement(d.Space,{width:"2x"}),u.createElement(d.ButtonGroup,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},u.createElement(d.Button,{width:"8x",disabled:!C,onClick:function(e){T(g-1)}},u.createElement(d.Icon,{icon:"angle-left"})),u.createElement(d.Button,{width:"8x",disabled:!w,onClick:function(e){T(g+1)}},u.createElement(d.Icon,{icon:"angle-right"}))))};function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var O=["node","data"];function A(){return(A=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function R(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),o.push.apply(o,t)}return o}function P(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?R(Object(o),!0).forEach(function(n){var t,l;t=n,l=o[n],(t=function(e){var n=function(e,n){if("object"!==D(e)||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var t=o.call(e,n||"default");if("object"!==D(t))return t;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===D(n)?n:String(n)}(t))in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):R(Object(o)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))})}return e}function M(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||z(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function z(e,n){if(e){if("string"==typeof e)return B(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return B(e,n)}}function B(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var F=function e(n,o){var t=(e.canvas||(e.canvas=document.createElement("canvas"))).getContext("2d");return t.font=o,t.measureText(n).width||0},L=function(e){var n=e.node,o=e.data,t=function(e,n){if(null==e)return{};var o,t,l=function(e,n){if(null==e)return{};var o,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(l[o]=e[o]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],!(n.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}(e,O),l=M((0,d.useColorMode)(),1)[0],r=M((0,d.useColorStyle)({colorMode:l}),1)[0],a=(0,d.useTheme)(),c={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[l],b={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[l],h=n.label,p=M((0,u.useState)([{id:"endpoint",desc:!1}]),2),f=p[0],m=p[1],g=M((0,u.useState)({}),2),v=g[0],S=g[1],C=(0,u.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return u.createElement(d.Checkbox,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return u.createElement(d.Checkbox,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:40},{header:function(){return u.createElement(d.OverflowTooltip,{label:"Endpoint"},"Endpoint")},accessorKey:"endpoint",cell:function(e){var n=e.getValue;e.row;var o=n();return u.createElement(d.OverflowTooltip,{label:o},o)},size:"auto"},{header:function(){return u.createElement(d.OverflowTooltip,{label:"Detections"},"Detections")},accessorKey:"detections",cell:function(e){var n,o=(function(e){if(Array.isArray(e))return B(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||z(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length;return u.createElement(d.OverflowTooltip,{label:o},o)},size:"auto"},{header:function(){return u.createElement(d.OverflowTooltip,{label:"Last Seen"},"Last Seen")},accessorKey:"lastSeen",cell:function(e){var n=(0,e.getValue)().toISOString();return u.createElement(d.OverflowTooltip,{label:n},n)},size:"auto"}]},[]),E=(0,x.b7)({data:(0,i.rY)(o),columns:C,defaultColumn:{minSize:40},state:{rowSelection:v,sorting:f},enableRowSelection:!0,enableSorting:!0,enableSortingRemoval:!0,onRowSelectionChange:S,getCoreRowModel:(0,N.sC)(),getPaginationRowModel:(0,N.G_)(),getSortedRowModel:(0,N.tj)(),onSortingChange:function(e){m(e)}}),k=M((0,u.useState)(0),2),D=k[0],R=k[1];(0,u.useEffect)(function(){E.resetRowSelection(),E.resetPagination()},[o,E]),(0,u.useEffect)(function(){if(D){var e=[a.fontWeights.semibold,a.fontSizes.sm,a.fonts.base].join(" "),n=E.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(n){var o=n.id,t=n.columnDef,l=t.minSize,r=t.size;if("number"==typeof r)return{id:o,size:r};if("string"==typeof r&&r.endsWith("%")){var d="string"==typeof t.header?F(t.header,e):0;return{id:o,size:Math.max(D*parseFloat(r)/100,d+24,l)}}return{id:o,size:l}}),o=E.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(n){var o=n.id,t=n.columnDef,l=t.minSize;return{id:o,size:Math.max(("string"==typeof t.header?F(t.header,e):0)+24,l)}}),t=n.reduce(function(e,n){return e+n.size},0),l=o.reduce(function(e,n){return e+n.size},0),r=D-t-12;if(0===o.length&&r>0){var d=r/n.length;n.forEach(function(e){e.size=e.size+d}),r=0}o.length>0&&r>l&&o.forEach(function(e,n){e.size=Math.max(r/(o.length-n),e.size),r-=e.size});for(var i={},c=0;c<n.length;c++){var s=n[c];i[s.id]=s.size}for(var u=0;u<o.length;u++){var b=o[u];i[b.id]=b.size}E.setColumnSizing(i)}},[C,E,D,a]);var L=E.getCoreRowModel().rows.length;return u.createElement(d.Flex,A({flexDirection:"column"},t),u.createElement(d.Box,{flex:"none",px:"3x",py:"2x"},h),u.createElement(d.Box,{flex:"auto"},u.createElement(I.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;D!==n&&R(n)}},function(e){var o=e.width;return u.createElement(d.Table,{layout:"flexbox",variant:"default",sx:{visibility:s().isEmpty(E.getState().columnSizing)?"hidden":"visible",height:452,width:o}},u.createElement(d.TableHeader,null,E.getHeaderGroups().map(function(e){return u.createElement(d.TableHeaderRow,{key:e.id},u.createElement(d.TableHeaderCell,{sx:{width:"2x",pl:"3x",pr:0}}),e.headers.map(function(e){var n,o=P({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return e.column.getCanSort()&&(o=P(P({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:c}})),e.column.getIsSorted()&&(o=P(P({},o),{},{color:r.color.emphasis})),u.createElement(d.TableHeaderCell,A({key:e.id,onClick:e.column.getToggleSortingHandler()},o),e.isPlaceholder?null:u.createElement(d.Flex,{alignItems:"center"},(0,x.ie)(e.column.columnDef.header,e.getContext()),null!==(n=({asc:u.createElement(d.Icon,{icon:"sort-up",size:20,ml:"1x"}),desc:u.createElement(d.Icon,{icon:"sort-down",size:20,ml:"1x"})})[e.column.getIsSorted()])&&void 0!==n?n:null))}))})),u.createElement(T,{condition:!0,wrapper:function(e){return u.createElement(d.TableScrollbar,{height:"100%",overflow:"visible"},e)}},u.createElement(d.TableBody,null,E.getRowModel().rows.map(function(e){return u.createElement(w,{key:e.id,item:function(){return{source:n.id,data:E.getSelectedRowModel().rows.map(function(e){return e.original.id})}}},function(n){var o=n.dragRef;n.isDragging;var t=e.getIsSelected();return u.createElement(d.TableRow,{"data-selected":(0,y.dataAttr)(e.getIsSelected()),sx:{position:"relative",_hover:{backgroundColor:c},_selected:{backgroundColor:b}}},u.createElement(d.TableCell,{ref:o,sx:{width:"2x",pl:"3x",pr:0,zIndex:t?1:void 0}},u.createElement(d.Image,{alt:"draggable",src:"/tonic-ui/react/v1/_next/static/media/icon-drag.9f20dd02.svg",sx:{cursor:"move",visibility:e.getIsSelected()?"visible":"hidden",width:"2x",height:"4x"}})),e.getVisibleCells().map(function(e){var n=P({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return u.createElement(d.TableCell,A({key:e.id},n),(0,x.ie)(e.column.columnDef.cell,e.getContext()))}))})}))),u.createElement(j,{count:L,onPageChange:function(e){var n=Math.max((0,i.q9)(e)-1,0);E.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,i.q9)(e),1);E.setPageSize(n)}}))})))},W=o(20103);function H(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var U=function(e){var n,o=e.accept,t=e.canDrop,l=e.children,r=e.onDrop,d=function(e){if(Array.isArray(e))return e}(n=(0,W.L)({accept:void 0===o?"dnd":o,drop:r,canDrop:t,collect:function(e){return{isOver:e.isOver()}}}))||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{for(r=(o=o.call(e)).next;!(i=(t=r.call(o)).done)&&(a.push(t.value),2!==a.length);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(n,2)||function(e,n){if(e){if("string"==typeof e)return H(e,2);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return H(e,2)}}(n,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a=d[0];return l({dropRef:d[1],isOver:a.isOver})};function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var _=["data","onNodeDrop","onNodeSelect"];function G(){return(G=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function $(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),o.push.apply(o,t)}return o}function V(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?$(Object(o),!0).forEach(function(n){var t,l;t=n,l=o[n],(t=function(e){var n=function(e,n){if("object"!==Y(e)||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var t=o.call(e,n||"default");if("object"!==Y(t))return t;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===Y(n)?n:String(n)}(t))in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):$(Object(o)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))})}return e}function X(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var Z=function e(n){var o,t=n.node,l=n.nodeDepth,r=void 0===l?0:l,a=n.onNodeDrop,c=(function(e){if(Array.isArray(e))return e}(o=(0,d.useColorStyle)())||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{for(r=(o=o.call(e)).next;!(i=(t=r.call(o)).done)&&(a.push(t.value),1!==a.length);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(o,1)||function(e,n){if(e){if("string"==typeof e)return X(e,1);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return X(e,1)}}(o,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],s=t.id,b=t.label,h=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected,l=o?"folder-open":"folder";return u.createElement(U,{onDrop:function(e,n){"function"==typeof a&&a(V(V({},e),{},{target:s}))}},function(e){var o=e.dropRef,a=e.isOver;return u.createElement(d.TreeItemContent,{ref:o,sx:{backgroundColor:a?c.background.highlighted:void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:c.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Icon,{icon:l,color:"yellow:50",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:b},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,G({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),b)}))})},[c,s,r,b,a]);return u.createElement(d.TreeItem,{nodeId:s,render:h},(0,i.rY)(t.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:r+1,onNodeDrop:a})}))},J=function(e){var n,o,t=e.data,l=e.onNodeDrop,r=e.onNodeSelect,a=function(e,n){if(null==e)return{};var o,t,l=function(e,n){if(null==e)return{};var o,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(l[o]=e[o]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],!(n.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}(e,_),c=null!==(n=null===(o=(0,i.rY)(t)[0])||void 0===o?void 0:o.id)&&void 0!==n?n:null,s=(0,u.useCallback)(function(e){"function"==typeof l&&l(e)},[l]),b=(0,u.useCallback)(function(e){"function"==typeof r&&r(e)},[r]);return u.createElement(d.Tree,G({"aria-label":"dnd",isSelectable:!0,isUnselectable:!1,defaultSelected:c,onNodeSelect:b},a),(0,i.rY)(t).map(function(e){return u.createElement(Z,{key:e.id,node:e,onNodeDrop:s})}))},K=o(98533),q=function(e){var n=e.children,o=(0,K.f)(function(e){return{isDragging:e.isDragging(),item:e.getItem(),itemType:e.getItemType(),initialSourceClientOffset:e.getInitialSourceClientOffset(),sourceClientOffset:e.getSourceClientOffset()}}),t=o.isDragging,l=o.initialSourceClientOffset,r=o.sourceClientOffset;if(!t||!l||!r)return null;var a=(0,i.Nu)(null==r?void 0:r.x),c=(0,i.Nu)(null==r?void 0:r.y);return u.createElement(d.Box,{sx:{pointerEvents:"none",position:"fixed",inset:0,zIndex:"fixed"}},u.createElement(d.Box,{style:{transform:"translate(".concat(a,"px, ").concat(c,"px)")}},"function"==typeof n?n(o):n))};function Q(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var ee=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,u.useState)())||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{for(r=(o=o.call(e)).next;!(i=(t=r.call(o)).done)&&(a.push(t.value),2!==a.length);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,2)||function(e,n){if(e){if("string"==typeof e)return Q(e,2);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return Q(e,2)}}(e,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[1];return(0,u.useCallback)(function(){n({})},[])};function en(e){return function(e){if(Array.isArray(e))return el(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||et(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||et(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function et(e,n){if(e){if("string"==typeof e)return el(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return el(e,n)}}function el(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var er=function(){var e=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],n=f();return!function n(o){(0,i.rY)(o).map(function(o){var t;o.parent=null!==(t=o.parent)&&void 0!==t?t:null,o.children=(0,i.rY)(o.children).map(function(e){return e.parent=o,e}),o.data={data:s().range(15).map(function(n){var t=eo((0,i.rY)(String(o.label).match(/\d+/)),1)[0],l="Endpoint ".concat(void 0===t?"":t,"_").concat(n+1),r=s().sampleSize(e,s().random(0,e.length)),d=new Date(Date.now()-s().random(0,2592e6));return{id:"".concat(o.id,"_").concat(n+1),endpoint:l,detections:r,lastSeen:d}})},n(o.children)})}(n),n},ed=function(){var e,n,o,t=(0,a.useConst)(function(){return er()}),l=(0,u.useMemo)(function(){return m(t)},[t]),r=ee(),c=eo((0,u.useState)(!1),2),p=c[0],f=c[1],g=eo((0,d.useColorMode)(),1)[0],x=eo((0,d.useColorStyle)(),1)[0],N={dark:"gray:50",light:"gray:50"}[g],y=(0,u.useRef)(),I=(0,u.useRef)(),T=eo((0,u.useState)(null===(e=(0,i.rY)(t)[0])||void 0===e?void 0:e.id),2),v=T[0],S=T[1],C=null===(n=l.get(v))||void 0===n?void 0:null===(o=n.data)||void 0===o?void 0:o.data,w=(0,u.useCallback)(function(e){var n=e.source,o=e.target,t=e.data,d=l.get(n),a=l.get(o),c=d.data.data.filter(function(e){return s().includes(t,e.id)});d.data.data=s().differenceBy(d.data.data,c,"id"),a.data.data=s().uniqBy([].concat(en((0,i.rY)(a.data.data)),en(c)),"id"),r()},[r,l]),E=(0,u.useCallback)(function(e){S(e[0])},[]);return u.createElement(b.W,{backend:h.PD},u.createElement(q,null,function(e){var n=e.item,o=(0,i.rY)(n.data).length;return u.createElement(d.Flex,{alignItems:"center",columnGap:"1x"},u.createElement(d.Icon,{icon:"file-arrow-o"}),u.createElement(d.Code,null,o))}),u.createElement(d.Flex,{ref:y,sx:{boxShadow:x.shadow.thick,cursor:p?"col-resize":"default"}},u.createElement(d.Box,{ref:I,sx:{flex:"none",width:300}},u.createElement(d.Scrollbar,{height:"100%",overflowX:"hidden",overflowY:"auto"},u.createElement(J,{data:t,onNodeDrop:w,onNodeSelect:E}))),u.createElement(d.Flex,{sx:{flex:"auto",position:"relative"}},u.createElement(d.ResizeHandle,{onResizeStart:function(){f(!0)},onResizeEnd:function(){f(!1)},onResize:function(e){var n=e.clientX,o=I.current;if(o){var t=y.current.getBoundingClientRect(),l=t.left,r=t.width;n-l>=160&&n-l<=.4*r&&(o.style.width="".concat(n-l,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:p?N:({dark:"gray:70",light:"gray:30"})[g],_hover:{borderLeftColor:N},zIndex:1}}),u.createElement(L,{key:v,node:l.get(v),data:C,width:"100%"}))))};function ea(){return(ea=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function ei(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ec(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ec(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ec(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var es=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=ei((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected;return u.createElement(d.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,ea({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:s},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},eu=function(){var e,n=ei((0,d.useColorMode)(),1)[0],o=ei((0,d.useColorStyle)(),1)[0],t=(0,a.useConst)(function(){return f()}),l=(0,u.useMemo)(function(){return m(t)},[t]),r=(0,u.useMemo)(function(){return g(t)},[t]),c=(0,u.useMemo)(function(){return Array.from(l.keys())},[l]),s=ei((0,u.useState)(c[0]),2),b=s[0],h=s[1],p=ei((0,u.useState)(!1),2),x=p[0],N=p[1],y=(0,u.useRef)(),I=(0,u.useRef)(),T={dark:"gray:50",light:"gray:50"}[n],v=(0,u.useCallback)(function(e){h(e[0])},[]);return u.createElement(d.Flex,{ref:y,sx:{boxShadow:o.shadow.thick,cursor:x?"col-resize":"default"}},u.createElement(d.Box,{ref:I,sx:{flex:"none",width:300}},u.createElement(d.Scrollbar,{height:240,overflowX:"hidden",overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"resizable",defaultExpanded:r,isSelectable:!0,isUnselectable:!1,selected:b,onNodeSelect:v},(0,i.rY)(t).map(function(e){return u.createElement(es,{key:e.id,node:e})})))),u.createElement(d.Flex,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},u.createElement(d.ResizeHandle,{onResizeStart:function(){N(!0)},onResizeEnd:function(){N(!1)},onResize:function(e){var n=e.clientX,o=I.current;if(o){var t=y.current.getBoundingClientRect(),l=t.left,r=t.width;n-l>=160&&n-l<=.4*r&&(o.style.width="".concat(n-l,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:x?T:({dark:"gray:70",light:"gray:30"})[n],_hover:{borderLeftColor:T}}}),u.createElement(d.Box,null,null===(e=l.get(b))||void 0===e?void 0:e.label)))};function eb(){return(eb=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function eh(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ep(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ep(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ep(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var ef=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=eh((0,d.useColorStyle)(),1)[0],a=(0,d.useTree)().getIsNodeExpanded,c=o.id,s=o.label,b=eh((0,u.useState)((0,i.rY)(o.children)),2),h=b[0],p=b[1],f=eh((0,u.useState)(!1),2),m=f[0],g=f[1],x=a(c),N=o.loadOnDemand&&0===h.length,y=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected;return e.select,u.createElement(d.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,m?u.createElement(d.Spinner,{size:"xs"}):u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:s},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eb({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),s)}))},[r,m,l,s]);return(0,u.useEffect)(function(){var e=null;return x&&N&&(g(!0),e=setTimeout(function(){var e=[{id:"".concat(c,".1"),label:"".concat(s,".1"),loadOnDemand:l<2},{id:"".concat(c,".2"),label:"".concat(s,".2")}];p(e),g(!1),o.children=e,o.loadOnDemand=!1},500)),function(){e&&clearTimeout(e)}},[x,N,o,c,s,l]),u.createElement(d.TreeItem,{nodeId:c,render:y},N?u.createElement(d.Box,{key:"stub"}):h.map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},em=function(){var e=eh((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return Array.from({length:5},function(e,n){var o=n+1;return{id:"".concat(o),label:"Node ".concat(o),children:[],loadOnDemand:!0}})});return u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"load on demand",isSelectable:!0,isUnselectable:!0},(0,i.rY)(n).map(function(e){return u.createElement(ef,{key:e.id,node:e})}))))};function eg(){return(eg=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function ex(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eN(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eN(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eN(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var ey=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=ex((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected;return u.createElement(d.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eg({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}),u.createElement(d.Flex,{flex:"none",ml:"2x"},u.createElement(d.Menu,null,u.createElement(d.MenuToggle,{onClick:function(e){},sx:{color:r.color.secondary,":hover":{color:r.color.info}}},u.createElement(d.Icon,{icon:"more"})),u.createElement(d.MenuList,{width:"max-content"},u.createElement(d.MenuItem,null,u.createElement(d.Flex,{alignItems:"center",columnGap:"2x"},u.createElement(d.Icon,{icon:"edit"})," List item")),u.createElement(d.MenuItem,null,u.createElement(d.Flex,{alignItems:"center",columnGap:"2x"},u.createElement(d.Icon,{icon:"edit"})," List item"))))))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:s},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},eI=function(){var e=ex((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return f()}),o=(0,u.useMemo)(function(){return g(n)},[n]);return u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"dropdown",defaultExpanded:o,isSelectable:!0,isUnselectable:!0},(0,i.rY)(n).map(function(e){return u.createElement(ey,{key:e.id,node:e})}))))};function eT(){return(eT=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function ev(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eS(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eS(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eS(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var eC=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=ev((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected,a=e.select;return u.createElement(d.TreeItemContent,{sx:{backgroundColor:t?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Flex,{onClick:function(e){e.stopPropagation()},mr:"2x"},u.createElement(d.Checkbox,{checked:t,onChange:function(){a()}})),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eT({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:s},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},ew=function(){var e=ev((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return f()}),o=(0,u.useMemo)(function(){return m(n)},[n]),t=(0,u.useMemo)(function(){return g(n)},[n]),l=(0,u.useMemo)(function(){return Array.from(o.keys())},[o]),r=ev((0,u.useState)([]),2),c=r[0],s=r[1],b=ev((0,u.useState)([]),2),h=b[0],p=b[1],x=(0,u.useCallback)(function(e){s(e)},[]),N=(0,u.useCallback)(function(e){p(e)},[]),y=(0,u.useCallback)(function(e){s(t)},[t]),I=(0,u.useCallback)(function(e){s([])},[]),T=(0,u.useCallback)(function(e){p(l)},[l]),v=(0,u.useCallback)(function(e){p([])},[]);return u.createElement(u.Fragment,null,u.createElement(d.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"4x"},u.createElement(d.Button,{variant:"secondary",disabled:c.length===t.length,onClick:y},"Expand all"),u.createElement(d.Button,{variant:"secondary",disabled:0===c.length,onClick:I},"Collapse all"),u.createElement(d.Button,{variant:"secondary",disabled:h.length===l.length,onClick:T},"Select all"),u.createElement(d.Button,{variant:"secondary",disabled:0===h.length,onClick:v},"Unselect all")),u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"controlled",isSelectable:!0,isUnselectable:!0,multiSelect:!0,expanded:c,selected:h,onNodeToggle:x,onNodeSelect:N},(0,i.rY)(n).map(function(e){return u.createElement(eC,{key:e.id,node:e})})))),u.createElement(d.Divider,{my:"4x"}),u.createElement(d.Stack,null,u.createElement(d.Flex,{alignItems:"flex-start",columnGap:"2x"},u.createElement(d.Text,{whiteSpace:"nowrap"},"Expanded nodes:"),u.createElement(d.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},c.map(function(e){var n;return u.createElement(d.Code,{key:e,whiteSpace:"nowrap"},null===(n=o.get(e))||void 0===n?void 0:n.label)}))),u.createElement(d.Flex,{alignItems:"flex-start",columnGap:"2x"},u.createElement(d.Text,{whiteSpace:"nowrap"},"Selected nodes:"),u.createElement(d.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},h.map(function(e){var n;return u.createElement(d.Code,{key:e,whiteSpace:"nowrap"},null===(n=o.get(e))||void 0===n?void 0:n.label)})))))};function eE(){return(eE=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function ek(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ej(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ej(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ej(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var eD=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=ek((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,d.useTree)().multiSelect,b=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected,a=e.select,i=e.selectRange,b=e.toggleSelection;return u.createElement(d.TreeItemContent,{sx:{backgroundColor:t?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}},onClick:function(e){e.preventDefault();var n=e.ctrlKey,o=e.metaKey,t=e.shiftKey;if(s&&t){i();return}if(s&&(n||o)){b();return}s?b():a()}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Flex,{mr:"2x"},u.createElement(d.Checkbox,{checked:t,onChange:function(e){e.preventDefault(),b()}})),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eE({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:b},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},eO=function(){var e=ek((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return f()}),o=(0,u.useMemo)(function(){return g(n)},[n]);return u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"multi-selection with checkboxes",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,i.rY)(n).map(function(e){return u.createElement(eD,{key:e.id,node:e})}))))};function eA(){return(eA=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function eR(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eP(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eP(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eP(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var eM=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=eR((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected,a=e.select;return u.createElement(d.TreeItemContent,{sx:{backgroundColor:t?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Flex,{onClick:function(e){e.stopPropagation()},mr:"2x"},u.createElement(d.Checkbox,{checked:t,onChange:function(){a()}})),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eA({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:s},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},ez=function(){var e=eR((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return f()}),o=(0,u.useMemo)(function(){return g(n)},[n]);return u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"multi-selection with checkboxes",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,i.rY)(n).map(function(e){return u.createElement(eM,{key:e.id,node:e})}))))};function eB(){return(eB=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function eF(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eL(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return eL(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eL(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var eW=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=eF((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected;return u.createElement(d.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eB({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:s},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},eH=function(){var e=eF((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return f()}),o=(0,u.useMemo)(function(){return g(n)},[n]);return u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"multi-selection",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,i.rY)(n).map(function(e){return u.createElement(eW,{key:e.id,node:e})}))))};function eU(){return(eU=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function eY(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return e_(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return e_(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e_(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var eG=function e(n){var o=n.node,t=n.nodeDepth,l=void 0===t?0:t,r=eY((0,d.useColorStyle)(),1)[0],a=o.id,c=o.label,s=(0,u.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected;return u.createElement(d.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*l-.5,width:1}}}},u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Icon,{icon:n?o?"folder-open":"folder":"server",color:n?"yellow:50":"currentColor",mr:"2x"}),u.createElement(d.OverflowTooltip,{label:c},function(e){var n=e.ref,o=e.style;return u.createElement(d.Box,eU({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),c)}))},[r,l,c]);return u.createElement(d.TreeItem,{nodeId:a,render:s},(0,i.rY)(o.children).map(function(n){return u.createElement(e,{key:n.id,node:n,nodeDepth:l+1})}))},e$=function(){var e=eY((0,d.useColorStyle)(),1)[0],n=(0,a.useConst)(function(){return f()}),o=(0,u.useMemo)(function(){return g(n)},[n]);return u.createElement(d.Box,{sx:{boxShadow:e.shadow.thick}},u.createElement(d.Scrollbar,{height:240,overflowY:"auto"},u.createElement(d.Tree,{"aria-label":"basic tree",defaultExpanded:o,isSelectable:!0,isUnselectable:!0},(0,i.rY)(n).map(function(e){return u.createElement(eG,{key:e.id,node:e})}))))},eV=function(){return u.createElement(d.Tree,{defaultExpanded:["1"]},u.createElement(d.TreeItem,{nodeId:"1",render:function(e){var n=e.isExpandable;return u.createElement(d.TreeItemContent,null,u.createElement(d.Flex,{flex:"none",width:"6x"},n&&u.createElement(d.TreeItemToggle,null,u.createElement(d.TreeItemToggleIcon,null))),u.createElement(d.Text,null,"Node 1"))}},u.createElement(d.TreeItem,{nodeId:"1.1",render:function(){return u.createElement(d.TreeItemContent,null,u.createElement(d.Flex,{flex:"none",width:"6x"}),u.createElement(d.Text,null,"Node 1.1"))}})),u.createElement(d.TreeItem,{nodeId:"2",render:function(){return u.createElement(d.TreeItemContent,null,u.createElement(d.Flex,{flex:"none",width:"6x"}),u.createElement(d.Text,null,"Node 2"))}}))};function eX(e){var n=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),e.components);return(0,t.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,t.jsx)(n.h1,{id:"tree",children:"Tree"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Tree"})," component allows you to present information in a hierarchical, nested list format. It is particularly useful for visualizing structures like files and folders in a file system, categories and items in a list, or any other kind of nested arrangement that requires exploration."]}),"\n",(0,t.jsxs)(n.h2,{id:"import",children:["Import",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  useTree,\n  useTreeItem,\n} from '@tonic-ui/react';\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"usage",children:["Usage",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.h3,{id:"basic-tree",children:["Basic tree",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["To render a tree, you'll need to use the ",(0,t.jsx)(n.code,{children:"Tree"})," component along with one or more ",(0,t.jsx)(n.code,{children:"TreeItem"})," components as its children. You can nest ",(0,t.jsx)(n.code,{children:"TreeItem"})," components to create a tree structure."]}),"\n",(0,t.jsx)(r.Z,{component:eV,file:{data:'import {\n  Flex,\n  Text,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <Tree defaultExpanded={[\'1\']}>\n      <TreeItem\n        nodeId="1"\n        render={({ isExpandable }) => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x">\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Text>Node 1</Text>\n          </TreeItemContent>\n        )}\n      >\n        <TreeItem\n          nodeId="1.1"\n          render={() => (\n            <TreeItemContent>\n              <Flex flex="none" width="6x" />\n              <Text>Node 1.1</Text>\n            </TreeItemContent>\n          )}\n        />\n      </TreeItem>\n      <TreeItem\n        nodeId="2"\n        render={() => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x" />\n            <Text>Node 2</Text>\n          </TreeItemContent>\n        )}\n      />\n    </Tree>\n  );\n};\n\nexport default App;',path:"pages/components/tree/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Flex,\n  Text,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <Tree defaultExpanded={[\'1\']}>\n      <TreeItem\n        nodeId="1"\n        render={({ isExpandable }) => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x">\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Text>Node 1</Text>\n          </TreeItemContent>\n        )}\n      >\n        <TreeItem\n          nodeId="1.1"\n          render={() => (\n            <TreeItemContent>\n              <Flex flex="none" width="6x" />\n              <Text>Node 1.1</Text>\n            </TreeItemContent>\n          )}\n        />\n      </TreeItem>\n      <TreeItem\n        nodeId="2"\n        render={() => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x" />\n            <Text>Node 2</Text>\n          </TreeItemContent>\n        )}\n      />\n    </Tree>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TreeItem"})," component requires two props: ",(0,t.jsx)(n.code,{children:"nodeId"})," and ",(0,t.jsx)(n.code,{children:"render"}),"."]}),"\n",(0,t.jsx)(n.pre,{disabled:!0,children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<TreeItem nodeId={nodeId} render={render} />\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"nodeId"})," prop accepts a string value that uniquely identifies the node. This prop is required for the tree to work properly."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"render"})," prop is a function that returns a React element. It receives an object with properties like ",(0,t.jsx)(n.code,{children:"nodeDepth"}),", ",(0,t.jsx)(n.code,{children:"nodeId"}),", ",(0,t.jsx)(n.code,{children:"isDisabled"}),", ",(0,t.jsx)(n.code,{children:"isExpandable"}),", ",(0,t.jsx)(n.code,{children:"isExpanded"}),", ",(0,t.jsx)(n.code,{children:"isFocused"}),", ",(0,t.jsx)(n.code,{children:"isSelected"}),", and various functions for interacting with the node."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In the render function, you can use the provided ",(0,t.jsx)(n.code,{children:"TreeItemContent"}),", ",(0,t.jsx)(n.code,{children:"TreeItemToggle"}),", and ",(0,t.jsx)(n.code,{children:"TreeItemToggleIcon"})," components to structure the content of the tree node."]}),"\n",(0,t.jsx)(n.p,{children:"Here is the recommended structure for rendering a tree node:"}),"\n",(0,t.jsx)(n.pre,{disabled:!0,children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function render({ isExpanded }) {\n  return (\n    <TreeItemContent>\n      <Flex flex="none" width="6x">\n        {isExpandable && (\n          <TreeItemToggle>\n            <TreeItemToggleIcon />\n          </TreeItemToggle>\n        )}\n      </Flex>\n      <OverflowTooltip label="Node label">\n        Node label\n      </OverflowTooltip>\n    </TreeItemContent>\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"selection",children:["Selection",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#selection",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["You can enable node selection and unselection by setting the ",(0,t.jsx)(n.code,{children:"isSelectable"})," and ",(0,t.jsx)(n.code,{children:"isUnselectable"})," props to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(r.Z,{component:e$,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n          </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"basic tree\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n          </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"basic tree\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"multi-selection",children:["Multi-selection",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["To enable the selection of multiple nodes, use the ",(0,t.jsx)(n.code,{children:"multiSelect"})," prop. You can use keyboard shortcuts for efficient navigation and selection."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use arrow keys to navigate between nodes."}),"\n",(0,t.jsxs)(n.li,{children:["Press the ",(0,t.jsx)(n.code,{children:"Space"})," key to toggle the selection of a node."]}),"\n",(0,t.jsxs)(n.li,{children:["Hold down ",(0,t.jsx)(n.code,{children:"Ctrl"})," and click to select/unselect nodes."]}),"\n",(0,t.jsxs)(n.li,{children:["Hold down ",(0,t.jsx)(n.code,{children:"Shift"})," and click to select a range of nodes."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"#accessibility",children:"Accessibility"})," section for more keyboard shortcuts."]}),"\n",(0,t.jsx)(r.Z,{component:eH,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsx)(n.p,{children:"For checkboxes used in multi-selection, consider enhancing accessibility by adjusting the background color when the checkbox is selected."}),"\n",(0,t.jsx)(n.pre,{disabled:!0,children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const render = ({ isExpanded, isSelected }) => {\n  return (\n    <TreeItemContent\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        backgroundColor: isSelected ? 'transparent' : undefined,\n      }}\n    >\n      {/* ... */}\n    </TreeItemContent>\n  );\n};\n"})}),"\n",(0,t.jsx)(r.Z,{component:ez,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.p,{children:["If you prefer to customize the selection behavior yourself, you can attach an ",(0,t.jsx)(n.code,{children:"onClick"})," event handler to ",(0,t.jsx)(n.code,{children:"TreeItemContent"})," as demonstrated below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"onClick={(event) => {\n  // Prevent default event handler to manage tree item selection\n  event.preventDefault();\n\n  const isCtrlPressed = event.ctrlKey;\n  const isMetaPressed = event.metaKey;\n  const isShiftPressed = event.shiftKey;\n\n  if (multiSelect && isShiftPressed) {\n    selectRange();\n    return;\n  }\n\n  if (multiSelect && (isCtrlPressed || isMetaPressed)) {\n    toggleSelection();\n    return;\n  }\n\n  if (multiSelect) {\n    toggleSelection();\n  } else {\n    select();\n  }\n}}\n"})}),"\n",(0,t.jsx)(r.Z,{component:eO,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const { multiSelect } = useTree();\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select, selectRange, toggleSelection }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n        onClick={(event) => {\n          // Prevent default event handler to manage tree item selection\n          event.preventDefault();\n\n          const isCtrlPressed = event.ctrlKey;\n          const isMetaPressed = event.metaKey;\n          const isShiftPressed = event.shiftKey;\n\n          if (multiSelect && isShiftPressed) {\n            selectRange();\n            return;\n          }\n\n          if (multiSelect && (isCtrlPressed || isMetaPressed)) {\n            toggleSelection();\n            return;\n          }\n\n          if (multiSelect) {\n            toggleSelection();\n          } else {\n            select();\n          }\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={event => {\n              // Prevent default event handler to manage tree item selection\n              event.preventDefault();\n\n              toggleSelection();\n            }}\n          />\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const { multiSelect } = useTree();\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select, selectRange, toggleSelection }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n        onClick={(event) => {\n          // Prevent default event handler to manage tree item selection\n          event.preventDefault();\n\n          const isCtrlPressed = event.ctrlKey;\n          const isMetaPressed = event.metaKey;\n          const isShiftPressed = event.shiftKey;\n\n          if (multiSelect && isShiftPressed) {\n            selectRange();\n            return;\n          }\n\n          if (multiSelect && (isCtrlPressed || isMetaPressed)) {\n            toggleSelection();\n            return;\n          }\n\n          if (multiSelect) {\n            toggleSelection();\n          } else {\n            select();\n          }\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={event => {\n              // Prevent default event handler to manage tree item selection\n              event.preventDefault();\n\n              toggleSelection();\n            }}\n          />\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"controlled",children:["Controlled",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(r.Z,{component:ew,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useConst,\n} from \'@tonic-ui/react-hooks\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? \'folder-open\' : \'folder\';\n      }\n      return \'server\';\n    })();\n    const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? \'transparent\' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          \':hover + [role="group"]\': {\n            position: \'relative\',\n            \'::before\': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: \'""\',\n              position: \'absolute\',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex="none"\n          width="6x"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr="2x"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr="2x" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex="auto"\n              fontWeight={isSelected ? \'semibold\' : \'normal\'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [expandedNodeIds, setExpandedNodeIds] = useState([]);\n  const [selectedNodeIds, setSelectedNodeIds] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodeIds(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodeIds(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodeIds(expandableNodeIds);\n  }, [expandableNodeIds]);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodeIds([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodeIds(allNodes);\n  }, [allNodes]);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodeIds([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          //minWidth: 160,\n          //maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <Tree\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expanded={expandedNodeIds}\n            selected={selectedNodeIds}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useConst,\n} from \'@tonic-ui/react-hooks\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree/utils\';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? \'folder-open\' : \'folder\';\n      }\n      return \'server\';\n    })();\n    const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? \'transparent\' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          \':hover + [role="group"]\': {\n            position: \'relative\',\n            \'::before\': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: \'""\',\n              position: \'absolute\',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex="none"\n          width="6x"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr="2x"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr="2x" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex="auto"\n              fontWeight={isSelected ? \'semibold\' : \'normal\'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [expandedNodeIds, setExpandedNodeIds] = useState([]);\n  const [selectedNodeIds, setSelectedNodeIds] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodeIds(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodeIds(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodeIds(expandableNodeIds);\n  }, [expandableNodeIds]);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodeIds([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodeIds(allNodes);\n  }, [allNodes]);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodeIds([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          //minWidth: 160,\n          //maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <Tree\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expanded={expandedNodeIds}\n            selected={selectedNodeIds}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"dropdown",children:["Dropdown",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#dropdown",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(r.Z,{component:eI,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n        <Flex\n          flex=\"none\"\n          ml=\"2x\"\n        >\n          <Menu>\n            <MenuToggle\n              onClick={(event) => {\n                // Uncomment the following line to prevent the tree node from being selected\n                //event.stopPropagation();\n              }}\n              sx={{\n                color: colorStyle.color.secondary,\n                ':hover': {\n                  color: colorStyle.color.info,\n                },\n              }}\n            >\n              <Icon icon=\"more\" />\n            </MenuToggle>\n            <MenuList\n              width=\"max-content\"\n            >\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <Icon icon=\"edit\" /> List item\n                </Flex>\n              </MenuItem>\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <Icon icon=\"edit\" /> List item\n                </Flex>\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </Flex>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"dropdown\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n        <Flex\n          flex=\"none\"\n          ml=\"2x\"\n        >\n          <Menu>\n            <MenuToggle\n              onClick={(event) => {\n                // Uncomment the following line to prevent the tree node from being selected\n                //event.stopPropagation();\n              }}\n              sx={{\n                color: colorStyle.color.secondary,\n                ':hover': {\n                  color: colorStyle.color.info,\n                },\n              }}\n            >\n              <Icon icon=\"more\" />\n            </MenuToggle>\n            <MenuList\n              width=\"max-content\"\n            >\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <Icon icon=\"edit\" /> List item\n                </Flex>\n              </MenuItem>\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <Icon icon=\"edit\" /> List item\n                </Flex>\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </Flex>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"dropdown\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"load-on-demand",children:["Load on demand",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#load-on-demand",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(r.Z,{component:em,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst buildLoadOnDemandTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      label: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTree();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, isLoading, nodeDepth, nodeLabel]);\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            label: `${nodeLabel}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            label: `${nodeLabel}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeLabel, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildLoadOnDemandTreeNodes(5));\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst buildLoadOnDemandTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      label: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTree();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, isLoading, nodeDepth, nodeLabel]);\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            label: `${nodeLabel}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            label: `${nodeLabel}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeLabel, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildLoadOnDemandTreeNodes(5));\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"resizable",children:["Resizable",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["You can resize the tree with a minimum width of ",(0,t.jsx)(n.code,{children:"160px"})," and a maximum width of ",(0,t.jsx)(n.code,{children:"40%"})," of the display area to match your design and layout requirements."]}),"\n",(0,t.jsx)(r.Z,{component:eu,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [selectedNodeId, setSelectedNodeId] = useState(allNodes[0]);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n\n  const handleSelect = useCallback((nodeIds) => {\n    const nodeId = nodeIds[0];\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <Tree\n            aria-label=\"resizable\"\n            defaultExpanded={expandableNodeIds}\n            isSelectable\n            isUnselectable={false}\n            selected={selectedNodeId}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodeId)?.label}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? 'folder-open' : 'folder';\n      }\n      return 'server';\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon icon={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [selectedNodeId, setSelectedNodeId] = useState(allNodes[0]);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n\n  const handleSelect = useCallback((nodeIds) => {\n    const nodeId = nodeIds[0];\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <Tree\n            aria-label=\"resizable\"\n            defaultExpanded={expandableNodeIds}\n            isSelectable\n            isUnselectable={false}\n            selected={selectedNodeId}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodeId)?.label}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"moving-items-via-drag-and-drop-dnd",children:["Moving items via Drag and Drop (DnD)",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#moving-items-via-drag-and-drop-dnd",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Select items and move them to a tree node using drag-and-drop (DnD) interaction."}),"\n",(0,t.jsx)(r.Z,{component:ed,file:{data:"import {\n  Box,\n  Code,\n  Flex,\n  Icon,\n  ResizeHandle,\n  Scrollbar,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n} from '../utils';\nimport TableView from './TableView';\nimport TreeView from './TreeView';\nimport DragLayer from './DragLayer';\nimport useRefresh from './useRefresh';\n\nconst getTreeNodes = () => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.label).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = buildTreeNodes();\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => getTreeNodes());\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, [refresh, treeMap]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DragLayer>\n        {({ item }) => {\n          // Drag layer is not rendered when nothing is being dragged\n          const movedItemCount = ensureArray(item.data).length;\n          return (\n            <Flex alignItems=\"center\" columnGap=\"1x\">\n              <Icon icon=\"file-arrow-o\" />\n              <Code>{movedItemCount}</Code>\n            </Flex>\n          );\n        }}\n      </DragLayer>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <TreeView\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <TableView\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree/dnd/TableView.js":"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  Image,\n  OverflowTooltip,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ConditionalWrapper from '@/pages/components/tree/dnd/ConditionalWrapper';\nimport Draggable from '@/pages/components/tree/dnd/Draggable';\nimport TablePagination from '@/pages/components/tree/dnd/TablePagination';\nimport iconDrag from '@/pages/components/tree/dnd/icon-drag.svg';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst Component = ({\n  node,\n  data,\n  ...rest\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const theme = useTheme();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const nodeLabel = node.label;\n\n  const [sorting, setSorting] = useState([\n    { id: 'endpoint', desc: false },\n  ]);\n\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 40,\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Endpoint\">\n          Endpoint\n        </OverflowTooltip>\n      ),\n      accessorKey: 'endpoint',\n      cell: ({ getValue, row }) => {\n        const value = getValue();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Detections\">\n          Detections\n        </OverflowTooltip>\n      ),\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        const value = detections.length;\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Last Seen\">\n          Last Seen\n        </OverflowTooltip>\n      ),\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        const value = getValue().toISOString();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n  ], []);\n\n  const table = useReactTable({\n    data: ensureArray(data),\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      rowSelection,\n      sorting,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval: true, // Enables/Disables the ability to remove sorting for the table\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    table.resetRowSelection();\n    table.resetPagination();\n  }, [data, table]);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n    const resizerWidth = 12; // Width of the resizer element between the tree and the table\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize - resizerWidth;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const isTableScrollingEnabled = layout !== 'table';\n  const totalCount = table.getCoreRowModel().rows.length;\n  const getTableHeight = () => {\n    if (isTableScrollingEnabled) {\n      const headerHeight = 36;\n      const cellHeight = 36;\n      const footerHeight = 56;\n      const rowsToDisplay = 10;\n      return (headerHeight + rowsToDisplay * cellHeight + footerHeight);\n    }\n    return 'auto';\n  };\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      {...rest}\n    >\n      <Box flex=\"none\" px=\"3x\" py=\"2x\">\n        {nodeLabel}\n      </Box>\n      <Box flex=\"auto\">\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              variant={variant}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n                height: getTableHeight(),\n                width,\n              }}\n            >\n              <TableHeader>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableHeaderRow\n                    key={headerGroup.id}\n                  >\n                    <TableHeaderCell\n                      sx={{\n                        width: '2x',\n                        pl: '3x',\n                        pr: 0,\n                      }}\n                    />\n                   {headerGroup.headers.map(header => {\n                      let styleProps = {\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        ...header.column.columnDef.style,\n                      };\n                      if (header.column.getCanSort()) {\n                        styleProps = {\n                          ...styleProps,\n                          cursor: 'pointer',\n                          userSelect: 'none',\n                          _hover: {\n                            backgroundColor: hoverBackgroundColor,\n                          },\n                        };\n                      }\n                      if (header.column.getIsSorted()) {\n                        styleProps = {\n                          ...styleProps,\n                          color: colorStyle.color.emphasis,\n                        };\n                      }\n\n                      return (\n                        <TableHeaderCell\n                          key={header.id}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...styleProps}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Flex alignItems=\"center\">\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                              {{\n                                asc: (<Icon icon=\"sort-up\" size={20}  ml=\"1x\" />),\n                                desc: (<Icon icon=\"sort-down\" size={20} ml=\"1x\" />),\n                              }[header.column.getIsSorted()] ?? null}\n                            </Flex>\n                          )}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <ConditionalWrapper\n                condition={isTableScrollingEnabled}\n                wrapper={children => (\n                  <TableScrollbar\n                    height=\"100%\"\n                    overflow=\"visible\" // Make the scrollbar visible\n                  >\n                    {children}\n                  </TableScrollbar>\n                )}\n              >\n                <TableBody>\n                  {table.getRowModel().rows.map(row => {\n                    return (\n                      <Draggable\n                        key={row.id}\n                        item={() => {\n                          const sourceNodeId = node.id;\n                          const selectedRows = table.getSelectedRowModel().rows;\n                          const rowIds = selectedRows.map(row => row.original.id);\n\n                          return {\n                            source: sourceNodeId,\n                            data: rowIds,\n                          };\n                        }}\n                      >\n                        {({ dragRef, isDragging }) => {\n                          const canDrag = row.getIsSelected();\n\n                          return (\n                            <TableRow\n                              data-selected={dataAttr(row.getIsSelected())}\n                              sx={{\n                                position: 'relative',\n                                _hover: {\n                                  backgroundColor: hoverBackgroundColor,\n                                },\n                                _selected: {\n                                  backgroundColor: selectedBackgroundColor,\n                                },\n                              }}\n                            >\n                              <TableCell\n                                ref={dragRef}\n                                sx={{\n                                  width: '2x',\n                                  pl: '3x',\n                                  pr: 0,\n                                  zIndex: canDrag ? 1 : undefined,\n                                }}\n                              >\n                                <Image\n                                  alt=\"draggable\"\n                                  src={iconDrag.src}\n                                  sx={{\n                                    cursor: 'move',\n                                    visibility: row.getIsSelected() ? 'visible' : 'hidden',\n                                    width: '2x',\n                                    height: '4x',\n                                  }}\n                                />\n                              </TableCell>\n                              {row.getVisibleCells().map(cell => {\n                                const styleProps = {\n                                  minWidth: cell.column.columnDef.minSize,\n                                  width: cell.column.getSize(),\n                                  ...cell.column.columnDef.style,\n                                };\n                                return (\n                                  <TableCell\n                                    key={cell.id}\n                                    {...styleProps}\n                                  >\n                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                                  </TableCell>\n                                );\n                              })}\n                            </TableRow>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n                </TableBody>\n              </ConditionalWrapper>\n              <TablePagination\n                count={totalCount}\n                onPageChange={(nextPage) => {\n                  const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n                  table.setPageIndex(pageIndex);\n                }}\n                onRowsPerPageChange={(nextRowsPerPage) => {\n                  const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n                  table.setPageSize(pageSize);\n                }}\n              />\n            </Table>\n          )}\n        </AutoSizer>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Component;","src/pages/components/tree/dnd/ConditionalWrapper.js":"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default ConditionalWrapper;","src/pages/components/tree/dnd/Draggable.js":"import { useEffect } from 'react';\nimport { useDrag } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nconst Draggable = ({\n  canDrag: canDragProp,\n  children,\n  item: itemProp,\n  type: typeProp = 'dnd',\n}) => {\n  const [collectedProps, dragRef, dragPreviewRef] = useDrag({\n    type: typeProp,\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  });\n\n  useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: true });\n  }, [dragPreviewRef]);\n\n  return children({\n    dragRef,\n    isDragging: collectedProps.isDragging,\n  });\n};\n\nexport default Draggable;","src/pages/components/tree/dnd/TablePagination.js":'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray, ensureFiniteNumber } from \'ensure-type\';\nimport React, { useCallback, useEffect, useState } from \'react\';\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === \'function\') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === \'function\') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureFiniteNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureFiniteNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems="center"\n      justifyContent="flex-end"\n      backgroundColor={colorStyle.background.secondary}\n      px="6x"\n      py="3x"\n    >\n      <Text mr="2x">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Menu>\n        <MenuButton variant="ghost">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width="100%"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Space width="2x" />\n      <Input\n        width="10x"\n        px={0}\n        textAlign="center"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width="2x" />\n      <Text>/</Text>\n      <Space width="2x" />\n      <Text>{totalPages}</Text>\n      <Space width="2x" />\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width="8x"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <Icon icon="angle-left" />\n        </Button>\n        <Button\n          width="8x"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <Icon icon="angle-right" />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nexport default TablePagination;',"src/pages/components/tree/dnd/icon-drag.svg":'<svg width="8" height="16" viewBox="0 0 8 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n<circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n<circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n<circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n</svg>',"src/pages/components/tree/dnd/TreeView.js":"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback } from 'react';\nimport Droppable from '@/pages/components/tree/dnd/Droppable';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n  onNodeDrop: onNodeDropProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = isExpanded ? 'folder-open' : 'folder';\n    const iconColor = 'yellow:50';\n\n    return (\n      <Droppable\n        onDrop={(item, monitor) => {\n          if (typeof onNodeDropProp === 'function') {\n            onNodeDropProp({\n              ...item,\n              target: nodeId,\n            });\n          }\n        }}\n      >\n        {({ dropRef, isOver }) => (\n          <TreeItemContent\n            ref={dropRef}\n            sx={{\n              backgroundColor: isOver ? colorStyle.background.highlighted : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={nodeLabel}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {nodeLabel}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        )}\n      </Droppable>\n    );\n  }, [colorStyle, nodeId, nodeDepth, nodeLabel, onNodeDropProp]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n          onNodeDrop={onNodeDropProp}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst TreeView = ({\n  data,\n  onNodeDrop: onNodeDropProp,\n  onNodeSelect: onNodeSelectProp,\n  ...rest\n}) => {\n  const defaultSelectedNodeId = ensureArray(data)[0]?.id ?? null;\n  const handleNodeDrop = useCallback((item) => {\n    if (typeof onNodeDropProp === 'function') {\n      onNodeDropProp(item);\n    }\n  }, [onNodeDropProp]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    if (typeof onNodeSelectProp === 'function') {\n      onNodeSelectProp(nodeIds);\n    }\n  }, [onNodeSelectProp]);\n\n  return (\n    <Tree\n      aria-label=\"dnd\"\n      isSelectable\n      isUnselectable={false}\n      defaultSelected={defaultSelectedNodeId}\n      onNodeSelect={handleNodeSelect}\n      {...rest}\n    >\n      {ensureArray(data).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          onNodeDrop={handleNodeDrop}\n        />\n      ))}\n    </Tree>\n  );\n};\n\nexport default TreeView;","src/pages/components/tree/dnd/Droppable.js":"import { useDrop } from 'react-dnd';\n\nconst Droppable = ({\n  accept: acceptProp = 'dnd',\n  canDrop: canDropProp,\n  children,\n  onDrop: onDropProp,\n}) => {\n  const [collectedProps, dropRef] = useDrop({\n    accept: acceptProp,\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    },\n  });\n\n  return children({\n    dropRef,\n    isOver: collectedProps.isOver,\n  });\n};\n\nexport default Droppable;","src/pages/components/tree/dnd/DragLayer.js":"import {\n  Box,\n} from '@tonic-ui/react';\nimport { ensureFiniteNumber } from 'ensure-type';\nimport React from 'react';\nimport { useDragLayer } from 'react-dnd';\n\nconst DragLayer = ({\n  children,\n}) => {\n  const context = useDragLayer((monitor) => ({\n    isDragging: monitor.isDragging(),\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialSourceClientOffset: monitor.getInitialSourceClientOffset(),\n    sourceClientOffset: monitor.getSourceClientOffset(),\n  }));\n\n  const { isDragging, initialSourceClientOffset, sourceClientOffset } = context;\n\n  if (!isDragging || !initialSourceClientOffset || !sourceClientOffset) {\n    return null;\n  }\n\n  const offsetX = ensureFiniteNumber(sourceClientOffset?.x);\n  const offsetY = ensureFiniteNumber(sourceClientOffset?.y);\n\n  return (\n    <Box\n      sx={{\n        pointerEvents: 'none',\n        position: 'fixed',\n        inset: 0,\n        zIndex: 'fixed',\n      }}\n    >\n      <Box\n        style={{\n          transform: `translate(${offsetX}px, ${offsetY}px)`,\n        }}\n      >\n        {typeof children === 'function' ? children(context) : children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default DragLayer;","src/pages/components/tree/dnd/useRefresh.js":"import { useCallback, useState } from 'react';\n\nconst useRefresh = () => {\n  const [, rerender] = useState();\n  return useCallback(() => {\n    rerender({});\n  }, []);\n};\n\nexport default useRefresh;"},raw:"import {\n  Box,\n  Code,\n  Flex,\n  Icon,\n  ResizeHandle,\n  Scrollbar,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n} from '@/pages/components/tree/utils';\nimport TableView from '@/pages/components/tree/dnd/TableView';\nimport TreeView from '@/pages/components/tree/dnd/TreeView';\nimport DragLayer from '@/pages/components/tree/dnd/DragLayer';\nimport useRefresh from '@/pages/components/tree/dnd/useRefresh';\n\nconst getTreeNodes = () => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.label).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = buildTreeNodes();\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => getTreeNodes());\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, [refresh, treeMap]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DragLayer>\n        {({ item }) => {\n          // Drag layer is not rendered when nothing is being dragged\n          const movedItemCount = ensureArray(item.data).length;\n          return (\n            <Flex alignItems=\"center\" columnGap=\"1x\">\n              <Icon icon=\"file-arrow-o\" />\n              <Code>{movedItemCount}</Code>\n            </Flex>\n          );\n        }}\n      </DragLayer>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <TreeView\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <TableView\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h2,{id:"accessibility",children:["Accessibility",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#accessibility",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Tree"})," component supports both keyboard and mouse navigation and selection."]}),"\n",(0,t.jsx)(n.p,{children:"Keyboard shortcuts include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use arrow keys to navigate."}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Enter"})," to toggle expansion or selection."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Space"})," to toggle selection."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Home"})," and ",(0,t.jsx)(n.code,{children:"End"})," to quickly navigate to the first or last node."]}),"\n",(0,t.jsxs)(n.li,{children:["Hold down ",(0,t.jsx)(n.code,{children:"Ctrl"})," and click to select/unselect nodes."]}),"\n",(0,t.jsxs)(n.li,{children:["Hold down ",(0,t.jsx)(n.code,{children:"Shift"})," and click to select a range of nodes."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Ctrl"})," + ",(0,t.jsx)(n.code,{children:"Shift"}),"+",(0,t.jsx)(n.code,{children:"Home"})," to select a range of nodes from the current node to the first node."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Ctrl"})," + ",(0,t.jsx)(n.code,{children:"Shift"}),"+",(0,t.jsx)(n.code,{children:"End"})," to select a range of nodes from the current node to the last node."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Ctrl"})," + ",(0,t.jsx)(n.code,{children:"a"})," to select all nodes."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"props",children:["Props",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.h3,{id:"tree-1",children:["Tree",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tree-1",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"defaultExpanded"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left",children:"[]"}),(0,t.jsx)(n.td,{align:"left",children:"An array of expanded node ids for initial state (uncontrolled)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"defaultSelected"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left",children:"[]"}),(0,t.jsx)(n.td,{align:"left",children:"An array of selected node ids for initial state (uncontrolled)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"expanded"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"An array of expanded node ids for controlled state."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"id"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["The ",(0,t.jsx)(n.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"isSelectable"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsx)(n.td,{align:"left",children:"Determines if the tree allows node selection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"isUnselectable"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsx)(n.td,{align:"left",children:"Determines if the tree allows node unselection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"multiSelect"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsxs)(n.td,{align:"left",children:["If true, ",(0,t.jsx)(n.code,{children:"ctrl"})," and ",(0,t.jsx)(n.code,{children:"shift"})," will trigger multiselect."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onNodeFocus"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(nodeId: string) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onNodeSelect"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(nodeIds: Array<string>) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"nodeIds"})," An array of selected node ids."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onNodeToggle"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(nodeIds: Array<string>) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"nodeIds"})," An array of expanded node ids."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"selected"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"An array of selected node ids for controlled state."})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"treeitem",children:["TreeItem",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitem",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,t.jsx)(n.td,{align:"left",children:"ElementType"}),(0,t.jsx)(n.td,{align:"left",children:"Collapse"}),(0,t.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,t.jsx)(n.td,{align:"left",children:"object"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,t.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"children"}),(0,t.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"The children of the tree item."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"disabled"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsx)(n.td,{align:"left",children:"Determines if the tree item is disabled."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"nodeId"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:[(0,t.jsx)(n.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"render"}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"(context: TreeItemContext) => ReactNode"})}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:[(0,t.jsx)(n.code,{children:"REQUIRED"})," A function to render the tree item content.",(0,t.jsx)("br",{}),(0,t.jsxs)("pre",{children:["type TreeItemContext = ","{",(0,t.jsx)("br",{}),"  nodeDepth: number;",(0,t.jsx)("br",{}),"  nodeId: string;",(0,t.jsx)("br",{}),"  isDisabled: boolean;",(0,t.jsx)("br",{}),"  isExpandable: boolean;",(0,t.jsx)("br",{}),"  isExpanded: boolean;",(0,t.jsx)("br",{}),"  isFocused: boolean;",(0,t.jsx)("br",{}),"  isSelected: boolean;",(0,t.jsx)("br",{}),"  select: () => void;",(0,t.jsx)("br",{}),"  selectRange: () => void;",(0,t.jsx)("br",{}),"  toggleExpansion: () => void;",(0,t.jsx)("br",{}),"  toggleSelection: () => void;",(0,t.jsx)("br",{}),"};"]})]})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"treeitemcontent",children:["TreeItemContent",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitemcontent",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"children"}),(0,t.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"Content of the tree item."})]})})]})]})}var eZ=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(eX,e)})):eX(e)}},16959:function(e,n,o){"use strict";o.d(n,{Z:function(){return y}});var t=o(67569),l=o(49427),r=o(5632),d=o(2784),a=o(65245),i=o(16245),c=o(76761),s=o(73205),u=o(98107),b=["size"];function h(){return(h=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}var p=(0,d.forwardRef)(function(e,n){var o=e.size,l=function(e,n){if(null==e)return{};var o,t,l=function(e,n){if(null==e)return{};var o,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(l[o]=e[o]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],!(n.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}(e,b);return d.createElement(t.SVGIcon,h({size:o,viewBox:"0 0 1024 1024"},l),d.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});p.displayName="CodeSandboxIcon";var f=o(44285);function m(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,l,r,d,a=[],i=!0,c=!1;try{if(r=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=r.call(o)).done)&&(a.push(t.value),a.length!==n);i=!0);}catch(e){c=!0,l=e}finally{try{if(!i&&null!=o.return&&(d=o.return(),Object(d)!==d))return}finally{if(c)throw l}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return g(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return g(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var x={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},N=function(e){var n=e.component,o=e.file,b=e.sandbox,h=(0,r.useRouter)(),g=m((0,d.useReducer)(function(e){return!e},!1),2),N=g[0],y=g[1],I=m((0,t.useColorMode)(),1)[0],T={dark:c.y,light:c.q}[I],v=m((0,l.useToggle)(!1),2),S=v[0],C=v[1],w=(0,i.Z)(null==o?void 0:o.data),E=w.onCopy,k=w.hasCopied,j=(0,d.useCallback)(function(){E()},[E]),D=(0,d.useCallback)(function(){(0,s.b)(b)},[b]),O=(0,d.useCallback)(function(){y(),C(!1)},[y,C]);return d.createElement(a.nu,{code:null==o?void 0:o.data,disabled:!0,language:"jsx",theme:T},d.createElement(t.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[I],p:"4x"},d.createElement(t.Box,{fontSize:"sm",lineHeight:"sm"},d.createElement(d.Fragment,{key:N},d.createElement(n,null)))),d.createElement(t.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},d.createElement(f.Z,{"data-track":S?"CodeBlock|hide_source|".concat((0,u.Z)({path:h.pathname})):"CodeBlock|show_source|".concat((0,u.Z)({path:h.pathname})),onClick:C},d.createElement(t.Tooltip,{label:S?"Hide the source":"Show the source"},d.createElement(t.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),d.createElement(f.Z,{"data-track":"CodeBlock|copy_source|".concat((0,u.Z)({path:h.pathname})),onClick:j},d.createElement(t.Tooltip,{label:k?"Copied":"Copy the source"},d.createElement(t.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),d.createElement(f.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(h.pathname),onClick:D},d.createElement(t.Tooltip,{label:"Edit in CodeSandbox"},d.createElement(p,{size:{sm:"5x",md:"4x"}}))),d.createElement(f.Z,{"data-track":"CodeBlock|reset|".concat(h.pathname),onClick:O},d.createElement(t.Tooltip,{label:"Reset the demo"},d.createElement(t.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),d.createElement(t.Fade,{in:S},d.createElement(t.Collapse,{in:S,unmountOnExit:!0},d.createElement(a.uz,{style:x}))))};N.displayName="Demo";var y=N},63546:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree",function(){return o(24095)}])}},function(e){e.O(0,[5220,8726,9293,2888,9774,179],function(){return e(e.s=63546)}),_N_E=e.O()}]);